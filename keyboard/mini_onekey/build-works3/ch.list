
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

08005160 <Reset_Handler>:
 8005160:	b672      	cpsid	i
 8005162:	4821      	ldr	r0, [pc, #132]	; (80051e8 <endfiniloop+0x4>)
 8005164:	f380 8809 	msr	PSP, r0
 8005168:	2002      	movs	r0, #2
 800516a:	f380 8814 	msr	CONTROL, r0
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f001 fd6d 	bl	8006c50 <__core_init>
 8005176:	f001 f86b 	bl	8006250 <__early_init>
 800517a:	481c      	ldr	r0, [pc, #112]	; (80051ec <endfiniloop+0x8>)
 800517c:	491c      	ldr	r1, [pc, #112]	; (80051f0 <endfiniloop+0xc>)
 800517e:	4a1d      	ldr	r2, [pc, #116]	; (80051f4 <endfiniloop+0x10>)

08005180 <msloop>:
 8005180:	4291      	cmp	r1, r2
 8005182:	bf3c      	itt	cc
 8005184:	f841 0b04 	strcc.w	r0, [r1], #4
 8005188:	e7fa      	bcc.n	8005180 <msloop>
 800518a:	491b      	ldr	r1, [pc, #108]	; (80051f8 <endfiniloop+0x14>)
 800518c:	4a16      	ldr	r2, [pc, #88]	; (80051e8 <endfiniloop+0x4>)

0800518e <psloop>:
 800518e:	4291      	cmp	r1, r2
 8005190:	bf3c      	itt	cc
 8005192:	f841 0b04 	strcc.w	r0, [r1], #4
 8005196:	e7fa      	bcc.n	800518e <psloop>
 8005198:	4918      	ldr	r1, [pc, #96]	; (80051fc <endfiniloop+0x18>)
 800519a:	4a19      	ldr	r2, [pc, #100]	; (8005200 <endfiniloop+0x1c>)
 800519c:	4b19      	ldr	r3, [pc, #100]	; (8005204 <endfiniloop+0x20>)

0800519e <dloop>:
 800519e:	429a      	cmp	r2, r3
 80051a0:	bf3e      	ittt	cc
 80051a2:	f851 0b04 	ldrcc.w	r0, [r1], #4
 80051a6:	f842 0b04 	strcc.w	r0, [r2], #4
 80051aa:	e7f8      	bcc.n	800519e <dloop>
 80051ac:	2000      	movs	r0, #0
 80051ae:	4916      	ldr	r1, [pc, #88]	; (8005208 <endfiniloop+0x24>)
 80051b0:	4a16      	ldr	r2, [pc, #88]	; (800520c <endfiniloop+0x28>)

080051b2 <bloop>:
 80051b2:	4291      	cmp	r1, r2
 80051b4:	bf3c      	itt	cc
 80051b6:	f841 0b04 	strcc.w	r0, [r1], #4
 80051ba:	e7fa      	bcc.n	80051b2 <bloop>
 80051bc:	f001 fd40 	bl	8006c40 <__late_init>
 80051c0:	4c13      	ldr	r4, [pc, #76]	; (8005210 <endfiniloop+0x2c>)
 80051c2:	4d14      	ldr	r5, [pc, #80]	; (8005214 <endfiniloop+0x30>)

080051c4 <initloop>:
 80051c4:	42ac      	cmp	r4, r5
 80051c6:	da03      	bge.n	80051d0 <endinitloop>
 80051c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80051cc:	4788      	blx	r1
 80051ce:	e7f9      	b.n	80051c4 <initloop>

080051d0 <endinitloop>:
 80051d0:	f001 ffae 	bl	8007130 <main>
 80051d4:	4c10      	ldr	r4, [pc, #64]	; (8005218 <endfiniloop+0x34>)
 80051d6:	4d11      	ldr	r5, [pc, #68]	; (800521c <endfiniloop+0x38>)

080051d8 <finiloop>:
 80051d8:	42ac      	cmp	r4, r5
 80051da:	da03      	bge.n	80051e4 <endfiniloop>
 80051dc:	f854 1b04 	ldr.w	r1, [r4], #4
 80051e0:	4788      	blx	r1
 80051e2:	e7f9      	b.n	80051d8 <finiloop>

080051e4 <endfiniloop>:
 80051e4:	f001 bd24 	b.w	8006c30 <__default_exit>
 80051e8:	20001200 	.word	0x20001200
 80051ec:	55555555 	.word	0x55555555
 80051f0:	20000c00 	.word	0x20000c00
 80051f4:	20001000 	.word	0x20001000
 80051f8:	20001000 	.word	0x20001000
 80051fc:	08009638 	.word	0x08009638
 8005200:	20001200 	.word	0x20001200
 8005204:	2000123c 	.word	0x2000123c
 8005208:	20001240 	.word	0x20001240
 800520c:	20001578 	.word	0x20001578
 8005210:	08005160 	.word	0x08005160
 8005214:	08005160 	.word	0x08005160
 8005218:	08005160 	.word	0x08005160
 800521c:	08005160 	.word	0x08005160

08005220 <_port_switch>:
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	f8c1 d00c 	str.w	sp, [r1, #12]
 8005228:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800522c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005230 <_port_thread_start>:
 8005230:	2300      	movs	r3, #0
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	4628      	mov	r0, r5
 8005238:	47a0      	blx	r4
 800523a:	2000      	movs	r0, #0
 800523c:	f001 fc10 	bl	8006a60 <chThdExit>

08005240 <_port_switch_from_isr>:
 8005240:	f001 fc3e 	bl	8006ac0 <chSchDoReschedule>

08005244 <_port_exit_from_isr>:
 8005244:	df00      	svc	0
 8005246:	e7fe      	b.n	8005246 <_port_exit_from_isr+0x2>
	...

08005250 <__aeabi_drsub>:
 8005250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005254:	e002      	b.n	800525c <__adddf3>
 8005256:	bf00      	nop

08005258 <__aeabi_dsub>:
 8005258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800525c <__adddf3>:
 800525c:	b530      	push	{r4, r5, lr}
 800525e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005266:	ea94 0f05 	teq	r4, r5
 800526a:	bf08      	it	eq
 800526c:	ea90 0f02 	teqeq	r0, r2
 8005270:	bf1f      	itttt	ne
 8005272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800527a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800527e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005282:	f000 80e2 	beq.w	800544a <__adddf3+0x1ee>
 8005286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800528a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800528e:	bfb8      	it	lt
 8005290:	426d      	neglt	r5, r5
 8005292:	dd0c      	ble.n	80052ae <__adddf3+0x52>
 8005294:	442c      	add	r4, r5
 8005296:	ea80 0202 	eor.w	r2, r0, r2
 800529a:	ea81 0303 	eor.w	r3, r1, r3
 800529e:	ea82 0000 	eor.w	r0, r2, r0
 80052a2:	ea83 0101 	eor.w	r1, r3, r1
 80052a6:	ea80 0202 	eor.w	r2, r0, r2
 80052aa:	ea81 0303 	eor.w	r3, r1, r3
 80052ae:	2d36      	cmp	r5, #54	; 0x36
 80052b0:	bf88      	it	hi
 80052b2:	bd30      	pophi	{r4, r5, pc}
 80052b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80052b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80052bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80052c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80052c4:	d002      	beq.n	80052cc <__adddf3+0x70>
 80052c6:	4240      	negs	r0, r0
 80052c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80052cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80052d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80052d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80052d8:	d002      	beq.n	80052e0 <__adddf3+0x84>
 80052da:	4252      	negs	r2, r2
 80052dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80052e0:	ea94 0f05 	teq	r4, r5
 80052e4:	f000 80a7 	beq.w	8005436 <__adddf3+0x1da>
 80052e8:	f1a4 0401 	sub.w	r4, r4, #1
 80052ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80052f0:	db0d      	blt.n	800530e <__adddf3+0xb2>
 80052f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80052f6:	fa22 f205 	lsr.w	r2, r2, r5
 80052fa:	1880      	adds	r0, r0, r2
 80052fc:	f141 0100 	adc.w	r1, r1, #0
 8005300:	fa03 f20e 	lsl.w	r2, r3, lr
 8005304:	1880      	adds	r0, r0, r2
 8005306:	fa43 f305 	asr.w	r3, r3, r5
 800530a:	4159      	adcs	r1, r3
 800530c:	e00e      	b.n	800532c <__adddf3+0xd0>
 800530e:	f1a5 0520 	sub.w	r5, r5, #32
 8005312:	f10e 0e20 	add.w	lr, lr, #32
 8005316:	2a01      	cmp	r2, #1
 8005318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800531c:	bf28      	it	cs
 800531e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005322:	fa43 f305 	asr.w	r3, r3, r5
 8005326:	18c0      	adds	r0, r0, r3
 8005328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800532c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005330:	d507      	bpl.n	8005342 <__adddf3+0xe6>
 8005332:	f04f 0e00 	mov.w	lr, #0
 8005336:	f1dc 0c00 	rsbs	ip, ip, #0
 800533a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800533e:	eb6e 0101 	sbc.w	r1, lr, r1
 8005342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005346:	d31b      	bcc.n	8005380 <__adddf3+0x124>
 8005348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800534c:	d30c      	bcc.n	8005368 <__adddf3+0x10c>
 800534e:	0849      	lsrs	r1, r1, #1
 8005350:	ea5f 0030 	movs.w	r0, r0, rrx
 8005354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005358:	f104 0401 	add.w	r4, r4, #1
 800535c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005364:	f080 809a 	bcs.w	800549c <__adddf3+0x240>
 8005368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800536c:	bf08      	it	eq
 800536e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005372:	f150 0000 	adcs.w	r0, r0, #0
 8005376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800537a:	ea41 0105 	orr.w	r1, r1, r5
 800537e:	bd30      	pop	{r4, r5, pc}
 8005380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005384:	4140      	adcs	r0, r0
 8005386:	eb41 0101 	adc.w	r1, r1, r1
 800538a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800538e:	f1a4 0401 	sub.w	r4, r4, #1
 8005392:	d1e9      	bne.n	8005368 <__adddf3+0x10c>
 8005394:	f091 0f00 	teq	r1, #0
 8005398:	bf04      	itt	eq
 800539a:	4601      	moveq	r1, r0
 800539c:	2000      	moveq	r0, #0
 800539e:	fab1 f381 	clz	r3, r1
 80053a2:	bf08      	it	eq
 80053a4:	3320      	addeq	r3, #32
 80053a6:	f1a3 030b 	sub.w	r3, r3, #11
 80053aa:	f1b3 0220 	subs.w	r2, r3, #32
 80053ae:	da0c      	bge.n	80053ca <__adddf3+0x16e>
 80053b0:	320c      	adds	r2, #12
 80053b2:	dd08      	ble.n	80053c6 <__adddf3+0x16a>
 80053b4:	f102 0c14 	add.w	ip, r2, #20
 80053b8:	f1c2 020c 	rsb	r2, r2, #12
 80053bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80053c0:	fa21 f102 	lsr.w	r1, r1, r2
 80053c4:	e00c      	b.n	80053e0 <__adddf3+0x184>
 80053c6:	f102 0214 	add.w	r2, r2, #20
 80053ca:	bfd8      	it	le
 80053cc:	f1c2 0c20 	rsble	ip, r2, #32
 80053d0:	fa01 f102 	lsl.w	r1, r1, r2
 80053d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80053d8:	bfdc      	itt	le
 80053da:	ea41 010c 	orrle.w	r1, r1, ip
 80053de:	4090      	lslle	r0, r2
 80053e0:	1ae4      	subs	r4, r4, r3
 80053e2:	bfa2      	ittt	ge
 80053e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80053e8:	4329      	orrge	r1, r5
 80053ea:	bd30      	popge	{r4, r5, pc}
 80053ec:	ea6f 0404 	mvn.w	r4, r4
 80053f0:	3c1f      	subs	r4, #31
 80053f2:	da1c      	bge.n	800542e <__adddf3+0x1d2>
 80053f4:	340c      	adds	r4, #12
 80053f6:	dc0e      	bgt.n	8005416 <__adddf3+0x1ba>
 80053f8:	f104 0414 	add.w	r4, r4, #20
 80053fc:	f1c4 0220 	rsb	r2, r4, #32
 8005400:	fa20 f004 	lsr.w	r0, r0, r4
 8005404:	fa01 f302 	lsl.w	r3, r1, r2
 8005408:	ea40 0003 	orr.w	r0, r0, r3
 800540c:	fa21 f304 	lsr.w	r3, r1, r4
 8005410:	ea45 0103 	orr.w	r1, r5, r3
 8005414:	bd30      	pop	{r4, r5, pc}
 8005416:	f1c4 040c 	rsb	r4, r4, #12
 800541a:	f1c4 0220 	rsb	r2, r4, #32
 800541e:	fa20 f002 	lsr.w	r0, r0, r2
 8005422:	fa01 f304 	lsl.w	r3, r1, r4
 8005426:	ea40 0003 	orr.w	r0, r0, r3
 800542a:	4629      	mov	r1, r5
 800542c:	bd30      	pop	{r4, r5, pc}
 800542e:	fa21 f004 	lsr.w	r0, r1, r4
 8005432:	4629      	mov	r1, r5
 8005434:	bd30      	pop	{r4, r5, pc}
 8005436:	f094 0f00 	teq	r4, #0
 800543a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800543e:	bf06      	itte	eq
 8005440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005444:	3401      	addeq	r4, #1
 8005446:	3d01      	subne	r5, #1
 8005448:	e74e      	b.n	80052e8 <__adddf3+0x8c>
 800544a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800544e:	bf18      	it	ne
 8005450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005454:	d029      	beq.n	80054aa <__adddf3+0x24e>
 8005456:	ea94 0f05 	teq	r4, r5
 800545a:	bf08      	it	eq
 800545c:	ea90 0f02 	teqeq	r0, r2
 8005460:	d005      	beq.n	800546e <__adddf3+0x212>
 8005462:	ea54 0c00 	orrs.w	ip, r4, r0
 8005466:	bf04      	itt	eq
 8005468:	4619      	moveq	r1, r3
 800546a:	4610      	moveq	r0, r2
 800546c:	bd30      	pop	{r4, r5, pc}
 800546e:	ea91 0f03 	teq	r1, r3
 8005472:	bf1e      	ittt	ne
 8005474:	2100      	movne	r1, #0
 8005476:	2000      	movne	r0, #0
 8005478:	bd30      	popne	{r4, r5, pc}
 800547a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800547e:	d105      	bne.n	800548c <__adddf3+0x230>
 8005480:	0040      	lsls	r0, r0, #1
 8005482:	4149      	adcs	r1, r1
 8005484:	bf28      	it	cs
 8005486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800548a:	bd30      	pop	{r4, r5, pc}
 800548c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005490:	bf3c      	itt	cc
 8005492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8005496:	bd30      	popcc	{r4, r5, pc}
 8005498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800549c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80054a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80054a4:	f04f 0000 	mov.w	r0, #0
 80054a8:	bd30      	pop	{r4, r5, pc}
 80054aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80054ae:	bf1a      	itte	ne
 80054b0:	4619      	movne	r1, r3
 80054b2:	4610      	movne	r0, r2
 80054b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80054b8:	bf1c      	itt	ne
 80054ba:	460b      	movne	r3, r1
 80054bc:	4602      	movne	r2, r0
 80054be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80054c2:	bf06      	itte	eq
 80054c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80054c8:	ea91 0f03 	teqeq	r1, r3
 80054cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80054d0:	bd30      	pop	{r4, r5, pc}
 80054d2:	bf00      	nop

080054d4 <__aeabi_ui2d>:
 80054d4:	f090 0f00 	teq	r0, #0
 80054d8:	bf04      	itt	eq
 80054da:	2100      	moveq	r1, #0
 80054dc:	4770      	bxeq	lr
 80054de:	b530      	push	{r4, r5, lr}
 80054e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80054e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80054e8:	f04f 0500 	mov.w	r5, #0
 80054ec:	f04f 0100 	mov.w	r1, #0
 80054f0:	e750      	b.n	8005394 <__adddf3+0x138>
 80054f2:	bf00      	nop

080054f4 <__aeabi_i2d>:
 80054f4:	f090 0f00 	teq	r0, #0
 80054f8:	bf04      	itt	eq
 80054fa:	2100      	moveq	r1, #0
 80054fc:	4770      	bxeq	lr
 80054fe:	b530      	push	{r4, r5, lr}
 8005500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800550c:	bf48      	it	mi
 800550e:	4240      	negmi	r0, r0
 8005510:	f04f 0100 	mov.w	r1, #0
 8005514:	e73e      	b.n	8005394 <__adddf3+0x138>
 8005516:	bf00      	nop

08005518 <__aeabi_f2d>:
 8005518:	0042      	lsls	r2, r0, #1
 800551a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800551e:	ea4f 0131 	mov.w	r1, r1, rrx
 8005522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005526:	bf1f      	itttt	ne
 8005528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800552c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005534:	4770      	bxne	lr
 8005536:	f092 0f00 	teq	r2, #0
 800553a:	bf14      	ite	ne
 800553c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005540:	4770      	bxeq	lr
 8005542:	b530      	push	{r4, r5, lr}
 8005544:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800554c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005550:	e720      	b.n	8005394 <__adddf3+0x138>
 8005552:	bf00      	nop

08005554 <__aeabi_ul2d>:
 8005554:	ea50 0201 	orrs.w	r2, r0, r1
 8005558:	bf08      	it	eq
 800555a:	4770      	bxeq	lr
 800555c:	b530      	push	{r4, r5, lr}
 800555e:	f04f 0500 	mov.w	r5, #0
 8005562:	e00a      	b.n	800557a <__aeabi_l2d+0x16>

08005564 <__aeabi_l2d>:
 8005564:	ea50 0201 	orrs.w	r2, r0, r1
 8005568:	bf08      	it	eq
 800556a:	4770      	bxeq	lr
 800556c:	b530      	push	{r4, r5, lr}
 800556e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8005572:	d502      	bpl.n	800557a <__aeabi_l2d+0x16>
 8005574:	4240      	negs	r0, r0
 8005576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800557a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800557e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8005586:	f43f aedc 	beq.w	8005342 <__adddf3+0xe6>
 800558a:	f04f 0203 	mov.w	r2, #3
 800558e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005592:	bf18      	it	ne
 8005594:	3203      	addne	r2, #3
 8005596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800559a:	bf18      	it	ne
 800559c:	3203      	addne	r2, #3
 800559e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80055a2:	f1c2 0320 	rsb	r3, r2, #32
 80055a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80055aa:	fa20 f002 	lsr.w	r0, r0, r2
 80055ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80055b2:	ea40 000e 	orr.w	r0, r0, lr
 80055b6:	fa21 f102 	lsr.w	r1, r1, r2
 80055ba:	4414      	add	r4, r2
 80055bc:	e6c1      	b.n	8005342 <__adddf3+0xe6>
 80055be:	bf00      	nop

080055c0 <__aeabi_dmul>:
 80055c0:	b570      	push	{r4, r5, r6, lr}
 80055c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80055c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80055ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80055ce:	bf1d      	ittte	ne
 80055d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80055d4:	ea94 0f0c 	teqne	r4, ip
 80055d8:	ea95 0f0c 	teqne	r5, ip
 80055dc:	f000 f8de 	bleq	800579c <__aeabi_dmul+0x1dc>
 80055e0:	442c      	add	r4, r5
 80055e2:	ea81 0603 	eor.w	r6, r1, r3
 80055e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80055ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80055ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80055f2:	bf18      	it	ne
 80055f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80055f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80055fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005600:	d038      	beq.n	8005674 <__aeabi_dmul+0xb4>
 8005602:	fba0 ce02 	umull	ip, lr, r0, r2
 8005606:	f04f 0500 	mov.w	r5, #0
 800560a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800560e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8005612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005616:	f04f 0600 	mov.w	r6, #0
 800561a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800561e:	f09c 0f00 	teq	ip, #0
 8005622:	bf18      	it	ne
 8005624:	f04e 0e01 	orrne.w	lr, lr, #1
 8005628:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800562c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005630:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005634:	d204      	bcs.n	8005640 <__aeabi_dmul+0x80>
 8005636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800563a:	416d      	adcs	r5, r5
 800563c:	eb46 0606 	adc.w	r6, r6, r6
 8005640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800564c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005654:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005658:	bf88      	it	hi
 800565a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800565e:	d81e      	bhi.n	800569e <__aeabi_dmul+0xde>
 8005660:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005664:	bf08      	it	eq
 8005666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800566a:	f150 0000 	adcs.w	r0, r0, #0
 800566e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005672:	bd70      	pop	{r4, r5, r6, pc}
 8005674:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005678:	ea46 0101 	orr.w	r1, r6, r1
 800567c:	ea40 0002 	orr.w	r0, r0, r2
 8005680:	ea81 0103 	eor.w	r1, r1, r3
 8005684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8005688:	bfc2      	ittt	gt
 800568a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800568e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005692:	bd70      	popgt	{r4, r5, r6, pc}
 8005694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005698:	f04f 0e00 	mov.w	lr, #0
 800569c:	3c01      	subs	r4, #1
 800569e:	f300 80ab 	bgt.w	80057f8 <__aeabi_dmul+0x238>
 80056a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80056a6:	bfde      	ittt	le
 80056a8:	2000      	movle	r0, #0
 80056aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80056ae:	bd70      	pople	{r4, r5, r6, pc}
 80056b0:	f1c4 0400 	rsb	r4, r4, #0
 80056b4:	3c20      	subs	r4, #32
 80056b6:	da35      	bge.n	8005724 <__aeabi_dmul+0x164>
 80056b8:	340c      	adds	r4, #12
 80056ba:	dc1b      	bgt.n	80056f4 <__aeabi_dmul+0x134>
 80056bc:	f104 0414 	add.w	r4, r4, #20
 80056c0:	f1c4 0520 	rsb	r5, r4, #32
 80056c4:	fa00 f305 	lsl.w	r3, r0, r5
 80056c8:	fa20 f004 	lsr.w	r0, r0, r4
 80056cc:	fa01 f205 	lsl.w	r2, r1, r5
 80056d0:	ea40 0002 	orr.w	r0, r0, r2
 80056d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80056d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80056dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80056e0:	fa21 f604 	lsr.w	r6, r1, r4
 80056e4:	eb42 0106 	adc.w	r1, r2, r6
 80056e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80056ec:	bf08      	it	eq
 80056ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80056f2:	bd70      	pop	{r4, r5, r6, pc}
 80056f4:	f1c4 040c 	rsb	r4, r4, #12
 80056f8:	f1c4 0520 	rsb	r5, r4, #32
 80056fc:	fa00 f304 	lsl.w	r3, r0, r4
 8005700:	fa20 f005 	lsr.w	r0, r0, r5
 8005704:	fa01 f204 	lsl.w	r2, r1, r4
 8005708:	ea40 0002 	orr.w	r0, r0, r2
 800570c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005714:	f141 0100 	adc.w	r1, r1, #0
 8005718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800571c:	bf08      	it	eq
 800571e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005722:	bd70      	pop	{r4, r5, r6, pc}
 8005724:	f1c4 0520 	rsb	r5, r4, #32
 8005728:	fa00 f205 	lsl.w	r2, r0, r5
 800572c:	ea4e 0e02 	orr.w	lr, lr, r2
 8005730:	fa20 f304 	lsr.w	r3, r0, r4
 8005734:	fa01 f205 	lsl.w	r2, r1, r5
 8005738:	ea43 0302 	orr.w	r3, r3, r2
 800573c:	fa21 f004 	lsr.w	r0, r1, r4
 8005740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005744:	fa21 f204 	lsr.w	r2, r1, r4
 8005748:	ea20 0002 	bic.w	r0, r0, r2
 800574c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005754:	bf08      	it	eq
 8005756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800575a:	bd70      	pop	{r4, r5, r6, pc}
 800575c:	f094 0f00 	teq	r4, #0
 8005760:	d10f      	bne.n	8005782 <__aeabi_dmul+0x1c2>
 8005762:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8005766:	0040      	lsls	r0, r0, #1
 8005768:	eb41 0101 	adc.w	r1, r1, r1
 800576c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005770:	bf08      	it	eq
 8005772:	3c01      	subeq	r4, #1
 8005774:	d0f7      	beq.n	8005766 <__aeabi_dmul+0x1a6>
 8005776:	ea41 0106 	orr.w	r1, r1, r6
 800577a:	f095 0f00 	teq	r5, #0
 800577e:	bf18      	it	ne
 8005780:	4770      	bxne	lr
 8005782:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8005786:	0052      	lsls	r2, r2, #1
 8005788:	eb43 0303 	adc.w	r3, r3, r3
 800578c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005790:	bf08      	it	eq
 8005792:	3d01      	subeq	r5, #1
 8005794:	d0f7      	beq.n	8005786 <__aeabi_dmul+0x1c6>
 8005796:	ea43 0306 	orr.w	r3, r3, r6
 800579a:	4770      	bx	lr
 800579c:	ea94 0f0c 	teq	r4, ip
 80057a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80057a4:	bf18      	it	ne
 80057a6:	ea95 0f0c 	teqne	r5, ip
 80057aa:	d00c      	beq.n	80057c6 <__aeabi_dmul+0x206>
 80057ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80057b0:	bf18      	it	ne
 80057b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80057b6:	d1d1      	bne.n	800575c <__aeabi_dmul+0x19c>
 80057b8:	ea81 0103 	eor.w	r1, r1, r3
 80057bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80057c0:	f04f 0000 	mov.w	r0, #0
 80057c4:	bd70      	pop	{r4, r5, r6, pc}
 80057c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80057ca:	bf06      	itte	eq
 80057cc:	4610      	moveq	r0, r2
 80057ce:	4619      	moveq	r1, r3
 80057d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80057d4:	d019      	beq.n	800580a <__aeabi_dmul+0x24a>
 80057d6:	ea94 0f0c 	teq	r4, ip
 80057da:	d102      	bne.n	80057e2 <__aeabi_dmul+0x222>
 80057dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80057e0:	d113      	bne.n	800580a <__aeabi_dmul+0x24a>
 80057e2:	ea95 0f0c 	teq	r5, ip
 80057e6:	d105      	bne.n	80057f4 <__aeabi_dmul+0x234>
 80057e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80057ec:	bf1c      	itt	ne
 80057ee:	4610      	movne	r0, r2
 80057f0:	4619      	movne	r1, r3
 80057f2:	d10a      	bne.n	800580a <__aeabi_dmul+0x24a>
 80057f4:	ea81 0103 	eor.w	r1, r1, r3
 80057f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80057fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005800:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005804:	f04f 0000 	mov.w	r0, #0
 8005808:	bd70      	pop	{r4, r5, r6, pc}
 800580a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800580e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8005812:	bd70      	pop	{r4, r5, r6, pc}

08005814 <__aeabi_ddiv>:
 8005814:	b570      	push	{r4, r5, r6, lr}
 8005816:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800581a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800581e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005822:	bf1d      	ittte	ne
 8005824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005828:	ea94 0f0c 	teqne	r4, ip
 800582c:	ea95 0f0c 	teqne	r5, ip
 8005830:	f000 f8a7 	bleq	8005982 <__aeabi_ddiv+0x16e>
 8005834:	eba4 0405 	sub.w	r4, r4, r5
 8005838:	ea81 0e03 	eor.w	lr, r1, r3
 800583c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005844:	f000 8088 	beq.w	8005958 <__aeabi_ddiv+0x144>
 8005848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800584c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800585c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005868:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800586c:	429d      	cmp	r5, r3
 800586e:	bf08      	it	eq
 8005870:	4296      	cmpeq	r6, r2
 8005872:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8005876:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800587a:	d202      	bcs.n	8005882 <__aeabi_ddiv+0x6e>
 800587c:	085b      	lsrs	r3, r3, #1
 800587e:	ea4f 0232 	mov.w	r2, r2, rrx
 8005882:	1ab6      	subs	r6, r6, r2
 8005884:	eb65 0503 	sbc.w	r5, r5, r3
 8005888:	085b      	lsrs	r3, r3, #1
 800588a:	ea4f 0232 	mov.w	r2, r2, rrx
 800588e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005892:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8005896:	ebb6 0e02 	subs.w	lr, r6, r2
 800589a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800589e:	bf22      	ittt	cs
 80058a0:	1ab6      	subcs	r6, r6, r2
 80058a2:	4675      	movcs	r5, lr
 80058a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80058a8:	085b      	lsrs	r3, r3, #1
 80058aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80058ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80058b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80058b6:	bf22      	ittt	cs
 80058b8:	1ab6      	subcs	r6, r6, r2
 80058ba:	4675      	movcs	r5, lr
 80058bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80058c0:	085b      	lsrs	r3, r3, #1
 80058c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80058c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80058ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80058ce:	bf22      	ittt	cs
 80058d0:	1ab6      	subcs	r6, r6, r2
 80058d2:	4675      	movcs	r5, lr
 80058d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80058d8:	085b      	lsrs	r3, r3, #1
 80058da:	ea4f 0232 	mov.w	r2, r2, rrx
 80058de:	ebb6 0e02 	subs.w	lr, r6, r2
 80058e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80058e6:	bf22      	ittt	cs
 80058e8:	1ab6      	subcs	r6, r6, r2
 80058ea:	4675      	movcs	r5, lr
 80058ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80058f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80058f4:	d018      	beq.n	8005928 <__aeabi_ddiv+0x114>
 80058f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80058fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80058fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8005902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800590a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800590e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8005912:	d1c0      	bne.n	8005896 <__aeabi_ddiv+0x82>
 8005914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005918:	d10b      	bne.n	8005932 <__aeabi_ddiv+0x11e>
 800591a:	ea41 0100 	orr.w	r1, r1, r0
 800591e:	f04f 0000 	mov.w	r0, #0
 8005922:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005926:	e7b6      	b.n	8005896 <__aeabi_ddiv+0x82>
 8005928:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800592c:	bf04      	itt	eq
 800592e:	4301      	orreq	r1, r0
 8005930:	2000      	moveq	r0, #0
 8005932:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005936:	bf88      	it	hi
 8005938:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800593c:	f63f aeaf 	bhi.w	800569e <__aeabi_dmul+0xde>
 8005940:	ebb5 0c03 	subs.w	ip, r5, r3
 8005944:	bf04      	itt	eq
 8005946:	ebb6 0c02 	subseq.w	ip, r6, r2
 800594a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800594e:	f150 0000 	adcs.w	r0, r0, #0
 8005952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005956:	bd70      	pop	{r4, r5, r6, pc}
 8005958:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800595c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005964:	bfc2      	ittt	gt
 8005966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800596a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800596e:	bd70      	popgt	{r4, r5, r6, pc}
 8005970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005974:	f04f 0e00 	mov.w	lr, #0
 8005978:	3c01      	subs	r4, #1
 800597a:	e690      	b.n	800569e <__aeabi_dmul+0xde>
 800597c:	ea45 0e06 	orr.w	lr, r5, r6
 8005980:	e68d      	b.n	800569e <__aeabi_dmul+0xde>
 8005982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005986:	ea94 0f0c 	teq	r4, ip
 800598a:	bf08      	it	eq
 800598c:	ea95 0f0c 	teqeq	r5, ip
 8005990:	f43f af3b 	beq.w	800580a <__aeabi_dmul+0x24a>
 8005994:	ea94 0f0c 	teq	r4, ip
 8005998:	d10a      	bne.n	80059b0 <__aeabi_ddiv+0x19c>
 800599a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800599e:	f47f af34 	bne.w	800580a <__aeabi_dmul+0x24a>
 80059a2:	ea95 0f0c 	teq	r5, ip
 80059a6:	f47f af25 	bne.w	80057f4 <__aeabi_dmul+0x234>
 80059aa:	4610      	mov	r0, r2
 80059ac:	4619      	mov	r1, r3
 80059ae:	e72c      	b.n	800580a <__aeabi_dmul+0x24a>
 80059b0:	ea95 0f0c 	teq	r5, ip
 80059b4:	d106      	bne.n	80059c4 <__aeabi_ddiv+0x1b0>
 80059b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80059ba:	f43f aefd 	beq.w	80057b8 <__aeabi_dmul+0x1f8>
 80059be:	4610      	mov	r0, r2
 80059c0:	4619      	mov	r1, r3
 80059c2:	e722      	b.n	800580a <__aeabi_dmul+0x24a>
 80059c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80059c8:	bf18      	it	ne
 80059ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80059ce:	f47f aec5 	bne.w	800575c <__aeabi_dmul+0x19c>
 80059d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80059d6:	f47f af0d 	bne.w	80057f4 <__aeabi_dmul+0x234>
 80059da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80059de:	f47f aeeb 	bne.w	80057b8 <__aeabi_dmul+0x1f8>
 80059e2:	e712      	b.n	800580a <__aeabi_dmul+0x24a>
	...

080059f0 <__aeabi_d2iz>:
 80059f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80059f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80059f8:	d215      	bcs.n	8005a26 <__aeabi_d2iz+0x36>
 80059fa:	d511      	bpl.n	8005a20 <__aeabi_d2iz+0x30>
 80059fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8005a00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005a04:	d912      	bls.n	8005a2c <__aeabi_d2iz+0x3c>
 8005a06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005a0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005a12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005a16:	fa23 f002 	lsr.w	r0, r3, r2
 8005a1a:	bf18      	it	ne
 8005a1c:	4240      	negne	r0, r0
 8005a1e:	4770      	bx	lr
 8005a20:	f04f 0000 	mov.w	r0, #0
 8005a24:	4770      	bx	lr
 8005a26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005a2a:	d105      	bne.n	8005a38 <__aeabi_d2iz+0x48>
 8005a2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8005a30:	bf08      	it	eq
 8005a32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8005a36:	4770      	bx	lr
 8005a38:	f04f 0000 	mov.w	r0, #0
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop

08005a40 <usb_get_descriptor_cb.lto_priv.49>:
 * Returns the proper descriptor
 */
static const USBDescriptor *usb_get_descriptor_cb(USBDriver *usbp, uint8_t dtype, uint8_t dindex, uint16_t lang) {
  (void)usbp;
  (void)lang;
  switch(dtype) {
 8005a40:	3901      	subs	r1, #1
 8005a42:	2921      	cmp	r1, #33	; 0x21
 8005a44:	d819      	bhi.n	8005a7a <usb_get_descriptor_cb.lto_priv.49+0x3a>
 8005a46:	e8df f001 	tbb	[pc, r1]
 8005a4a:	1c1a      	.short	0x1c1a
 8005a4c:	1818181e 	.word	0x1818181e
 8005a50:	18181818 	.word	0x18181818
 8005a54:	18181818 	.word	0x18181818
 8005a58:	18181818 	.word	0x18181818
 8005a5c:	18181818 	.word	0x18181818
 8005a60:	18181818 	.word	0x18181818
 8005a64:	18181818 	.word	0x18181818
 8005a68:	11241818 	.word	0x11241818
      return &nkro_hid_descriptor;
#endif /* NKRO_ENABLE */
    }

  case USB_DESCRIPTOR_HID_REPORT:       /* HID Report Descriptor */
    switch(lang) {
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	d804      	bhi.n	8005a7a <usb_get_descriptor_cb.lto_priv.49+0x3a>
 8005a70:	e8df f003 	tbb	[pc, r3]
 8005a74:	2203201e 	.word	0x2203201e
 8005a78:	24          	.byte	0x24
 8005a79:	00          	.byte	0x00
    case NKRO_INTERFACE:
      return &nkro_hid_report_descriptor;
#endif /* NKRO_ENABLE */
    }
  }
  return NULL;
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	4770      	bx	lr
  (void)usbp;
  (void)lang;
  switch(dtype) {
  /* Generic descriptors */
  case USB_DESCRIPTOR_DEVICE:   /* Device Descriptor */
    return &usb_device_descriptor;
 8005a7e:	4814      	ldr	r0, [pc, #80]	; (8005ad0 <usb_get_descriptor_cb.lto_priv.49+0x90>)
 8005a80:	4770      	bx	lr

  case USB_DESCRIPTOR_CONFIGURATION:    /* Configuration Descriptor */
    return &hid_configuration_descriptor;
 8005a82:	4814      	ldr	r0, [pc, #80]	; (8005ad4 <usb_get_descriptor_cb.lto_priv.49+0x94>)
 8005a84:	4770      	bx	lr

  case USB_DESCRIPTOR_STRING:   /* Strings */
    if(dindex < 4)
 8005a86:	2a03      	cmp	r2, #3
 8005a88:	d8f7      	bhi.n	8005a7a <usb_get_descriptor_cb.lto_priv.49+0x3a>
      return &usb_strings[dindex];
 8005a8a:	4b13      	ldr	r3, [pc, #76]	; (8005ad8 <usb_get_descriptor_cb.lto_priv.49+0x98>)
 8005a8c:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
 8005a90:	4770      	bx	lr
    break;

  /* HID specific descriptors */
  case USB_DESCRIPTOR_HID:      /* HID Descriptors */
    switch(lang) {    /* yea, poor label, it's actually wIndex from the setup packet */
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d8ea      	bhi.n	8005a6c <usb_get_descriptor_cb.lto_priv.49+0x2c>
 8005a96:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <usb_get_descriptor_cb.lto_priv.49+0x5c>)
 8005a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9c:	08005ac1 	.word	0x08005ac1
 8005aa0:	08005acd 	.word	0x08005acd
 8005aa4:	08005a6d 	.word	0x08005a6d
 8005aa8:	08005ac9 	.word	0x08005ac9
 8005aac:	08005ac5 	.word	0x08005ac5
    }

  case USB_DESCRIPTOR_HID_REPORT:       /* HID Report Descriptor */
    switch(lang) {
    case KBD_INTERFACE:
      return &keyboard_hid_report_descriptor;
 8005ab0:	480a      	ldr	r0, [pc, #40]	; (8005adc <usb_get_descriptor_cb.lto_priv.49+0x9c>)
      return &nkro_hid_report_descriptor;
#endif /* NKRO_ENABLE */
    }
  }
  return NULL;
}
 8005ab2:	4770      	bx	lr
    case KBD_INTERFACE:
      return &keyboard_hid_report_descriptor;

#ifdef MOUSE_ENABLE
    case MOUSE_INTERFACE:
      return &mouse_hid_report_descriptor;
 8005ab4:	480a      	ldr	r0, [pc, #40]	; (8005ae0 <usb_get_descriptor_cb.lto_priv.49+0xa0>)
 8005ab6:	4770      	bx	lr
    case CONSOLE_INTERFACE:
      return &console_hid_report_descriptor;
#endif /* CONSOLE_ENABLE */
#ifdef EXTRAKEY_ENABLE
    case EXTRA_INTERFACE:
      return &extra_hid_report_descriptor;
 8005ab8:	480a      	ldr	r0, [pc, #40]	; (8005ae4 <usb_get_descriptor_cb.lto_priv.49+0xa4>)
 8005aba:	4770      	bx	lr
#endif /* EXTRAKEY_ENABLE */
#ifdef NKRO_ENABLE
    case NKRO_INTERFACE:
      return &nkro_hid_report_descriptor;
 8005abc:	480a      	ldr	r0, [pc, #40]	; (8005ae8 <usb_get_descriptor_cb.lto_priv.49+0xa8>)
 8005abe:	4770      	bx	lr

  /* HID specific descriptors */
  case USB_DESCRIPTOR_HID:      /* HID Descriptors */
    switch(lang) {    /* yea, poor label, it's actually wIndex from the setup packet */
    case KBD_INTERFACE:
      return &keyboard_hid_descriptor;
 8005ac0:	480a      	ldr	r0, [pc, #40]	; (8005aec <usb_get_descriptor_cb.lto_priv.49+0xac>)
 8005ac2:	4770      	bx	lr
    case EXTRA_INTERFACE:
      return &extra_hid_descriptor;
#endif /* EXTRAKEY_ENABLE */
#ifdef NKRO_ENABLE
    case NKRO_INTERFACE:
      return &nkro_hid_descriptor;
 8005ac4:	480a      	ldr	r0, [pc, #40]	; (8005af0 <usb_get_descriptor_cb.lto_priv.49+0xb0>)
 8005ac6:	4770      	bx	lr
    case CONSOLE_INTERFACE:
      return &console_hid_descriptor;
#endif /* CONSOLE_ENABLE */
#ifdef EXTRAKEY_ENABLE
    case EXTRA_INTERFACE:
      return &extra_hid_descriptor;
 8005ac8:	480a      	ldr	r0, [pc, #40]	; (8005af4 <usb_get_descriptor_cb.lto_priv.49+0xb4>)
 8005aca:	4770      	bx	lr
    case KBD_INTERFACE:
      return &keyboard_hid_descriptor;

#ifdef MOUSE_ENABLE
    case MOUSE_INTERFACE:
      return &mouse_hid_descriptor;
 8005acc:	480a      	ldr	r0, [pc, #40]	; (8005af8 <usb_get_descriptor_cb.lto_priv.49+0xb8>)
 8005ace:	4770      	bx	lr
 8005ad0:	080094e0 	.word	0x080094e0
 8005ad4:	08009310 	.word	0x08009310
 8005ad8:	08009210 	.word	0x08009210
 8005adc:	08009430 	.word	0x08009430
 8005ae0:	080092c0 	.word	0x080092c0
 8005ae4:	080093b0 	.word	0x080093b0
 8005ae8:	08009340 	.word	0x08009340
 8005aec:	080094f0 	.word	0x080094f0
 8005af0:	080094d0 	.word	0x080094d0
 8005af4:	08009330 	.word	0x08009330
 8005af8:	080093c0 	.word	0x080093c0
 8005afc:	f3af 8000 	nop.w

08005b00 <usb_packet_write_from_buffer>:
 *
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
 8005b00:	b470      	push	{r4, r5, r6}
  uint32_t w;
  size_t i;
  stm32_usb_pma_t *pmap;

  pmap = USB_ADDR2PTR(udp->TXADDR0);
 8005b02:	6805      	ldr	r5, [r0, #0]
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8005b04:	6042      	str	r2, [r0, #4]
                                         size_t n) {
  uint32_t w;
  size_t i;
  stm32_usb_pma_t *pmap;

  pmap = USB_ADDR2PTR(udp->TXADDR0);
 8005b06:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
 8005b0a:	f505 5540 	add.w	r5, r5, #12288	; 0x3000
 8005b0e:	006d      	lsls	r5, r5, #1
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;

  /* Pushing all complete words.*/
  i = 0;
  w = 0; /* Useless but silences a warning.*/
  while (i < n) {
 8005b10:	b19a      	cbz	r2, 8005b3a <usb_packet_write_from_buffer+0x3a>
 8005b12:	460b      	mov	r3, r1
 8005b14:	188e      	adds	r6, r1, r2
 8005b16:	2000      	movs	r0, #0
 8005b18:	1a5c      	subs	r4, r3, r1
    if ((i & 1) == 0) {
 8005b1a:	07e4      	lsls	r4, r4, #31
      w = (uint32_t)*buf;
    }
    else {
      w |= (uint32_t)*buf << 8;
 8005b1c:	bf4a      	itet	mi
 8005b1e:	781c      	ldrbmi	r4, [r3, #0]
  /* Pushing all complete words.*/
  i = 0;
  w = 0; /* Useless but silences a warning.*/
  while (i < n) {
    if ((i & 1) == 0) {
      w = (uint32_t)*buf;
 8005b20:	7818      	ldrbpl	r0, [r3, #0]
    }
    else {
      w |= (uint32_t)*buf << 8;
 8005b22:	ea40 2004 	orrmi.w	r0, r0, r4, lsl #8
      *pmap = (stm32_usb_pma_t)w;
      pmap++;
    }
    i++;
    buf++;
 8005b26:	f103 0301 	add.w	r3, r3, #1
    if ((i & 1) == 0) {
      w = (uint32_t)*buf;
    }
    else {
      w |= (uint32_t)*buf << 8;
      *pmap = (stm32_usb_pma_t)w;
 8005b2a:	bf48      	it	mi
 8005b2c:	f845 0b04 	strmi.w	r0, [r5], #4
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;

  /* Pushing all complete words.*/
  i = 0;
  w = 0; /* Useless but silences a warning.*/
  while (i < n) {
 8005b30:	42b3      	cmp	r3, r6
 8005b32:	d1f1      	bne.n	8005b18 <usb_packet_write_from_buffer+0x18>
    i++;
    buf++;
  }

  /* Remaining byte.*/
  if ((i & 1) != 0) {
 8005b34:	07d3      	lsls	r3, r2, #31
    *pmap = (stm32_usb_pma_t)w;
 8005b36:	bf48      	it	mi
 8005b38:	6028      	strmi	r0, [r5, #0]
  }
}
 8005b3a:	bc70      	pop	{r4, r5, r6}
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop

08005b40 <set_address>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8005b40:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8005b44:	6842      	ldr	r2, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8005b46:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {

  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 8005b4a:	4906      	ldr	r1, [pc, #24]	; (8005b64 <set_address+0x24>)
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8005b4c:	6812      	ldr	r2, [r2, #0]
 8005b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 8005b52:	b510      	push	{r4, lr}
 8005b54:	4604      	mov	r4, r0
 8005b56:	64cb      	str	r3, [r1, #76]	; 0x4c

  usbp->address = usbp->setup[2];
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8005b58:	b10a      	cbz	r2, 8005b5e <set_address+0x1e>
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	4790      	blx	r2
  usbp->state = USB_SELECTED;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	7023      	strb	r3, [r4, #0]
 8005b62:	bd10      	pop	{r4, pc}
 8005b64:	40005c00 	.word	0x40005c00
 8005b68:	f3af 8000 	nop.w
 8005b6c:	f3af 8000 	nop.w

08005b70 <_port_irq_epilogue>:

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005b70:	2320      	movs	r3, #32
 8005b72:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8005b76:	4b0f      	ldr	r3, [pc, #60]	; (8005bb4 <_port_irq_epilogue+0x44>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8005b7e:	d102      	bne.n	8005b86 <_port_irq_epilogue+0x16>
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8005b86:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8005b8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b8e:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8005b92:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8005b96:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8005b9a:	4a07      	ldr	r2, [pc, #28]	; (8005bb8 <_port_irq_epilogue+0x48>)
 8005b9c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8005b9e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8005ba0:	6889      	ldr	r1, [r1, #8]
 8005ba2:	6892      	ldr	r2, [r2, #8]
 8005ba4:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8005ba6:	bf8c      	ite	hi
 8005ba8:	4a04      	ldrhi	r2, [pc, #16]	; (8005bbc <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8005baa:	4a05      	ldrls	r2, [pc, #20]	; (8005bc0 <_port_irq_epilogue+0x50>)
 8005bac:	f843 2c08 	str.w	r2, [r3, #-8]
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	e000ed00 	.word	0xe000ed00
 8005bb8:	20001300 	.word	0x20001300
 8005bbc:	08005241 	.word	0x08005241
 8005bc0:	08005244 	.word	0x08005244
 8005bc4:	f3af 8000 	nop.w
 8005bc8:	f3af 8000 	nop.w
 8005bcc:	f3af 8000 	nop.w

08005bd0 <Vector8C>:
 */
OSAL_IRQ_HANDLER(STM32_USB1_HP_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  OSAL_IRQ_EPILOGUE();
 8005bd0:	f7ff bfce 	b.w	8005b70 <_port_irq_epilogue>
 8005bd4:	f3af 8000 	nop.w
 8005bd8:	f3af 8000 	nop.w
 8005bdc:	f3af 8000 	nop.w

08005be0 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8005be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8005be4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8005be8:	6923      	ldr	r3, [r4, #16]
 8005bea:	079b      	lsls	r3, r3, #30
 8005bec:	d403      	bmi.n	8005bf6 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8005bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8005bf2:	f7ff bfbd 	b.w	8005b70 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8005bf6:	2700      	movs	r7, #0
 8005bf8:	6127      	str	r7, [r4, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005bfa:	2520      	movs	r5, #32
 8005bfc:	f385 8811 	msr	BASEPRI, r5
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8005c00:	4e1e      	ldr	r6, [pc, #120]	; (8005c7c <VectorB0+0x9c>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8005c02:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8005c04:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8005c08:	69f3      	ldr	r3, [r6, #28]
 8005c0a:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8005c0c:	ebce 0100 	rsb	r1, lr, r0
 8005c10:	891a      	ldrh	r2, [r3, #8]
 8005c12:	b289      	uxth	r1, r1
 8005c14:	4291      	cmp	r1, r2
 8005c16:	f106 081c 	add.w	r8, r6, #28
 8005c1a:	d31b      	bcc.n	8005c54 <VectorB0+0x74>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8005c1c:	6819      	ldr	r1, [r3, #0]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8005c1e:	4472      	add	r2, lr
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8005c20:	4541      	cmp	r1, r8
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8005c22:	84f2      	strh	r2, [r6, #38]	; 0x26

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8005c24:	68da      	ldr	r2, [r3, #12]
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8005c26:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8005c2a:	61f1      	str	r1, [r6, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 8005c2c:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8005c2e:	bf08      	it	eq
 8005c30:	60e7      	streq	r7, [r4, #12]
 8005c32:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8005c36:	6918      	ldr	r0, [r3, #16]
 8005c38:	4790      	blx	r2
 8005c3a:	f385 8811 	msr	BASEPRI, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8005c3e:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8005c40:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8005c44:	69f3      	ldr	r3, [r6, #28]
 8005c46:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8005c48:	ebce 0100 	rsb	r1, lr, r0
 8005c4c:	891a      	ldrh	r2, [r3, #8]
 8005c4e:	b289      	uxth	r1, r1
 8005c50:	428a      	cmp	r2, r1
 8005c52:	d9e3      	bls.n	8005c1c <VectorB0+0x3c>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8005c54:	4543      	cmp	r3, r8
 8005c56:	d00a      	beq.n	8005c6e <VectorB0+0x8e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8005c58:	4472      	add	r2, lr
 8005c5a:	1a12      	subs	r2, r2, r0
 8005c5c:	b292      	uxth	r2, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8005c5e:	2a01      	cmp	r2, #1
 8005c60:	bf98      	it	ls
 8005c62:	2202      	movls	r2, #2
  }
  port_timer_set_alarm(now + delta);
 8005c64:	4402      	add	r2, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8005c66:	b292      	uxth	r2, r2
 8005c68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8005c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8005c78:	f7ff bf7a 	b.w	8005b70 <_port_irq_epilogue>
 8005c7c:	20001300 	.word	0x20001300

08005c80 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8005c80:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8005c84:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8005c86:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	f3af 8000 	nop.w
 8005c98:	f3af 8000 	nop.w
 8005c9c:	f3af 8000 	nop.w

08005ca0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8005ca0:	b410      	push	{r4}
 8005ca2:	2320      	movs	r3, #32
 8005ca4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8005ca8:	4c09      	ldr	r4, [pc, #36]	; (8005cd0 <chCoreAlloc+0x30>)
 8005caa:	4b0a      	ldr	r3, [pc, #40]	; (8005cd4 <chCoreAlloc+0x34>)
 8005cac:	6822      	ldr	r2, [r4, #0]
 8005cae:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8005cb0:	1dc3      	adds	r3, r0, #7
 8005cb2:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8005cb6:	1a89      	subs	r1, r1, r2
 8005cb8:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 8005cba:	bf9d      	ittte	ls
 8005cbc:	189b      	addls	r3, r3, r2
 8005cbe:	6023      	strls	r3, [r4, #0]

  return p;
 8005cc0:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8005cc2:	2000      	movhi	r0, #0
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 8005cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	200012b0 	.word	0x200012b0
 8005cd4:	20001274 	.word	0x20001274
 8005cd8:	f3af 8000 	nop.w
 8005cdc:	f3af 8000 	nop.w

08005ce0 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8005ce0:	b410      	push	{r4}
 8005ce2:	2320      	movs	r3, #32
 8005ce4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8005ce8:	7f03      	ldrb	r3, [r0, #28]
 8005cea:	2b07      	cmp	r3, #7
 8005cec:	d80e      	bhi.n	8005d0c <wakeup+0x2c>
 8005cee:	e8df f003 	tbb	[pc, r3]
 8005cf2:	0d27      	.short	0x0d27
 8005cf4:	0408230d 	.word	0x0408230d
 8005cf8:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 8005cfa:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 8005cfc:	6893      	ldr	r3, [r2, #8]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8005d02:	e890 000c 	ldmia.w	r0, {r2, r3}
 8005d06:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8005d08:	6802      	ldr	r2, [r0, #0]
 8005d0a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8005d0c:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8005d10:	2200      	movs	r2, #0
 8005d12:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8005d14:	4b0d      	ldr	r3, [pc, #52]	; (8005d4c <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8005d16:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8005d18:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8005d1a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8005d1c:	689a      	ldr	r2, [r3, #8]
 8005d1e:	428a      	cmp	r2, r1
 8005d20:	d2fb      	bcs.n	8005d1a <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8005d26:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 8005d28:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 8005d2a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 8005d2c:	6058      	str	r0, [r3, #4]
 8005d2e:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8005d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d36:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8005d38:	6a03      	ldr	r3, [r0, #32]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	e7e5      	b.n	8005d0c <wakeup+0x2c>
 8005d40:	2300      	movs	r3, #0
 8005d42:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8005d46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	20001300 	.word	0x20001300

08005d50 <_idle_thread.lto_priv.48>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8005d50:	e7fe      	b.n	8005d50 <_idle_thread.lto_priv.48>
 8005d52:	bf00      	nop
 8005d54:	f3af 8000 	nop.w
 8005d58:	f3af 8000 	nop.w
 8005d5c:	f3af 8000 	nop.w

08005d60 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8005d60:	e7fe      	b.n	8005d60 <BusFault_Handler>
 8005d62:	bf00      	nop
 8005d64:	f3af 8000 	nop.w
 8005d68:	f3af 8000 	nop.w
 8005d6c:	f3af 8000 	nop.w

08005d70 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8005d70:	4a0d      	ldr	r2, [pc, #52]	; (8005da8 <chSchDoRescheduleAhead+0x38>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8005d72:	b4f0      	push	{r4, r5, r6, r7}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8005d74:	6810      	ldr	r0, [r2, #0]
  thread_t *otp, *cp;

  otp = currp;
 8005d76:	6994      	ldr	r4, [r2, #24]

  tqp->p_next = tp->p_next;
 8005d78:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8005d7a:	2701      	movs	r7, #1

  otp->p_state = CH_STATE_READY;
 8005d7c:	2600      	movs	r6, #0
 8005d7e:	68a1      	ldr	r1, [r4, #8]
 8005d80:	462b      	mov	r3, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 8005d82:	606a      	str	r2, [r5, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8005d84:	6015      	str	r5, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8005d86:	7707      	strb	r7, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8005d88:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 8005d8a:	7726      	strb	r6, [r4, #28]
 8005d8c:	e000      	b.n	8005d90 <chSchDoRescheduleAhead+0x20>
 8005d8e:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	428a      	cmp	r2, r1
 8005d94:	d8fb      	bhi.n	8005d8e <chSchDoRescheduleAhead+0x1e>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8005d96:	685a      	ldr	r2, [r3, #4]
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8005d98:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8005d9a:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
 8005d9c:	6062      	str	r2, [r4, #4]
  otp->p_prev->p_next = otp;
 8005d9e:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 8005da0:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 8005da2:	bcf0      	pop	{r4, r5, r6, r7}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8005da4:	f7ff ba3c 	b.w	8005220 <_port_switch>
 8005da8:	20001300 	.word	0x20001300
 8005dac:	f3af 8000 	nop.w

08005db0 <usb_packet_write_from_queue>:
 *                      not exceed the maximum packet size for this endpoint.
 *
 * @notapi
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
 8005db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8005db2:	6803      	ldr	r3, [r0, #0]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8005db4:	ea5f 0c52 	movs.w	ip, r2, lsr #1
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8005db8:	f103 5e00 	add.w	lr, r3, #536870912	; 0x20000000
 8005dbc:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000
 8005dc0:	ea4f 0e4e 	mov.w	lr, lr, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8005dc4:	6042      	str	r2, [r0, #4]
  nhw = n / 2;
  while (nhw > 0) {
 8005dc6:	d018      	beq.n	8005dfa <usb_packet_write_from_queue+0x4a>
 8005dc8:	4677      	mov	r7, lr
 8005dca:	4664      	mov	r4, ip
 8005dcc:	690e      	ldr	r6, [r1, #16]
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8005dce:	6988      	ldr	r0, [r1, #24]
 8005dd0:	1c43      	adds	r3, r0, #1
    if (oqp->q_rdptr >= oqp->q_top)
 8005dd2:	42b3      	cmp	r3, r6
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8005dd4:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8005dd6:	bf28      	it	cs
 8005dd8:	68cb      	ldrcs	r3, [r1, #12]
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8005dda:	7800      	ldrb	r0, [r0, #0]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8005ddc:	1c5d      	adds	r5, r3, #1
 8005dde:	618d      	str	r5, [r1, #24]
 8005de0:	781b      	ldrb	r3, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top)
 8005de2:	42b5      	cmp	r5, r6
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8005de4:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8005de8:	bf24      	itt	cs
 8005dea:	68c8      	ldrcs	r0, [r1, #12]
 8005dec:	6188      	strcs	r0, [r1, #24]
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8005dee:	3c01      	subs	r4, #1
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
 8005df0:	f847 3b04 	str.w	r3, [r7], #4
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8005df4:	d1eb      	bne.n	8005dce <usb_packet_write_from_queue+0x1e>
 8005df6:	eb0e 0e8c 	add.w	lr, lr, ip, lsl #2
    *pmap++ = w;
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 8005dfa:	07d3      	lsls	r3, r2, #31
 8005dfc:	d50b      	bpl.n	8005e16 <usb_packet_write_from_queue+0x66>
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8005dfe:	6988      	ldr	r0, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 8005e00:	690c      	ldr	r4, [r1, #16]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8005e02:	1c43      	adds	r3, r0, #1
 8005e04:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 8005e06:	42a3      	cmp	r3, r4
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8005e08:	7800      	ldrb	r0, [r0, #0]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8005e0a:	bf28      	it	cs
 8005e0c:	68cb      	ldrcs	r3, [r1, #12]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8005e0e:	f8ce 0000 	str.w	r0, [lr]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8005e12:	bf28      	it	cs
 8005e14:	618b      	strcs	r3, [r1, #24]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e16:	f3ef 8311 	mrs	r3, BASEPRI
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 8005e1a:	b9eb      	cbnz	r3, 8005e58 <usb_packet_write_from_queue+0xa8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e1c:	f3ef 8305 	mrs	r3, IPSR

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005e20:	2320      	movs	r3, #32
 8005e22:	f383 8811 	msr	BASEPRI, r3
  }

  /* Updating queue.*/
  sts = osalSysGetStatusAndLockX();

  oqp->q_counter += n;
 8005e26:	688b      	ldr	r3, [r1, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8005e28:	4608      	mov	r0, r1
 8005e2a:	441a      	add	r2, r3
 8005e2c:	608a      	str	r2, [r1, #8]
 8005e2e:	f002 fe37 	bl	8008aa0 <chThdDequeueAllI.constprop.19>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e32:	f3ef 8305 	mrs	r3, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8005e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8005e3a:	b11b      	cbz	r3, 8005e44 <usb_packet_write_from_queue+0x94>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8005e44:	4b08      	ldr	r3, [pc, #32]	; (8005e68 <usb_packet_write_from_queue+0xb8>)
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 8005e4a:	6892      	ldr	r2, [r2, #8]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d9f4      	bls.n	8005e3c <usb_packet_write_from_queue+0x8c>
    chSchDoRescheduleAhead();
 8005e52:	f7ff ff8d 	bl	8005d70 <chSchDoRescheduleAhead>
 8005e56:	e7f1      	b.n	8005e3c <usb_packet_write_from_queue+0x8c>
 8005e58:	688b      	ldr	r3, [r1, #8]
 8005e5a:	4608      	mov	r0, r1
 8005e5c:	441a      	add	r2, r3
 8005e5e:	608a      	str	r2, [r1, #8]
  osalThreadDequeueAllI(&oqp->q_waiting, Q_OK);

  osalSysRestoreStatusX(sts);
}
 8005e60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005e64:	f002 be1c 	b.w	8008aa0 <chThdDequeueAllI.constprop.19>
 8005e68:	20001300 	.word	0x20001300
 8005e6c:	f3af 8000 	nop.w

08005e70 <usb_lld_prepare_transmit>:
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8005e70:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8005e74:	68c3      	ldr	r3, [r0, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 8005e76:	b410      	push	{r4}
 8005e78:	460c      	mov	r4, r1
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8005e7a:	6959      	ldr	r1, [r3, #20]

  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 8005e7c:	8a1a      	ldrh	r2, [r3, #16]
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  /* Transfer initialization.*/
  n = isp->txsize;
 8005e7e:	684b      	ldr	r3, [r1, #4]
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
 8005e80:	7808      	ldrb	r0, [r1, #0]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	bf28      	it	cs
 8005e86:	461a      	movcs	r2, r3
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8005e88:	68c9      	ldr	r1, [r1, #12]
 8005e8a:	4b0d      	ldr	r3, [pc, #52]	; (8005ec0 <usb_lld_prepare_transmit+0x50>)
  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
 8005e8c:	b958      	cbnz	r0, 8005ea6 <usb_lld_prepare_transmit+0x36>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8005e8e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005e90:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8005e94:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8005e98:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005e9c:	0040      	lsls	r0, r0, #1
                                 isp->mode.linear.txbuf, n);
}
 8005e9e:	f85d 4b04 	ldr.w	r4, [sp], #4

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8005ea2:	f7ff be2d 	b.w	8005b00 <usb_packet_write_from_buffer>
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8005ea6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005ea8:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8005eac:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8005eb0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005eb4:	0040      	lsls	r0, r0, #1
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 8005eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8005eba:	f7ff bf79 	b.w	8005db0 <usb_packet_write_from_queue>
 8005ebe:	bf00      	nop
 8005ec0:	40005c00 	.word	0x40005c00
 8005ec4:	f3af 8000 	nop.w
 8005ec8:	f3af 8000 	nop.w
 8005ecc:	f3af 8000 	nop.w

08005ed0 <Vector90>:
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8005ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  OSAL_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 8005ed4:	4bb5      	ldr	r3, [pc, #724]	; (80061ac <Vector90+0x2dc>)
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8005ed6:	b085      	sub	sp, #20
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  OSAL_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 8005ed8:	6c5c      	ldr	r4, [r3, #68]	; 0x44

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
 8005eda:	0567      	lsls	r7, r4, #21
 8005edc:	f100 8181 	bmi.w	80061e2 <Vector90+0x312>

    _usb_reset(usbp);
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
 8005ee0:	0526      	lsls	r6, r4, #20
 8005ee2:	f100 8167 	bmi.w	80061b4 <Vector90+0x2e4>

    _usb_suspend(usbp);
  }

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
 8005ee6:	04e5      	lsls	r5, r4, #19
 8005ee8:	d508      	bpl.n	8005efc <Vector90+0x2c>
    uint32_t fnr = STM32_USB->FNR;
 8005eea:	4bb0      	ldr	r3, [pc, #704]	; (80061ac <Vector90+0x2dc>)
 8005eec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 8005eee:	0410      	lsls	r0, r2, #16
 8005ef0:	f140 817d 	bpl.w	80061ee <Vector90+0x31e>
      /* Just noise, going back in SUSPEND mode, reference manual 22.4.5,
         table 169.*/
      STM32_USB->CNTR |= CNTR_LP_MODE;
    }
#endif
    STM32_USB->ISTR = ~ISTR_WKUP;
 8005ef4:	4bad      	ldr	r3, [pc, #692]	; (80061ac <Vector90+0x2dc>)
 8005ef6:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 8005efa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* SOF handling.*/
  if (istr & ISTR_SOF) {
 8005efc:	05a1      	lsls	r1, r4, #22
 8005efe:	d50b      	bpl.n	8005f18 <Vector90+0x48>
    _usb_isr_invoke_sof_cb(usbp);
 8005f00:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80061b0 <Vector90+0x2e0>
 8005f04:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	b10b      	cbz	r3, 8005f10 <Vector90+0x40>
 8005f0c:	4658      	mov	r0, fp
 8005f0e:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 8005f10:	4ba6      	ldr	r3, [pc, #664]	; (80061ac <Vector90+0x2dc>)
 8005f12:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005f16:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 8005f18:	0422      	lsls	r2, r4, #16
 8005f1a:	f140 80bf 	bpl.w	800609c <Vector90+0x1cc>
 8005f1e:	f8df b290 	ldr.w	fp, [pc, #656]	; 80061b0 <Vector90+0x2e0>
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8005f22:	f8df a288 	ldr.w	sl, [pc, #648]	; 80061ac <Vector90+0x2dc>

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
 8005f26:	f004 040f 	and.w	r4, r4, #15
 8005f2a:	00a6      	lsls	r6, r4, #2
 8005f2c:	f106 4580 	add.w	r5, r6, #1073741824	; 0x40000000
 8005f30:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 8005f34:	682f      	ldr	r7, [r5, #0]
    const USBEndpointConfig *epcp = usbp->epc[ep];
 8005f36:	f104 0802 	add.w	r8, r4, #2
 8005f3a:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8005f3e:	f8d3 9004 	ldr.w	r9, [r3, #4]

    if (epr & EPR_CTR_TX) {
 8005f42:	063b      	lsls	r3, r7, #24
 8005f44:	d546      	bpl.n	8005fd4 <Vector90+0x104>
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 8005f46:	682b      	ldr	r3, [r5, #0]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8005f48:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
    const USBEndpointConfig *epcp = usbp->epc[ep];

    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 8005f4c:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8005f50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f58:	602b      	str	r3, [r5, #0]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8005f5a:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
      epcp->in_state->txcnt  += transmitted;
 8005f5e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8005f62:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005f66:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8005f6a:	4473      	add	r3, lr
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	f8d3 c004 	ldr.w	ip, [r3, #4]
      epcp->in_state->txcnt  += transmitted;
 8005f72:	6883      	ldr	r3, [r0, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
 8005f74:	6842      	ldr	r2, [r0, #4]
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
      epcp->in_state->txcnt  += transmitted;
 8005f76:	4463      	add	r3, ip
 8005f78:	6083      	str	r3, [r0, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
      if (n > 0) {
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	f000 80b2 	beq.w	80060e4 <Vector90+0x214>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
 8005f80:	f8b9 2010 	ldrh.w	r2, [r9, #16]
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
 8005f84:	7801      	ldrb	r1, [r0, #0]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	bf28      	it	cs
 8005f8a:	461a      	movcs	r2, r3
 8005f8c:	2900      	cmp	r1, #0
 8005f8e:	f000 809b 	beq.w	80060c8 <Vector90+0x1f8>
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8005f92:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8005f96:	68c1      	ldr	r1, [r0, #12]
 8005f98:	f103 5000 	add.w	r0, r3, #536870912	; 0x20000000
 8005f9c:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8005fa0:	4470      	add	r0, lr
 8005fa2:	0040      	lsls	r0, r0, #1
 8005fa4:	f7ff ff04 	bl	8005db0 <usb_packet_write_from_queue>
 8005fa8:	2320      	movs	r3, #32
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8005fb2:	f506 46b8 	add.w	r6, r6, #23552	; 0x5c00
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8005fb6:	6833      	ldr	r3, [r6, #0]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8005fbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8005fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fce:	6033      	str	r3, [r6, #0]
 8005fd0:	f382 8811 	msr	BASEPRI, r2
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
 8005fd4:	043e      	lsls	r6, r7, #16
 8005fd6:	d55c      	bpl.n	8006092 <Vector90+0x1c2>
      EPR_CLEAR_CTR_RX(ep);
 8005fd8:	682b      	ldr	r3, [r5, #0]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 8005fda:	0538      	lsls	r0, r7, #20
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
      EPR_CLEAR_CTR_RX(ep);
 8005fdc:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8005fe0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe8:	602b      	str	r3, [r5, #0]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 8005fea:	f100 8089 	bmi.w	8006100 <Vector90+0x230>
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8005fee:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 8005ff2:	f8d9 e018 	ldr.w	lr, [r9, #24]
 8005ff6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005ffa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8005ffe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006002:	005b      	lsls	r3, r3, #1
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8006004:	68da      	ldr	r2, [r3, #12]

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 8006006:	f89e 1000 	ldrb.w	r1, [lr]
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 800600a:	9201      	str	r2, [sp, #4]
 800600c:	f3c2 0609 	ubfx	r6, r2, #0, #10

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 8006010:	2900      	cmp	r1, #0
 8006012:	d17e      	bne.n	8006112 <Vector90+0x242>
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap;
  uint32_t w;
  size_t i;

  pmap = USB_ADDR2PTR(udp->RXADDR0);
 8006014:	6898      	ldr	r0, [r3, #8]
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
                                   epcp->out_state->mode.queue.rxqueue,
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
 8006016:	f8de 700c 	ldr.w	r7, [lr, #12]
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap;
  uint32_t w;
  size_t i;

  pmap = USB_ADDR2PTR(udp->RXADDR0);
 800601a:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800601e:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8006022:	0040      	lsls	r0, r0, #1

  i = 0;
  w = 0; /* Useless but silences a warning.*/
  while (i < n) {
 8006024:	b18e      	cbz	r6, 800604a <Vector90+0x17a>
 8006026:	463b      	mov	r3, r7
 8006028:	eb07 0e06 	add.w	lr, r7, r6
 800602c:	1bda      	subs	r2, r3, r7
    if ((i & 1) == 0){
 800602e:	07d2      	lsls	r2, r2, #31
      w = *pmap;
 8006030:	bf55      	itete	pl
 8006032:	f850 1b04 	ldrpl.w	r1, [r0], #4
      *buf = (uint8_t)w;
      pmap++;
    }
    else {
      *buf = (uint8_t)(w >> 8);
 8006036:	0a0a      	lsrmi	r2, r1, #8
  i = 0;
  w = 0; /* Useless but silences a warning.*/
  while (i < n) {
    if ((i & 1) == 0){
      w = *pmap;
      *buf = (uint8_t)w;
 8006038:	7019      	strbpl	r1, [r3, #0]
      pmap++;
    }
    else {
      *buf = (uint8_t)(w >> 8);
 800603a:	701a      	strbmi	r2, [r3, #0]
    }
    i++;
    buf++;
 800603c:	3301      	adds	r3, #1

  pmap = USB_ADDR2PTR(udp->RXADDR0);

  i = 0;
  w = 0; /* Useless but silences a warning.*/
  while (i < n) {
 800603e:	4573      	cmp	r3, lr
 8006040:	d1f4      	bne.n	800602c <Vector90+0x15c>
 8006042:	f8d9 e018 	ldr.w	lr, [r9, #24]
 8006046:	f8de 700c 	ldr.w	r7, [lr, #12]
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
 800604a:	4437      	add	r7, r6
 800604c:	f8ce 700c 	str.w	r7, [lr, #12]
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 8006050:	f8be 1010 	ldrh.w	r1, [lr, #16]

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8006054:	f8b9 0012 	ldrh.w	r0, [r9, #18]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8006058:	f8de 2008 	ldr.w	r2, [lr, #8]
        epcp->out_state->rxsize             -= n;
 800605c:	f8de 3004 	ldr.w	r3, [lr, #4]
        epcp->out_state->rxpkts             -= 1;
 8006060:	3901      	subs	r1, #1
 8006062:	b289      	uxth	r1, r1
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8006064:	4432      	add	r2, r6
        epcp->out_state->rxsize             -= n;
 8006066:	1b9b      	subs	r3, r3, r6
        epcp->out_state->rxpkts             -= 1;

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8006068:	4286      	cmp	r6, r0
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 800606a:	f8ae 1010 	strh.w	r1, [lr, #16]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 800606e:	f8ce 2008 	str.w	r2, [lr, #8]
        epcp->out_state->rxsize             -= n;
 8006072:	f8ce 3004 	str.w	r3, [lr, #4]
        epcp->out_state->rxpkts             -= 1;

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8006076:	d316      	bcc.n	80060a6 <Vector90+0x1d6>
 8006078:	b1a9      	cbz	r1, 80060a6 <Vector90+0x1d6>
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
        }
        else {
          /* Transfer not complete, there are more packets to receive.*/
          EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 800607a:	682b      	ldr	r3, [r5, #0]
 800607c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006084:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800608c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006090:	602b      	str	r3, [r5, #0]
        }
      }
    }
    istr = STM32_USB->ISTR;
 8006092:	f8da 4044 	ldr.w	r4, [sl, #68]	; 0x44
    _usb_isr_invoke_sof_cb(usbp);
    STM32_USB->ISTR = ~ISTR_SOF;
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 8006096:	0423      	lsls	r3, r4, #16
 8006098:	f53f af45 	bmi.w	8005f26 <Vector90+0x56>
    }
    istr = STM32_USB->ISTR;
  }

  OSAL_IRQ_EPILOGUE();
}
 800609c:	b005      	add	sp, #20
 800609e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      }
    }
    istr = STM32_USB->ISTR;
  }

  OSAL_IRQ_EPILOGUE();
 80060a2:	f7ff bd65 	b.w	8005b70 <_port_irq_epilogue>

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
 80060a6:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 80060aa:	eb0b 0888 	add.w	r8, fp, r8, lsl #2
 80060ae:	2101      	movs	r1, #1
 80060b0:	40a1      	lsls	r1, r4
 80060b2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80060b6:	ea23 0301 	bic.w	r3, r3, r1
 80060ba:	68d2      	ldr	r2, [r2, #12]
 80060bc:	f8ab 300a 	strh.w	r3, [fp, #10]
 80060c0:	4621      	mov	r1, r4
 80060c2:	483b      	ldr	r0, [pc, #236]	; (80061b0 <Vector90+0x2e0>)
 80060c4:	4790      	blx	r2
 80060c6:	e7e4      	b.n	8006092 <Vector90+0x1c2>
        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
 80060c8:	68c1      	ldr	r1, [r0, #12]
 80060ca:	4461      	add	r1, ip
 80060cc:	60c1      	str	r1, [r0, #12]
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80060ce:	f8da 0050 	ldr.w	r0, [sl, #80]	; 0x50
 80060d2:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 80060d6:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 80060da:	4470      	add	r0, lr
 80060dc:	0040      	lsls	r0, r0, #1
 80060de:	f7ff fd0f 	bl	8005b00 <usb_packet_write_from_buffer>
 80060e2:	e761      	b.n	8005fa8 <Vector90+0xd8>
        usb_lld_start_in(usbp, ep);
        osalSysUnlockFromISR();
      }
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
 80060e4:	4b32      	ldr	r3, [pc, #200]	; (80061b0 <Vector90+0x2e0>)
 80060e6:	2201      	movs	r2, #1
 80060e8:	891b      	ldrh	r3, [r3, #8]
 80060ea:	40a2      	lsls	r2, r4
 80060ec:	ea23 0302 	bic.w	r3, r3, r2
 80060f0:	4a2f      	ldr	r2, [pc, #188]	; (80061b0 <Vector90+0x2e0>)
 80060f2:	4621      	mov	r1, r4
 80060f4:	8113      	strh	r3, [r2, #8]
 80060f6:	4610      	mov	r0, r2
 80060f8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80060fc:	4798      	blx	r3
 80060fe:	e769      	b.n	8005fd4 <Vector90+0x104>
      EPR_CLEAR_CTR_RX(ep);
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
 8006100:	eb0b 0888 	add.w	r8, fp, r8, lsl #2
 8006104:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006108:	4621      	mov	r1, r4
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	4828      	ldr	r0, [pc, #160]	; (80061b0 <Vector90+0x2e0>)
 800610e:	4798      	blx	r3
 8006110:	e7bf      	b.n	8006092 <Vector90+0x1c2>
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8006112:	689a      	ldr	r2, [r3, #8]

  nhw = n / 2;
  while (nhw > 0) {
 8006114:	0871      	lsrs	r1, r6, #1
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8006116:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 800611a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800611e:	ea4f 0242 	mov.w	r2, r2, lsl #1
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
 8006122:	f8de 300c 	ldr.w	r3, [lr, #12]
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8006126:	9202      	str	r2, [sp, #8]

  nhw = n / 2;
  while (nhw > 0) {
 8006128:	9103      	str	r1, [sp, #12]
 800612a:	d021      	beq.n	8006170 <Vector90+0x2a0>
 800612c:	4608      	mov	r0, r1
 800612e:	4617      	mov	r7, r2
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8006130:	695a      	ldr	r2, [r3, #20]

  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
 8006132:	f857 1b04 	ldr.w	r1, [r7], #4
    *iqp->q_wrptr++ = (uint8_t)w;
 8006136:	f102 0c01 	add.w	ip, r2, #1
 800613a:	f8c3 c014 	str.w	ip, [r3, #20]
 800613e:	7011      	strb	r1, [r2, #0]
    if (iqp->q_wrptr >= iqp->q_top)
 8006140:	691a      	ldr	r2, [r3, #16]
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8006142:	ea4f 2e11 	mov.w	lr, r1, lsr #8
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
 8006146:	6959      	ldr	r1, [r3, #20]
 8006148:	4291      	cmp	r1, r2
      iqp->q_wrptr = iqp->q_buffer;
 800614a:	bf28      	it	cs
 800614c:	68d9      	ldrcs	r1, [r3, #12]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 800614e:	1c4a      	adds	r2, r1, #1
 8006150:	615a      	str	r2, [r3, #20]
 8006152:	f881 e000 	strb.w	lr, [r1]
    if (iqp->q_wrptr >= iqp->q_top)
 8006156:	691a      	ldr	r2, [r3, #16]
 8006158:	6959      	ldr	r1, [r3, #20]
 800615a:	4291      	cmp	r1, r2
      iqp->q_wrptr = iqp->q_buffer;
 800615c:	bf24      	itt	cs
 800615e:	68da      	ldrcs	r2, [r3, #12]
 8006160:	615a      	strcs	r2, [r3, #20]
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  nhw = n / 2;
  while (nhw > 0) {
 8006162:	3801      	subs	r0, #1
 8006164:	d1e4      	bne.n	8006130 <Vector90+0x260>
 8006166:	9a02      	ldr	r2, [sp, #8]
 8006168:	9903      	ldr	r1, [sp, #12]
 800616a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800616e:	9202      	str	r2, [sp, #8]
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    nhw--;
  }
  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 8006170:	9a01      	ldr	r2, [sp, #4]
 8006172:	07d1      	lsls	r1, r2, #31
 8006174:	d50b      	bpl.n	800618e <Vector90+0x2be>
    *iqp->q_wrptr++ = (uint8_t)*pmap;
 8006176:	9902      	ldr	r1, [sp, #8]
 8006178:	695a      	ldr	r2, [r3, #20]
 800617a:	6809      	ldr	r1, [r1, #0]
 800617c:	1c50      	adds	r0, r2, #1
 800617e:	6158      	str	r0, [r3, #20]
 8006180:	7011      	strb	r1, [r2, #0]
    if (iqp->q_wrptr >= iqp->q_top)
 8006182:	691a      	ldr	r2, [r3, #16]
 8006184:	6959      	ldr	r1, [r3, #20]
 8006186:	4291      	cmp	r1, r2
      iqp->q_wrptr = iqp->q_buffer;
 8006188:	bf24      	itt	cs
 800618a:	68da      	ldrcs	r2, [r3, #12]
 800618c:	615a      	strcs	r2, [r3, #20]
 800618e:	2220      	movs	r2, #32
 8006190:	f382 8811 	msr	BASEPRI, r2
  }

  /* Updating queue.*/
  osalSysLockFromISR();

  iqp->q_counter += n;
 8006194:	689a      	ldr	r2, [r3, #8]
 8006196:	4618      	mov	r0, r3
 8006198:	4432      	add	r2, r6
 800619a:	609a      	str	r2, [r3, #8]
 800619c:	f002 fc80 	bl	8008aa0 <chThdDequeueAllI.constprop.19>
 80061a0:	2300      	movs	r3, #0
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f8d9 e018 	ldr.w	lr, [r9, #24]
 80061aa:	e751      	b.n	8006050 <Vector90+0x180>
 80061ac:	40005c00 	.word	0x40005c00
 80061b0:	20001454 	.word	0x20001454
 * @notapi
 */
void _usb_suspend(USBDriver *usbp) {

  /* State transition.*/
  usbp->state         = USB_SUSPENDED;
 80061b4:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006218 <Vector90+0x348>
    _usb_reset(usbp);
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 80061b8:	4b16      	ldr	r3, [pc, #88]	; (8006214 <Vector90+0x344>)

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80061ba:	f8db 1004 	ldr.w	r1, [fp, #4]
 80061be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061c0:	680d      	ldr	r5, [r1, #0]
 80061c2:	f042 0208 	orr.w	r2, r2, #8
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 80061c6:	f46f 6000 	mvn.w	r0, #2048	; 0x800
 * @notapi
 */
void _usb_suspend(USBDriver *usbp) {

  /* State transition.*/
  usbp->state         = USB_SUSPENDED;
 80061ca:	2105      	movs	r1, #5
    _usb_reset(usbp);
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 80061cc:	641a      	str	r2, [r3, #64]	; 0x40
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 80061ce:	6458      	str	r0, [r3, #68]	; 0x44
 80061d0:	f88b 1000 	strb.w	r1, [fp]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80061d4:	2d00      	cmp	r5, #0
 80061d6:	f43f ae86 	beq.w	8005ee6 <Vector90+0x16>
 80061da:	4658      	mov	r0, fp
 80061dc:	2103      	movs	r1, #3
 80061de:	47a8      	blx	r5
 80061e0:	e681      	b.n	8005ee6 <Vector90+0x16>

  istr = STM32_USB->ISTR;

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
    STM32_USB->ISTR = ~ISTR_RESET;
 80061e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061e6:	645a      	str	r2, [r3, #68]	; 0x44

    _usb_reset(usbp);
 80061e8:	f002 fc7a 	bl	8008ae0 <_usb_reset.constprop.15>
 80061ec:	e678      	b.n	8005ee0 <Vector90+0x10>
 * @notapi
 */
void _usb_wakeup(USBDriver *usbp) {

  /* State transition.*/
  usbp->state         = USB_ACTIVE;
 80061ee:	f8df b028 	ldr.w	fp, [pc, #40]	; 8006218 <Vector90+0x348>

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 80061f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80061f4:	f8db 1004 	ldr.w	r1, [fp, #4]
 80061f8:	f022 0208 	bic.w	r2, r2, #8
 80061fc:	680d      	ldr	r5, [r1, #0]
 * @notapi
 */
void _usb_wakeup(USBDriver *usbp) {

  /* State transition.*/
  usbp->state         = USB_ACTIVE;
 80061fe:	2104      	movs	r1, #4
 8006200:	641a      	str	r2, [r3, #64]	; 0x40
 8006202:	f88b 1000 	strb.w	r1, [fp]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8006206:	2d00      	cmp	r5, #0
 8006208:	f43f ae74 	beq.w	8005ef4 <Vector90+0x24>
 800620c:	4658      	mov	r0, fp
 800620e:	47a8      	blx	r5
 8006210:	e670      	b.n	8005ef4 <Vector90+0x24>
 8006212:	bf00      	nop
 8006214:	40005c00 	.word	0x40005c00
 8006218:	20001454 	.word	0x20001454
 800621c:	f3af 8000 	nop.w

08006220 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8006220:	4b07      	ldr	r3, [pc, #28]	; (8006240 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8006222:	b430      	push	{r4, r5}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8006224:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8006226:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 8006228:	6814      	ldr	r4, [r2, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800622a:	2501      	movs	r5, #1
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 800622c:	7708      	strb	r0, [r1, #28]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800622e:	6063      	str	r3, [r4, #4]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8006230:	7715      	strb	r5, [r2, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8006232:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 8006234:	4610      	mov	r0, r2
}
 8006236:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8006238:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800623a:	f7fe bff1 	b.w	8005220 <_port_switch>
 800623e:	bf00      	nop
 8006240:	20001300 	.word	0x20001300
 8006244:	f3af 8000 	nop.w
 8006248:	f3af 8000 	nop.w
 800624c:	f3af 8000 	nop.w

08006250 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8006250:	4b1f      	ldr	r3, [pc, #124]	; (80062d0 <__early_init+0x80>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8006252:	4619      	mov	r1, r3
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	f042 0201 	orr.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800625c:	680b      	ldr	r3, [r1, #0]
 800625e:	4a1c      	ldr	r2, [pc, #112]	; (80062d0 <__early_init+0x80>)
 8006260:	079b      	lsls	r3, r3, #30
 8006262:	d5fb      	bpl.n	800625c <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8006264:	4611      	mov	r1, r2
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8006266:	6813      	ldr	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8006268:	2000      	movs	r0, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800626a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 800626e:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8006270:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8006272:	684b      	ldr	r3, [r1, #4]
 8006274:	4a16      	ldr	r2, [pc, #88]	; (80062d0 <__early_init+0x80>)
 8006276:	f013 0f0c 	tst.w	r3, #12
 800627a:	d1fa      	bne.n	8006272 <__early_init+0x22>
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
  while (!(RCC->CR & RCC_CR_HSERDY))
 800627c:	4611      	mov	r1, r2
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 800627e:	6813      	ldr	r3, [r2, #0]
 8006280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006284:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8006286:	680b      	ldr	r3, [r1, #0]
 8006288:	4a11      	ldr	r2, [pc, #68]	; (80062d0 <__early_init+0x80>)
 800628a:	0398      	lsls	r0, r3, #14
 800628c:	d5fb      	bpl.n	8006286 <__early_init+0x36>

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800628e:	4611      	mov	r1, r2
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8006290:	6853      	ldr	r3, [r2, #4]
 8006292:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8006296:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8006298:	6813      	ldr	r3, [r2, #0]
 800629a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800629e:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80062a0:	680b      	ldr	r3, [r1, #0]
 80062a2:	4a0b      	ldr	r2, [pc, #44]	; (80062d0 <__early_init+0x80>)
 80062a4:	019b      	lsls	r3, r3, #6
 80062a6:	d5fb      	bpl.n	80062a0 <__early_init+0x50>

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80062a8:	4611      	mov	r1, r2
/*
 * Early initialization code.
 * This initialization must be performed just after stack setup and before
 * any other initialization.
 */
void __early_init(void) {
 80062aa:	b410      	push	{r4}
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80062ac:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <__early_init+0x84>)
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 80062ae:	4c0a      	ldr	r4, [pc, #40]	; (80062d8 <__early_init+0x88>)
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80062b0:	2012      	movs	r0, #18
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 80062b2:	6054      	str	r4, [r2, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80062b4:	6018      	str	r0, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 80062b6:	6853      	ldr	r3, [r2, #4]
 80062b8:	f043 0302 	orr.w	r3, r3, #2
 80062bc:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80062be:	684b      	ldr	r3, [r1, #4]
 80062c0:	f003 030c 	and.w	r3, r3, #12
 80062c4:	2b08      	cmp	r3, #8
 80062c6:	d1fa      	bne.n	80062be <__early_init+0x6e>

  stm32_clock_init();
}
 80062c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40021000 	.word	0x40021000
 80062d4:	40022000 	.word	0x40022000
 80062d8:	001d6400 	.word	0x001d6400
 80062dc:	f3af 8000 	nop.w

080062e0 <usb_lld_init_endpoint>:
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80062e0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 80062e4:	b470      	push	{r4, r5, r6}
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80062e6:	68dc      	ldr	r4, [r3, #12]

  /* Setting the endpoint type.*/
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	3b01      	subs	r3, #1
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	bf96      	itet	ls
 80062f4:	4a31      	ldrls	r2, [pc, #196]	; (80063bc <usb_lld_init_endpoint+0xdc>)
 80062f6:	f44f 7600 	movhi.w	r6, #512	; 0x200
 80062fa:	f832 6013 	ldrhls.w	r6, [r2, r3, lsl #1]
  default:
    epr = EPR_EP_TYPE_CONTROL;
  }

  /* IN endpoint initially in NAK mode.*/
  if (epcp->in_cb != NULL)
 80062fe:	68a3      	ldr	r3, [r4, #8]
 8006300:	b10b      	cbz	r3, 8006306 <usb_lld_init_endpoint+0x26>
    epr |= EPR_STAT_TX_NAK;
 8006302:	f046 0620 	orr.w	r6, r6, #32

  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
 8006306:	68e3      	ldr	r3, [r4, #12]
 8006308:	b10b      	cbz	r3, 800630e <usb_lld_init_endpoint+0x2e>
    epr |= EPR_STAT_RX_NAK;
 800630a:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 800630e:	f647 0570 	movw	r5, #30832	; 0x7870
  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
 8006312:	ea46 0201 	orr.w	r2, r6, r1
 8006316:	f422 4278 	bic.w	r2, r2, #63488	; 0xf800
 800631a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800631e:	008b      	lsls	r3, r1, #2
 8006320:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006324:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006328:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800632c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006330:	601a      	str	r2, [r3, #0]
  EPR_TOGGLE(ep, epr);
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	4035      	ands	r5, r6
 8006336:	4055      	eors	r5, r2

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 8006338:	8a62      	ldrh	r2, [r4, #18]
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 800633a:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 800633e:	f045 0580 	orr.w	r5, r5, #128	; 0x80

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 8006342:	2a3e      	cmp	r2, #62	; 0x3e
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 8006344:	601d      	str	r5, [r3, #0]

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8006346:	f102 33ff 	add.w	r3, r2, #4294967295
  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 800634a:	d82c      	bhi.n	80063a6 <usb_lld_init_endpoint+0xc6>
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
 800634c:	f043 0301 	orr.w	r3, r3, #1
 8006350:	3301      	adds	r3, #1
 8006352:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8006356:	025b      	lsls	r3, r3, #9
 8006358:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
  dp = USB_GET_DESCRIPTOR(ep);
 800635c:	4d18      	ldr	r5, [pc, #96]	; (80063c0 <usb_lld_init_endpoint+0xe0>)
  dp->TXCOUNT0 = 0;
 800635e:	2600      	movs	r6, #0
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 8006360:	6d2d      	ldr	r5, [r5, #80]	; 0x50
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8006362:	8a24      	ldrh	r4, [r4, #16]
 8006364:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
 8006368:	f505 5540 	add.w	r5, r5, #12288	; 0x3000
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 800636c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8006370:	0049      	lsls	r1, r1, #1
  dp->TXCOUNT0 = 0;
 8006372:	684d      	ldr	r5, [r1, #4]
 8006374:	604e      	str	r6, [r1, #4]
  dp->RXCOUNT0 = nblocks;
 8006376:	68cd      	ldr	r5, [r1, #12]
 8006378:	60cb      	str	r3, [r1, #12]
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += (size + 1) & ~1;
 800637a:	1c63      	adds	r3, r4, #1
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 800637c:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
  usbp->pmnext += (size + 1) & ~1;
 8006380:	f023 0301 	bic.w	r3, r3, #1
 8006384:	4423      	add	r3, r4
 8006386:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 800638a:	680b      	ldr	r3, [r1, #0]
 800638c:	600c      	str	r4, [r1, #0]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 800638e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
  usbp->pmnext += (size + 1) & ~1;
 8006392:	3201      	adds	r2, #1
 8006394:	f022 0201 	bic.w	r2, r2, #1
 8006398:	441a      	add	r2, r3
 800639a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 800639e:	688a      	ldr	r2, [r1, #8]
}
 80063a0:	bc70      	pop	{r4, r5, r6}
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 80063a2:	608b      	str	r3, [r1, #8]
}
 80063a4:	4770      	bx	lr
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 80063a6:	f043 031f 	orr.w	r3, r3, #31
 80063aa:	3301      	adds	r3, #1
 80063ac:	115b      	asrs	r3, r3, #5
 80063ae:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 80063b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	e7d0      	b.n	800635c <usb_lld_init_endpoint+0x7c>
 80063ba:	bf00      	nop
 80063bc:	08009440 	.word	0x08009440
 80063c0:	40005c00 	.word	0x40005c00
 80063c4:	f3af 8000 	nop.w
 80063c8:	f3af 8000 	nop.w
 80063cc:	f3af 8000 	nop.w

080063d0 <usbStartTransmitI>:
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 80063d0:	2201      	movs	r2, #1
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {
 80063d2:	b430      	push	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 80063d4:	fa02 f301 	lsl.w	r3, r2, r1
 80063d8:	8904      	ldrh	r4, [r0, #8]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	ea13 0504 	ands.w	r5, r3, r4
 80063e0:	d002      	beq.n	80063e8 <usbStartTransmitI+0x18>
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_in(usbp, ep);
  return false;
}
 80063e2:	bc30      	pop	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
    return true;
 80063e4:	4610      	mov	r0, r2
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_in(usbp, ep);
  return false;
}
 80063e6:	4770      	bx	lr
 80063e8:	0089      	lsls	r1, r1, #2
 80063ea:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80063ee:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 80063f2:	680a      	ldr	r2, [r1, #0]

  if (usbGetTransmitStatusI(usbp, ep)) {
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80063f4:	4323      	orrs	r3, r4
 80063f6:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80063fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063fe:	f082 0230 	eor.w	r2, r2, #48	; 0x30
 8006402:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006406:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800640a:	8103      	strh	r3, [r0, #8]
  usb_lld_start_in(usbp, ep);
  return false;
 800640c:	4628      	mov	r0, r5
}
 800640e:	bc30      	pop	{r4, r5}
 8006410:	600a      	str	r2, [r1, #0]
 8006412:	4770      	bx	lr
 8006414:	f3af 8000 	nop.w
 8006418:	f3af 8000 	nop.w
 800641c:	f3af 8000 	nop.w

08006420 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 8006420:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	2a06      	cmp	r2, #6
 8006428:	d80a      	bhi.n	8006440 <_usb_ep0out+0x20>
 800642a:	2301      	movs	r3, #1
 800642c:	4093      	lsls	r3, r2
 800642e:	f013 0f67 	tst.w	r3, #103	; 0x67
 8006432:	4604      	mov	r4, r0
 8006434:	d111      	bne.n	800645a <_usb_ep0out+0x3a>
 8006436:	f013 0508 	ands.w	r5, r3, #8
 800643a:	d102      	bne.n	8006442 <_usb_ep0out+0x22>
 800643c:	06db      	lsls	r3, r3, #27
 800643e:	d42e      	bmi.n	800649e <_usb_ep0out+0x7e>
 8006440:	bd38      	pop	{r3, r4, r5, pc}
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0U) {
 8006442:	68c3      	ldr	r3, [r0, #12]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1f9      	bne.n	8006440 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800644c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800644e:	b103      	cbz	r3, 8006452 <_usb_ep0out+0x32>
      usbp->ep0endcb(usbp);
 8006450:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8006452:	2300      	movs	r3, #0
 8006454:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8006458:	bd38      	pop	{r3, r4, r5, pc}
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 800645a:	4a1c      	ldr	r2, [pc, #112]	; (80064cc <_usb_ep0out+0xac>)
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800645c:	6841      	ldr	r1, [r0, #4]
 800645e:	6813      	ldr	r3, [r2, #0]
 8006460:	680d      	ldr	r5, [r1, #0]
 8006462:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8006466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800646a:	f083 0310 	eor.w	r3, r3, #16
 800646e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006476:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8006478:	6813      	ldr	r3, [r2, #0]
 800647a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800647e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006482:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800648a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	b10d      	cbz	r5, 8006496 <_usb_ep0out+0x76>
 8006492:	2105      	movs	r1, #5
 8006494:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8006496:	2306      	movs	r3, #6
 8006498:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800649c:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800649e:	68c3      	ldr	r3, [r0, #12]

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 80064a0:	2205      	movs	r2, #5
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80064a2:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 80064a4:	4629      	mov	r1, r5

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 80064a6:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 80064aa:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 80064ac:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 80064ae:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 80064b0:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 80064b2:	f7ff fcdd 	bl	8005e70 <usb_lld_prepare_transmit>
 80064b6:	2320      	movs	r3, #32
 80064b8:	f383 8811 	msr	BASEPRI, r3
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareTransmit(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, 0);
 80064bc:	4620      	mov	r0, r4
 80064be:	4629      	mov	r1, r5
 80064c0:	f7ff ff86 	bl	80063d0 <usbStartTransmitI>
 80064c4:	f385 8811 	msr	BASEPRI, r5
 80064c8:	bd38      	pop	{r3, r4, r5, pc}
 80064ca:	bf00      	nop
 80064cc:	40005c00 	.word	0x40005c00

080064d0 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80064d0:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 80064d2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80064d6:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 80064d8:	2b06      	cmp	r3, #6
 80064da:	d826      	bhi.n	800652a <_usb_ep0in+0x5a>
 80064dc:	e8df f003 	tbb	[pc, r3]
 80064e0:	042d4304 	.word	0x042d4304
 80064e4:	2604      	.short	0x2604
 80064e6:	04          	.byte	0x04
 80064e7:	00          	.byte	0x00
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80064e8:	4a32      	ldr	r2, [pc, #200]	; (80065b4 <_usb_ep0in+0xe4>)
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80064ea:	6841      	ldr	r1, [r0, #4]
 80064ec:	6813      	ldr	r3, [r2, #0]
 80064ee:	680d      	ldr	r5, [r1, #0]
 80064f0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80064f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064f8:	f083 0310 	eor.w	r3, r3, #16
 80064fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006504:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8006506:	6813      	ldr	r3, [r2, #0]
 8006508:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800650c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006510:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	b10d      	cbz	r5, 8006524 <_usb_ep0in+0x54>
 8006520:	2105      	movs	r1, #5
 8006522:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8006524:	2306      	movs	r3, #6
 8006526:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800652a:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 800652c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800652e:	b103      	cbz	r3, 8006532 <_usb_ep0in+0x62>
      usbp->ep0endcb(usbp);
 8006530:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8006532:	2300      	movs	r3, #0
 8006534:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8006538:	bd38      	pop	{r3, r4, r5, pc}
 800653a:	68c3      	ldr	r3, [r0, #12]
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800653c:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = false;
 800653e:	2500      	movs	r5, #0
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 8006540:	2203      	movs	r2, #3
 8006542:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8006546:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8006548:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 800654a:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 800654c:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 800654e:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8006550:	f002 fb2e 	bl	8008bb0 <usb_lld_prepare_receive.constprop.7>
 8006554:	2320      	movs	r3, #32
 8006556:	f383 8811 	msr	BASEPRI, r3
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareReceive(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    (void) usbStartReceiveI(usbp, 0);
 800655a:	4620      	mov	r0, r4
 800655c:	f002 fb08 	bl	8008b70 <usbStartReceiveI.constprop.10>
 8006560:	f385 8811 	msr	BASEPRI, r5
 8006564:	bd38      	pop	{r3, r4, r5, pc}

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 8006566:	f890 207b 	ldrb.w	r2, [r0, #123]	; 0x7b
 800656a:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800656e:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
 8006570:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8006574:	428b      	cmp	r3, r1
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8006576:	68c3      	ldr	r3, [r0, #12]
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8006578:	d9e0      	bls.n	800653c <_usb_ep0in+0x6c>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800657a:	8a1d      	ldrh	r5, [r3, #16]
 800657c:	fbb1 f2f5 	udiv	r2, r1, r5
 8006580:	fb05 1512 	mls	r5, r5, r2, r1
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8006584:	2d00      	cmp	r5, #0
 8006586:	d1d9      	bne.n	800653c <_usb_ep0in+0x6c>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8006588:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800658a:	4629      	mov	r1, r5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800658c:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800658e:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8006590:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8006592:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8006594:	f7ff fc6c 	bl	8005e70 <usb_lld_prepare_transmit>
 8006598:	2320      	movs	r3, #32
 800659a:	f383 8811 	msr	BASEPRI, r3
       transmitted.*/
    if ((usbp->ep0n < max) &&
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 800659e:	4620      	mov	r0, r4
 80065a0:	4629      	mov	r1, r5
 80065a2:	f7ff ff15 	bl	80063d0 <usbStartTransmitI>
 80065a6:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 80065aa:	2302      	movs	r3, #2
 80065ac:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80065b0:	bd38      	pop	{r3, r4, r5, pc}
 80065b2:	bf00      	nop
 80065b4:	40005c00 	.word	0x40005c00
 80065b8:	f3af 8000 	nop.w
 80065bc:	f3af 8000 	nop.w

080065c0 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	4604      	mov	r4, r0
  stm32_usb_pma_t *pmap;
  stm32_usb_descriptor_t *udp;
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
 80065c4:	4bba      	ldr	r3, [pc, #744]	; (80068b0 <_usb_ep0setup+0x2f0>)
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 80065c6:	2200      	movs	r2, #0
 80065c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ca:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 80065ce:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80065d2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80065d6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80065da:	0049      	lsls	r1, r1, #1
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 80065dc:	688b      	ldr	r3, [r1, #8]
  usbReadSetup(usbp, ep, usbp->setup);
 80065de:	f100 0274 	add.w	r2, r0, #116	; 0x74
 80065e2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80065e6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	f100 067c 	add.w	r6, r0, #124	; 0x7c
  for (n = 0; n < 4; n++) {
    *(uint16_t *)buf = (uint16_t)*pmap++;
 80065f0:	f853 1b04 	ldr.w	r1, [r3], #4
 80065f4:	f822 1b02 	strh.w	r1, [r2], #2
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
  pmap = USB_ADDR2PTR(udp->RXADDR0);
  for (n = 0; n < 4; n++) {
 80065f8:	42b2      	cmp	r2, r6
 80065fa:	d1f9      	bne.n	80065f0 <_usb_ep0setup+0x30>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 80065fc:	6863      	ldr	r3, [r4, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	b36b      	cbz	r3, 800665e <_usb_ep0setup+0x9e>
      !(usbp->config->requests_hook_cb(usbp))) {
 8006602:	4620      	mov	r0, r4
 8006604:	4798      	blx	r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 8006606:	b350      	cbz	r0, 800665e <_usb_ep0setup+0x9e>
 8006608:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800660a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 800660e:	f894 107b 	ldrb.w	r1, [r4, #123]	; 0x7b
 8006612:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 8006616:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 800661a:	42aa      	cmp	r2, r5
    usbp->ep0n = max;
 800661c:	bf3c      	itt	cc
 800661e:	4615      	movcc	r5, r2
 8006620:	66e2      	strcc	r2, [r4, #108]	; 0x6c
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8006622:	f013 0f80 	tst.w	r3, #128	; 0x80
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8006626:	68e3      	ldr	r3, [r4, #12]
  max = (size_t)get_hword(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8006628:	f040 80b0 	bne.w	800678c <_usb_ep0setup+0x1cc>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 800662c:	2d00      	cmp	r5, #0
 800662e:	f040 8097 	bne.w	8006760 <_usb_ep0setup+0x1a0>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8006632:	695b      	ldr	r3, [r3, #20]
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 8006634:	2205      	movs	r2, #5
 8006636:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800663a:	4620      	mov	r0, r4
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800663c:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800663e:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8006640:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8006642:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8006644:	4629      	mov	r1, r5
 8006646:	f7ff fc13 	bl	8005e70 <usb_lld_prepare_transmit>
 800664a:	2320      	movs	r3, #32
 800664c:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 8006650:	4620      	mov	r0, r4
 8006652:	4629      	mov	r1, r5
 8006654:	f7ff febc 	bl	80063d0 <usbStartTransmitI>
 8006658:	f385 8811 	msr	BASEPRI, r5
 800665c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800665e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8006662:	f013 0760 	ands.w	r7, r3, #96	; 0x60
 8006666:	d022      	beq.n	80066ae <_usb_ep0setup+0xee>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8006668:	4a91      	ldr	r2, [pc, #580]	; (80068b0 <_usb_ep0setup+0x2f0>)
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
      usb_lld_stall_out(usbp, 0);
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800666a:	6861      	ldr	r1, [r4, #4]
 800666c:	6813      	ldr	r3, [r2, #0]
 800666e:	680d      	ldr	r5, [r1, #0]
 8006670:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8006674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006678:	f083 0310 	eor.w	r3, r3, #16
 800667c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006684:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8006686:	6813      	ldr	r3, [r2, #0]
 8006688:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800668c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006690:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	b115      	cbz	r5, 80066a6 <_usb_ep0setup+0xe6>
 80066a0:	4620      	mov	r0, r4
 80066a2:	2105      	movs	r1, #5
 80066a4:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 80066a6:	2306      	movs	r3, #6
 80066a8:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80066ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
 80066ae:	f894 5075 	ldrb.w	r5, [r4, #117]	; 0x75
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80066b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 80066b6:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80066ba:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 80066be:	f000 8116 	beq.w	80068ee <_usb_ep0setup+0x32e>
 80066c2:	d918      	bls.n	80066f6 <_usb_ep0setup+0x136>
 80066c4:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 80066c8:	f000 80f8 	beq.w	80068bc <_usb_ep0setup+0x2fc>
 80066cc:	f240 808b 	bls.w	80067e6 <_usb_ep0setup+0x226>
 80066d0:	f5b5 6f10 	cmp.w	r5, #2304	; 0x900
 80066d4:	f000 8095 	beq.w	8006802 <_usb_ep0setup+0x242>
 80066d8:	f640 4202 	movw	r2, #3074	; 0xc02
 80066dc:	4295      	cmp	r5, r2
 80066de:	f000 80df 	beq.w	80068a0 <_usb_ep0setup+0x2e0>
 80066e2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80066e6:	d1bf      	bne.n	8006668 <_usb_ep0setup+0xa8>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 80066e8:	f104 027f 	add.w	r2, r4, #127	; 0x7f
 80066ec:	2501      	movs	r5, #1
 80066ee:	6727      	str	r7, [r4, #112]	; 0x70
 80066f0:	66a2      	str	r2, [r4, #104]	; 0x68
 80066f2:	66e5      	str	r5, [r4, #108]	; 0x6c
 80066f4:	e78b      	b.n	800660e <_usb_ep0setup+0x4e>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80066f6:	2d02      	cmp	r5, #2
 80066f8:	f000 8109 	beq.w	800690e <_usb_ep0setup+0x34e>
 80066fc:	f240 80c6 	bls.w	800688c <_usb_ep0setup+0x2cc>
 8006700:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8006704:	f000 8090 	beq.w	8006828 <_usb_ep0setup+0x268>
 8006708:	f5b5 7f81 	cmp.w	r5, #258	; 0x102
 800670c:	d1ac      	bne.n	8006668 <_usb_ep0setup+0xa8>
        return false;
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800670e:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8006712:	2a00      	cmp	r2, #0
 8006714:	d1a8      	bne.n	8006668 <_usb_ep0setup+0xa8>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8006716:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 800671a:	f011 020f 	ands.w	r2, r1, #15
 800671e:	d01a      	beq.n	8006756 <_usb_ep0setup+0x196>
 8006720:	0092      	lsls	r2, r2, #2
 8006722:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006726:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800672a:	f011 0f80 	tst.w	r1, #128	; 0x80

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 800672e:	6811      	ldr	r1, [r2, #0]
 8006730:	f040 8111 	bne.w	8006956 <_usb_ep0setup+0x396>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 8006734:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
 8006738:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800673c:	d00b      	beq.n	8006756 <_usb_ep0setup+0x196>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 800673e:	6813      	ldr	r3, [r2, #0]
 8006740:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8006744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006748:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 800674c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006750:	6013      	str	r3, [r2, #0]
 8006752:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8006756:	2500      	movs	r5, #0
 8006758:	66a5      	str	r5, [r4, #104]	; 0x68
 800675a:	66e5      	str	r5, [r4, #108]	; 0x6c
 800675c:	6725      	str	r5, [r4, #112]	; 0x70
 800675e:	e756      	b.n	800660e <_usb_ep0setup+0x4e>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8006760:	699b      	ldr	r3, [r3, #24]
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 8006762:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 8006764:	2104      	movs	r1, #4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8006766:	2600      	movs	r6, #0
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 8006768:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800676c:	4620      	mov	r0, r4
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
 800676e:	60da      	str	r2, [r3, #12]
  osp->rxsize             = n;
 8006770:	605d      	str	r5, [r3, #4]
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8006772:	701e      	strb	r6, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8006774:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8006776:	f002 fa1b 	bl	8008bb0 <usb_lld_prepare_receive.constprop.7>
 800677a:	2320      	movs	r3, #32
 800677c:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      (void) usbStartReceiveI(usbp, 0);
 8006780:	4620      	mov	r0, r4
 8006782:	f002 f9f5 	bl	8008b70 <usbStartReceiveI.constprop.10>
 8006786:	f386 8811 	msr	BASEPRI, r6
 800678a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 800678c:	b1bd      	cbz	r5, 80067be <_usb_ep0setup+0x1fe>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800678e:	695b      	ldr	r3, [r3, #20]
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 8006790:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8006792:	2600      	movs	r6, #0
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 8006794:	2101      	movs	r1, #1
 8006796:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800679a:	4620      	mov	r0, r4
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
 800679c:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 800679e:	605d      	str	r5, [r3, #4]
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 80067a0:	701e      	strb	r6, [r3, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;
 80067a2:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 80067a4:	4631      	mov	r1, r6
 80067a6:	f7ff fb63 	bl	8005e70 <usb_lld_prepare_transmit>
 80067aa:	2320      	movs	r3, #32
 80067ac:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 80067b0:	4620      	mov	r0, r4
 80067b2:	4631      	mov	r1, r6
 80067b4:	f7ff fe0c 	bl	80063d0 <usbStartTransmitI>
 80067b8:	f386 8811 	msr	BASEPRI, r6
 80067bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80067be:	699b      	ldr	r3, [r3, #24]
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 80067c0:	2203      	movs	r2, #3
 80067c2:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80067c6:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 80067c8:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 80067ca:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 80067cc:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 80067ce:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 80067d0:	f002 f9ee 	bl	8008bb0 <usb_lld_prepare_receive.constprop.7>
 80067d4:	2320      	movs	r3, #32
 80067d6:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareReceive(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartReceiveI(usbp, 0);
 80067da:	4620      	mov	r0, r4
 80067dc:	f002 f9c8 	bl	8008b70 <usbStartReceiveI.constprop.10>
 80067e0:	f385 8811 	msr	BASEPRI, r5
 80067e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80067e6:	f240 3202 	movw	r2, #770	; 0x302
 80067ea:	4295      	cmp	r5, r2
 80067ec:	d02c      	beq.n	8006848 <_usb_ep0setup+0x288>
 80067ee:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 80067f2:	f47f af39 	bne.w	8006668 <_usb_ep0setup+0xa8>
        (usbp->setup[1] == USB_REQ_SET_ADDRESS)) {
      set_address(usbp);
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
#else
    usbSetupTransfer(usbp, NULL, 0, set_address);
 80067f6:	4a2f      	ldr	r2, [pc, #188]	; (80068b4 <_usb_ep0setup+0x2f4>)
 80067f8:	66a7      	str	r7, [r4, #104]	; 0x68
 80067fa:	66e7      	str	r7, [r4, #108]	; 0x6c
 80067fc:	463d      	mov	r5, r7
 80067fe:	6722      	str	r2, [r4, #112]	; 0x70
 8006800:	e705      	b.n	800660e <_usb_ep0setup+0x4e>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 8006802:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8006806:	f884 207f 	strb.w	r2, [r4, #127]	; 0x7f
    if (usbp->configuration == 0U) {
 800680a:	2a00      	cmp	r2, #0
 800680c:	f040 8095 	bne.w	800693a <_usb_ep0setup+0x37a>
      usbp->state = USB_SELECTED;
 8006810:	2203      	movs	r2, #3
 8006812:	7022      	strb	r2, [r4, #0]
    }
    else {
      usbp->state = USB_ACTIVE;
    }
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8006814:	6862      	ldr	r2, [r4, #4]
 8006816:	6812      	ldr	r2, [r2, #0]
 8006818:	2a00      	cmp	r2, #0
 800681a:	d09c      	beq.n	8006756 <_usb_ep0setup+0x196>
 800681c:	4620      	mov	r0, r4
 800681e:	2102      	movs	r1, #2
 8006820:	4790      	blx	r2
 8006822:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8006826:	e796      	b.n	8006756 <_usb_ep0setup+0x196>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8006828:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 800682c:	2a01      	cmp	r2, #1
 800682e:	f47f af1b 	bne.w	8006668 <_usb_ep0setup+0xa8>
      usbp->status &= ~2U;
 8006832:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8006836:	66a7      	str	r7, [r4, #104]	; 0x68
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 8006838:	f022 0202 	bic.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800683c:	66e7      	str	r7, [r4, #108]	; 0x6c
 800683e:	6727      	str	r7, [r4, #112]	; 0x70
 8006840:	463d      	mov	r5, r7
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 8006842:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 8006846:	e6e2      	b.n	800660e <_usb_ep0setup+0x4e>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8006848:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 800684c:	2a00      	cmp	r2, #0
 800684e:	f47f af0b 	bne.w	8006668 <_usb_ep0setup+0xa8>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8006852:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8006856:	f011 020f 	ands.w	r2, r1, #15
 800685a:	f43f af7c 	beq.w	8006756 <_usb_ep0setup+0x196>
 800685e:	0093      	lsls	r3, r2, #2
 8006860:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006864:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8006868:	0609      	lsls	r1, r1, #24
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	f100 8087 	bmi.w	800697e <_usb_ep0setup+0x3be>
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8006870:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006874:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006878:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 800687c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006880:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 800688a:	e764      	b.n	8006756 <_usb_ep0setup+0x196>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800688c:	b92d      	cbnz	r5, 800689a <_usb_ep0setup+0x2da>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 800688e:	2202      	movs	r2, #2
 8006890:	6725      	str	r5, [r4, #112]	; 0x70
 8006892:	66a6      	str	r6, [r4, #104]	; 0x68
 8006894:	66e2      	str	r2, [r4, #108]	; 0x6c
 8006896:	4615      	mov	r5, r2
 8006898:	e6b9      	b.n	800660e <_usb_ep0setup+0x4e>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800689a:	2d01      	cmp	r5, #1
 800689c:	f47f aee4 	bne.w	8006668 <_usb_ep0setup+0xa8>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 80068a0:	4905      	ldr	r1, [pc, #20]	; (80068b8 <_usb_ep0setup+0x2f8>)
 80068a2:	2502      	movs	r5, #2
 80068a4:	2200      	movs	r2, #0
 80068a6:	66a1      	str	r1, [r4, #104]	; 0x68
 80068a8:	66e5      	str	r5, [r4, #108]	; 0x6c
 80068aa:	6722      	str	r2, [r4, #112]	; 0x70
 80068ac:	e6af      	b.n	800660e <_usb_ep0setup+0x4e>
 80068ae:	bf00      	nop
 80068b0:	40005c00 	.word	0x40005c00
 80068b4:	08005b41 	.word	0x08005b41
 80068b8:	080092d0 	.word	0x080092d0
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 80068bc:	6861      	ldr	r1, [r4, #4]

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 80068be:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
 80068c2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 80068c6:	684d      	ldr	r5, [r1, #4]
 80068c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80068cc:	4620      	mov	r0, r4
 80068ce:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 80068d2:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80068d6:	47a8      	blx	r5
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 80068d8:	2800      	cmp	r0, #0
 80068da:	f43f aec5 	beq.w	8006668 <_usb_ep0setup+0xa8>
      return false;
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 80068de:	6843      	ldr	r3, [r0, #4]
 80068e0:	6805      	ldr	r5, [r0, #0]
 80068e2:	66a3      	str	r3, [r4, #104]	; 0x68
 80068e4:	66e5      	str	r5, [r4, #108]	; 0x6c
 80068e6:	6727      	str	r7, [r4, #112]	; 0x70
 80068e8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80068ec:	e68f      	b.n	800660e <_usb_ep0setup+0x4e>
    }
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80068ee:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80068f2:	2a01      	cmp	r2, #1
 80068f4:	f47f aeb8 	bne.w	8006668 <_usb_ep0setup+0xa8>
      usbp->status |= 2U;
 80068f8:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80068fc:	66a7      	str	r7, [r4, #104]	; 0x68
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 80068fe:	f042 0202 	orr.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8006902:	66e7      	str	r7, [r4, #108]	; 0x6c
 8006904:	6727      	str	r7, [r4, #112]	; 0x70
 8006906:	463d      	mov	r5, r7
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8006908:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 800690c:	e67f      	b.n	800660e <_usb_ep0setup+0x4e>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800690e:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8006912:	4922      	ldr	r1, [pc, #136]	; (800699c <_usb_ep0setup+0x3dc>)
 8006914:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006918:	f002 020f 	and.w	r2, r2, #15
 800691c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006920:	d10e      	bne.n	8006940 <_usb_ep0setup+0x380>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 8006922:	f412 5240 	ands.w	r2, r2, #12288	; 0x3000
 8006926:	f43f ae9f 	beq.w	8006668 <_usb_ep0setup+0xa8>
 800692a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800692e:	d10d      	bne.n	800694c <_usb_ep0setup+0x38c>
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8006930:	4a1b      	ldr	r2, [pc, #108]	; (80069a0 <_usb_ep0setup+0x3e0>)
 8006932:	66e5      	str	r5, [r4, #108]	; 0x6c
 8006934:	6727      	str	r7, [r4, #112]	; 0x70
 8006936:	66a2      	str	r2, [r4, #104]	; 0x68
 8006938:	e669      	b.n	800660e <_usb_ep0setup+0x4e>
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0U) {
      usbp->state = USB_SELECTED;
    }
    else {
      usbp->state = USB_ACTIVE;
 800693a:	2204      	movs	r2, #4
 800693c:	7022      	strb	r2, [r4, #0]
 800693e:	e769      	b.n	8006814 <_usb_ep0setup+0x254>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8006940:	f012 0230 	ands.w	r2, r2, #48	; 0x30
 8006944:	f43f ae90 	beq.w	8006668 <_usb_ep0setup+0xa8>
 8006948:	2a10      	cmp	r2, #16
 800694a:	d0f1      	beq.n	8006930 <_usb_ep0setup+0x370>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        /*lint -restore*/
        return true;
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 800694c:	4a15      	ldr	r2, [pc, #84]	; (80069a4 <_usb_ep0setup+0x3e4>)
 800694e:	66e5      	str	r5, [r4, #108]	; 0x6c
 8006950:	6727      	str	r7, [r4, #112]	; 0x70
 8006952:	66a2      	str	r2, [r4, #104]	; 0x68
 8006954:	e65b      	b.n	800660e <_usb_ep0setup+0x4e>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8006956:	f001 0130 	and.w	r1, r1, #48	; 0x30
 800695a:	2930      	cmp	r1, #48	; 0x30
 800695c:	f43f aefb 	beq.w	8006756 <_usb_ep0setup+0x196>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 8006960:	6813      	ldr	r3, [r2, #0]
 8006962:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8006966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800696a:	f083 0320 	eor.w	r3, r3, #32
 800696e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 800697c:	e6eb      	b.n	8006756 <_usb_ep0setup+0x196>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 800697e:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8006982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006986:	f082 0210 	eor.w	r2, r2, #16
 800698a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800698e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8006998:	e6dd      	b.n	8006756 <_usb_ep0setup+0x196>
 800699a:	bf00      	nop
 800699c:	40005c00 	.word	0x40005c00
 80069a0:	08009450 	.word	0x08009450
 80069a4:	08009320 	.word	0x08009320
 80069a8:	f3af 8000 	nop.w
 80069ac:	f3af 8000 	nop.w

080069b0 <usbPrepareTransmit>:
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
 80069b0:	b430      	push	{r4, r5}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80069b2:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 80069b6:	68e4      	ldr	r4, [r4, #12]

  isp->txqueued           = false;
 80069b8:	2500      	movs	r5, #0
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80069ba:	6964      	ldr	r4, [r4, #20]

  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
 80069bc:	60e2      	str	r2, [r4, #12]
  isp->txsize             = n;
 80069be:	6063      	str	r3, [r4, #4]
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 80069c0:	7025      	strb	r5, [r4, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;
 80069c2:	60a5      	str	r5, [r4, #8]

  usb_lld_prepare_transmit(usbp, ep);
}
 80069c4:	bc30      	pop	{r4, r5}
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 80069c6:	f7ff ba53 	b.w	8005e70 <usb_lld_prepare_transmit>
 80069ca:	bf00      	nop
 80069cc:	f3af 8000 	nop.w

080069d0 <usbInitEndpointI>:
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 80069d0:	6953      	ldr	r3, [r2, #20]
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 80069d2:	b570      	push	{r4, r5, r6, lr}
 80069d4:	4614      	mov	r4, r2
 80069d6:	4606      	mov	r6, r0
 80069d8:	460d      	mov	r5, r1
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 80069da:	b123      	cbz	r3, 80069e6 <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 80069dc:	4618      	mov	r0, r3
 80069de:	2100      	movs	r1, #0
 80069e0:	2210      	movs	r2, #16
 80069e2:	f002 fbc5 	bl	8009170 <memset>
  }
  if (epcp->out_state != NULL) {
 80069e6:	69a0      	ldr	r0, [r4, #24]
 80069e8:	b118      	cbz	r0, 80069f2 <usbInitEndpointI+0x22>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 80069ea:	2100      	movs	r1, #0
 80069ec:	2214      	movs	r2, #20
 80069ee:	f002 fbbf 	bl	8009170 <memset>
  }

  usbp->epc[ep] = epcp;
 80069f2:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 80069f6:	60dc      	str	r4, [r3, #12]

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 80069f8:	4630      	mov	r0, r6
 80069fa:	4629      	mov	r1, r5
}
 80069fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  usbp->epc[ep] = epcp;

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8006a00:	f7ff bc6e 	b.w	80062e0 <usb_lld_init_endpoint>
 8006a04:	f3af 8000 	nop.w
 8006a08:	f3af 8000 	nop.w
 8006a0c:	f3af 8000 	nop.w

08006a10 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8006a10:	4b0e      	ldr	r3, [pc, #56]	; (8006a4c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8006a12:	490f      	ldr	r1, [pc, #60]	; (8006a50 <chTMStopMeasurementX+0x40>)
 8006a14:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8006a16:	6883      	ldr	r3, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8006a18:	6f09      	ldr	r1, [r1, #112]	; 0x70
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	1a5b      	subs	r3, r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8006a1e:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8006a20:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8006a22:	b430      	push	{r4, r5}
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8006a24:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8006a28:	18e4      	adds	r4, r4, r3
 8006a2a:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8006a2e:	3201      	adds	r2, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8006a30:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8006a32:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8006a34:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8006a36:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8006a3a:	d805      	bhi.n	8006a48 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 8006a3c:	6802      	ldr	r2, [r0, #0]
 8006a3e:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8006a40:	bf38      	it	cc
 8006a42:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8006a44:	bc30      	pop	{r4, r5}
 8006a46:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8006a48:	6043      	str	r3, [r0, #4]
 8006a4a:	e7fb      	b.n	8006a44 <chTMStopMeasurementX+0x34>
 8006a4c:	e0001000 	.word	0xe0001000
 8006a50:	20001300 	.word	0x20001300
 8006a54:	f3af 8000 	nop.w
 8006a58:	f3af 8000 	nop.w
 8006a5c:	f3af 8000 	nop.w

08006a60 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8006a60:	b470      	push	{r4, r5, r6}
 8006a62:	2320      	movs	r3, #32
 8006a64:	f383 8811 	msr	BASEPRI, r3
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 8006a68:	4b13      	ldr	r3, [pc, #76]	; (8006ab8 <chThdExit+0x58>)
 8006a6a:	699d      	ldr	r5, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8006a6c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8006a6e:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8006a72:	42b4      	cmp	r4, r6
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 8006a74:	6228      	str	r0, [r5, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8006a76:	bf18      	it	ne
 8006a78:	2000      	movne	r0, #0
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8006a7a:	d010      	beq.n	8006a9e <chThdExit+0x3e>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8006a7c:	6822      	ldr	r2, [r4, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
 8006a7e:	4b0e      	ldr	r3, [pc, #56]	; (8006ab8 <chThdExit+0x58>)
 8006a80:	68a1      	ldr	r1, [r4, #8]
 8006a82:	626a      	str	r2, [r5, #36]	; 0x24
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8006a84:	7720      	strb	r0, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8006a86:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8006a88:	689a      	ldr	r2, [r3, #8]
 8006a8a:	428a      	cmp	r2, r1
 8006a8c:	d2fb      	bcs.n	8006a86 <chThdExit+0x26>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8006a8e:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8006a90:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8006a92:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8006a94:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8006a96:	605c      	str	r4, [r3, #4]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8006a98:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8006a9a:	42b4      	cmp	r4, r6
 8006a9c:	d1ee      	bne.n	8006a7c <chThdExit+0x1c>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8006a9e:	7f6b      	ldrb	r3, [r5, #29]
 8006aa0:	079b      	lsls	r3, r3, #30
 8006aa2:	d104      	bne.n	8006aae <chThdExit+0x4e>
    REG_REMOVE(tp);
 8006aa4:	692a      	ldr	r2, [r5, #16]
 8006aa6:	696b      	ldr	r3, [r5, #20]
 8006aa8:	611a      	str	r2, [r3, #16]
 8006aaa:	692a      	ldr	r2, [r5, #16]
 8006aac:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8006aae:	200f      	movs	r0, #15
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
  /* The thread never returns here.*/
}
 8006ab0:	bc70      	pop	{r4, r5, r6}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8006ab2:	f7ff bbb5 	b.w	8006220 <chSchGoSleepS>
 8006ab6:	bf00      	nop
 8006ab8:	20001300 	.word	0x20001300
 8006abc:	f3af 8000 	nop.w

08006ac0 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8006ac0:	f7ff b956 	b.w	8005d70 <chSchDoRescheduleAhead>
 8006ac4:	f3af 8000 	nop.w
 8006ac8:	f3af 8000 	nop.w
 8006acc:	f3af 8000 	nop.w

08006ad0 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8006ad0:	4b1c      	ldr	r3, [pc, #112]	; (8006b44 <chVTDoResetI+0x74>)
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8006ad2:	b470      	push	{r4, r5, r6}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8006ad4:	69da      	ldr	r2, [r3, #28]
 8006ad6:	4282      	cmp	r2, r0
 8006ad8:	d00f      	beq.n	8006afa <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8006ada:	6802      	ldr	r2, [r0, #0]
 8006adc:	6841      	ldr	r1, [r0, #4]
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8006ade:	331c      	adds	r3, #28

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8006ae0:	600a      	str	r2, [r1, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8006ae2:	6802      	ldr	r2, [r0, #0]
    vtp->vt_func = NULL;
 8006ae4:	2400      	movs	r4, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8006ae6:	429a      	cmp	r2, r3
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8006ae8:	6051      	str	r1, [r2, #4]
    vtp->vt_func = NULL;
 8006aea:	60c4      	str	r4, [r0, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8006aec:	d003      	beq.n	8006af6 <chVTDoResetI+0x26>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8006aee:	8901      	ldrh	r1, [r0, #8]
 8006af0:	8913      	ldrh	r3, [r2, #8]
 8006af2:	440b      	add	r3, r1
 8006af4:	8113      	strh	r3, [r2, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8006af6:	bc70      	pop	{r4, r5, r6}
 8006af8:	4770      	bx	lr

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8006afa:	4619      	mov	r1, r3
 8006afc:	6815      	ldr	r5, [r2, #0]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8006afe:	2000      	movs	r0, #0

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8006b00:	f841 5f1c 	str.w	r5, [r1, #28]!
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8006b04:	428d      	cmp	r5, r1
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8006b06:	6069      	str	r1, [r5, #4]
  vtp->vt_func = NULL;
 8006b08:	60d0      	str	r0, [r2, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8006b0a:	d016      	beq.n	8006b3a <chVTDoResetI+0x6a>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8006b0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006b10:	6a41      	ldr	r1, [r0, #36]	; 0x24

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8006b12:	8916      	ldrh	r6, [r2, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8006b14:	8cdc      	ldrh	r4, [r3, #38]	; 0x26

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8006b16:	892a      	ldrh	r2, [r5, #8]
 8006b18:	b289      	uxth	r1, r1
 8006b1a:	18b3      	adds	r3, r6, r2
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8006b1c:	1b0a      	subs	r2, r1, r4

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8006b1e:	b29b      	uxth	r3, r3
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8006b20:	b292      	uxth	r2, r2

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8006b22:	4293      	cmp	r3, r2

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8006b24:	812b      	strh	r3, [r5, #8]
  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8006b26:	d9e6      	bls.n	8006af6 <chVTDoResetI+0x26>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8006b28:	1a9b      	subs	r3, r3, r2
 8006b2a:	b29b      	uxth	r3, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8006b2c:	2b01      	cmp	r3, #1
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8006b2e:	bf98      	it	ls
 8006b30:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8006b32:	440b      	add	r3, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	6343      	str	r3, [r0, #52]	; 0x34
 8006b38:	e7dd      	b.n	8006af6 <chVTDoResetI+0x26>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8006b3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b3e:	60d8      	str	r0, [r3, #12]
 8006b40:	e7d9      	b.n	8006af6 <chVTDoResetI+0x26>
 8006b42:	bf00      	nop
 8006b44:	20001300 	.word	0x20001300
 8006b48:	f3af 8000 	nop.w
 8006b4c:	f3af 8000 	nop.w

08006b50 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8006b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8006b52:	4e1e      	ldr	r6, [pc, #120]	; (8006bcc <chVTDoSetI+0x7c>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8006b54:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8006b58:	46b6      	mov	lr, r6
 8006b5a:	f85e 4f1c 	ldr.w	r4, [lr, #28]!
 8006b5e:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8006b60:	2901      	cmp	r1, #1
 8006b62:	bf98      	it	ls
 8006b64:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8006b66:	4574      	cmp	r4, lr
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8006b68:	6103      	str	r3, [r0, #16]
  vtp->vt_func = vtfunc;
 8006b6a:	60c2      	str	r2, [r0, #12]
 8006b6c:	b2ab      	uxth	r3, r5
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8006b6e:	d01d      	beq.n	8006bac <chVTDoSetI+0x5c>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8006b70:	4419      	add	r1, r3
 8006b72:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8006b74:	b289      	uxth	r1, r1
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8006b76:	8922      	ldrh	r2, [r4, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8006b78:	1acb      	subs	r3, r1, r3
 8006b7a:	b29b      	uxth	r3, r3
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8006b7c:	4293      	cmp	r3, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8006b7e:	bf38      	it	cc
 8006b80:	6379      	strcc	r1, [r7, #52]	; 0x34
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d905      	bls.n	8006b92 <chVTDoSetI+0x42>
    delta -= p->vt_delta;
    p = p->vt_next;
 8006b86:	6824      	ldr	r4, [r4, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8006b88:	1a9b      	subs	r3, r3, r2
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8006b8a:	8922      	ldrh	r2, [r4, #8]
    delta -= p->vt_delta;
 8006b8c:	b29b      	uxth	r3, r3
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d3f9      	bcc.n	8006b86 <chVTDoSetI+0x36>
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
 8006b92:	f64f 71ff 	movw	r1, #65535	; 0xffff
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8006b96:	6862      	ldr	r2, [r4, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8006b98:	6004      	str	r4, [r0, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8006b9a:	6042      	str	r2, [r0, #4]
  vtp->vt_prev->vt_next = vtp;
 8006b9c:	6010      	str	r0, [r2, #0]
  p->vt_prev = vtp;
 8006b9e:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 8006ba0:	8103      	strh	r3, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8006ba2:	8922      	ldrh	r2, [r4, #8]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	8123      	strh	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8006ba8:	84b1      	strh	r1, [r6, #36]	; 0x24
 8006baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8006bac:	18ca      	adds	r2, r1, r3
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8006bae:	b292      	uxth	r2, r2
  STM32_ST_TIM->SR     = 0;
 8006bb0:	f04f 0e00 	mov.w	lr, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8006bb4:	2502      	movs	r5, #2
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 8006bb6:	84f3      	strh	r3, [r6, #38]	; 0x26
      ch.vtlist.vt_next = vtp;
 8006bb8:	61f0      	str	r0, [r6, #28]
      ch.vtlist.vt_prev = vtp;
 8006bba:	6230      	str	r0, [r6, #32]
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8006bbc:	6004      	str	r4, [r0, #0]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8006bbe:	6044      	str	r4, [r0, #4]
      vtp->vt_delta = delay;
 8006bc0:	8101      	strh	r1, [r0, #8]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8006bc2:	637a      	str	r2, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8006bc4:	f8c7 e010 	str.w	lr, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8006bc8:	60fd      	str	r5, [r7, #12]
 8006bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bcc:	20001300 	.word	0x20001300

08006bd0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8006bd0:	b500      	push	{lr}
 8006bd2:	2320      	movs	r3, #32
 8006bd4:	b087      	sub	sp, #28
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8006bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006bde:	4298      	cmp	r0, r3
 8006be0:	d014      	beq.n	8006c0c <chThdSleep+0x3c>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8006be2:	4b0f      	ldr	r3, [pc, #60]	; (8006c20 <chThdSleep+0x50>)
 8006be4:	4601      	mov	r1, r0
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	a801      	add	r0, sp, #4
 8006bea:	4a0e      	ldr	r2, [pc, #56]	; (8006c24 <chThdSleep+0x54>)
 8006bec:	f7ff ffb0 	bl	8006b50 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8006bf0:	2008      	movs	r0, #8
 8006bf2:	f7ff fb15 	bl	8006220 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8006bf6:	9b04      	ldr	r3, [sp, #16]
 8006bf8:	b113      	cbz	r3, 8006c00 <chThdSleep+0x30>
      chVTDoResetI(&vt);
 8006bfa:	a801      	add	r0, sp, #4
 8006bfc:	f7ff ff68 	bl	8006ad0 <chVTDoResetI>
 8006c00:	2300      	movs	r3, #0
 8006c02:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chThdSleepS(time);
  chSysUnlock();
}
 8006c06:	b007      	add	sp, #28
 8006c08:	f85d fb04 	ldr.w	pc, [sp], #4
    }
  }
  else {
    chSchGoSleepS(newstate);
 8006c0c:	2008      	movs	r0, #8
 8006c0e:	f7ff fb07 	bl	8006220 <chSchGoSleepS>
 8006c12:	2300      	movs	r3, #0
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	b007      	add	sp, #28
 8006c1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c1e:	bf00      	nop
 8006c20:	20001300 	.word	0x20001300
 8006c24:	08005ce1 	.word	0x08005ce1
 8006c28:	f3af 8000 	nop.w
 8006c2c:	f3af 8000 	nop.w

08006c30 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8006c30:	e7fe      	b.n	8006c30 <__default_exit>
 8006c32:	bf00      	nop
 8006c34:	f3af 8000 	nop.w
 8006c38:	f3af 8000 	nop.w
 8006c3c:	f3af 8000 	nop.w

08006c40 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	f3af 8000 	nop.w
 8006c48:	f3af 8000 	nop.w
 8006c4c:	f3af 8000 	nop.w

08006c50 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	f3af 8000 	nop.w
 8006c58:	f3af 8000 	nop.w
 8006c5c:	f3af 8000 	nop.w

08006c60 <sendchar_pf>:
  (void)c;
  return 0;
}
#endif /* CONSOLE_ENABLE */

void sendchar_pf(void *p, char c) {
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	f3af 8000 	nop.w
 8006c68:	f3af 8000 	nop.w
 8006c6c:	f3af 8000 	nop.w

08006c70 <extra_in_cb>:
 */

#ifdef EXTRAKEY_ENABLE

/* extrakey IN callback hander */
void extra_in_cb(USBDriver *usbp, usbep_t ep) {
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	f3af 8000 	nop.w
 8006c78:	f3af 8000 	nop.w
 8006c7c:	f3af 8000 	nop.w

08006c80 <mouse_in_cb>:
 */

#ifdef MOUSE_ENABLE

/* mouse IN callback hander (a mouse report has made it IN) */
void mouse_in_cb(USBDriver *usbp, usbep_t ep) {
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	f3af 8000 	nop.w
 8006c88:	f3af 8000 	nop.w
 8006c8c:	f3af 8000 	nop.w

08006c90 <keyboard_leds>:
  osalSysUnlockFromISR();
}

/* LED status */
uint8_t keyboard_leds(void) {
  return (uint8_t)(keyboard_led_stats & 0xFF);
 8006c90:	4b01      	ldr	r3, [pc, #4]	; (8006c98 <keyboard_leds+0x8>)
}
 8006c92:	7818      	ldrb	r0, [r3, #0]
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	20001278 	.word	0x20001278
 8006c9c:	f3af 8000 	nop.w

08006ca0 <nkro_in_cb>:
  (void)ep;
}

#ifdef NKRO_ENABLE
/* nkro IN callback hander (a nkro report has made it IN) */
void nkro_in_cb(USBDriver *usbp, usbep_t ep) {
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	f3af 8000 	nop.w
 8006ca8:	f3af 8000 	nop.w
 8006cac:	f3af 8000 	nop.w

08006cb0 <kbd_in_cb>:
 *                  Keyboard functions
 * ---------------------------------------------------------
 */

/* keyboard IN callback hander (a kbd report has made it IN) */
void kbd_in_cb(USBDriver *usbp, usbep_t ep) {
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	f3af 8000 	nop.w
 8006cb8:	f3af 8000 	nop.w
 8006cbc:	f3af 8000 	nop.w

08006cc0 <usb_sof_cb>:

  return FALSE;
}

/* Start-of-frame callback */
static void usb_sof_cb(USBDriver *usbp) {
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	f3af 8000 	nop.w
 8006cc8:	f3af 8000 	nop.w
 8006ccc:	f3af 8000 	nop.w

08006cd0 <send_extra_report.part.2>:
  /* STUB */
  (void)usbp;
  (void)ep;
}

static void send_extra_report(uint8_t report_id, uint16_t data) {
 8006cd0:	b530      	push	{r4, r5, lr}
 8006cd2:	b083      	sub	sp, #12
  if(usbGetDriverStateI(&USB_DRIVER) != USB_ACTIVE) {
    osalSysUnlock();
    return;
  }

  report_extra_t report = {
 8006cd4:	f88d 0004 	strb.w	r0, [sp, #4]
 8006cd8:	f8ad 1005 	strh.w	r1, [sp, #5]
 8006cdc:	2400      	movs	r4, #0
 8006cde:	f384 8811 	msr	BASEPRI, r4
    .report_id = report_id,
    .usage = data
  };

  osalSysUnlock();
  usbPrepareTransmit(&USB_DRIVER, EXTRA_ENDPOINT, (uint8_t *)&report, sizeof(report_extra_t));
 8006ce2:	4d09      	ldr	r5, [pc, #36]	; (8006d08 <send_extra_report.part.2+0x38>)
 8006ce4:	aa01      	add	r2, sp, #4
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	2104      	movs	r1, #4
 8006cea:	2303      	movs	r3, #3
 8006cec:	f7ff fe60 	bl	80069b0 <usbPrepareTransmit>
 8006cf0:	2320      	movs	r3, #32
 8006cf2:	f383 8811 	msr	BASEPRI, r3
  osalSysLock();
  usbStartTransmitI(&USB_DRIVER, EXTRA_ENDPOINT);
 8006cf6:	2104      	movs	r1, #4
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	f7ff fb69 	bl	80063d0 <usbStartTransmitI>
 8006cfe:	f384 8811 	msr	BASEPRI, r4
  osalSysUnlock();
}
 8006d02:	b003      	add	sp, #12
 8006d04:	bd30      	pop	{r4, r5, pc}
 8006d06:	bf00      	nop
 8006d08:	20001454 	.word	0x20001454
 8006d0c:	f3af 8000 	nop.w

08006d10 <send_consumer>:
 8006d10:	2320      	movs	r3, #32
 8006d12:	f383 8811 	msr	BASEPRI, r3
  (void)ep;
}

static void send_extra_report(uint8_t report_id, uint16_t data) {
  osalSysLock();
  if(usbGetDriverStateI(&USB_DRIVER) != USB_ACTIVE) {
 8006d16:	4b06      	ldr	r3, [pc, #24]	; (8006d30 <send_consumer+0x20>)
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d003      	beq.n	8006d26 <send_consumer+0x16>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f383 8811 	msr	BASEPRI, r3
 8006d24:	4770      	bx	lr
 8006d26:	4601      	mov	r1, r0
 8006d28:	2003      	movs	r0, #3
 8006d2a:	f7ff bfd1 	b.w	8006cd0 <send_extra_report.part.2>
 8006d2e:	bf00      	nop
 8006d30:	20001454 	.word	0x20001454
 8006d34:	f3af 8000 	nop.w
 8006d38:	f3af 8000 	nop.w
 8006d3c:	f3af 8000 	nop.w

08006d40 <send_system>:
 8006d40:	2320      	movs	r3, #32
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	4b06      	ldr	r3, [pc, #24]	; (8006d60 <send_system+0x20>)
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	2b04      	cmp	r3, #4
 8006d4c:	d003      	beq.n	8006d56 <send_system+0x16>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	4770      	bx	lr
 8006d56:	4601      	mov	r1, r0
 8006d58:	2002      	movs	r0, #2
 8006d5a:	f7ff bfb9 	b.w	8006cd0 <send_extra_report.part.2>
 8006d5e:	bf00      	nop
 8006d60:	20001454 	.word	0x20001454
 8006d64:	f3af 8000 	nop.w
 8006d68:	f3af 8000 	nop.w
 8006d6c:	f3af 8000 	nop.w

08006d70 <send_mouse>:
void mouse_in_cb(USBDriver *usbp, usbep_t ep) {
  (void)usbp;
  (void)ep;
}

void send_mouse(report_mouse_t *report) {
 8006d70:	b570      	push	{r4, r5, r6, lr}
 8006d72:	2520      	movs	r5, #32
 8006d74:	f385 8811 	msr	BASEPRI, r5
  osalSysLock();
  if(usbGetDriverStateI(&USB_DRIVER) != USB_ACTIVE) {
 8006d78:	4c0c      	ldr	r4, [pc, #48]	; (8006dac <send_mouse+0x3c>)
 8006d7a:	7823      	ldrb	r3, [r4, #0]
 8006d7c:	2b04      	cmp	r3, #4
 8006d7e:	d003      	beq.n	8006d88 <send_mouse+0x18>
 8006d80:	2300      	movs	r3, #0
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	bd70      	pop	{r4, r5, r6, pc}
 8006d88:	4602      	mov	r2, r0
 8006d8a:	2600      	movs	r6, #0
 8006d8c:	f386 8811 	msr	BASEPRI, r6
  /* TODO: LUFA manually waits for the endpoint to become ready
   * for about 10ms for mouse, kbd, system; 1ms for nkro
   * is this really needed?
   */

  usbPrepareTransmit(&USB_DRIVER, MOUSE_ENDPOINT, (uint8_t *)report, sizeof(report_mouse_t));
 8006d90:	2102      	movs	r1, #2
 8006d92:	4620      	mov	r0, r4
 8006d94:	2305      	movs	r3, #5
 8006d96:	f7ff fe0b 	bl	80069b0 <usbPrepareTransmit>
 8006d9a:	f385 8811 	msr	BASEPRI, r5
  osalSysLock();
  usbStartTransmitI(&USB_DRIVER, MOUSE_ENDPOINT);
 8006d9e:	2102      	movs	r1, #2
 8006da0:	4620      	mov	r0, r4
 8006da2:	f7ff fb15 	bl	80063d0 <usbStartTransmitI>
 8006da6:	f386 8811 	msr	BASEPRI, r6
 8006daa:	bd70      	pop	{r4, r5, r6, pc}
 8006dac:	20001454 	.word	0x20001454

08006db0 <send_keyboard>:
  return (uint8_t)(keyboard_led_stats & 0xFF);
}

/* prepare and start sending a report IN
 * not callable from ISR or locked state */
void send_keyboard(report_keyboard_t *report) {
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	2420      	movs	r4, #32
 8006db4:	f384 8811 	msr	BASEPRI, r4
  osalSysLock();
  if(usbGetDriverStateI(&USB_DRIVER) != USB_ACTIVE) {
 8006db8:	4b1b      	ldr	r3, [pc, #108]	; (8006e28 <send_keyboard+0x78>)
 8006dba:	781a      	ldrb	r2, [r3, #0]
 8006dbc:	2a04      	cmp	r2, #4
 8006dbe:	d003      	beq.n	8006dc8 <send_keyboard+0x18>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	bd38      	pop	{r3, r4, r5, pc}
 8006dc8:	4605      	mov	r5, r0
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f382 8811 	msr	BASEPRI, r2
  }
  osalSysUnlock();

  bool ep_not_ready;
#ifdef NKRO_ENABLE
  if(keyboard_nkro) {  /* NKRO protocol */
 8006dd0:	4a16      	ldr	r2, [pc, #88]	; (8006e2c <send_keyboard+0x7c>)
    usbPrepareTransmit(&USB_DRIVER, NKRO_ENDPOINT, (uint8_t *)report, sizeof(report_keyboard_t));
 8006dd2:	4618      	mov	r0, r3
  }
  osalSysUnlock();

  bool ep_not_ready;
#ifdef NKRO_ENABLE
  if(keyboard_nkro) {  /* NKRO protocol */
 8006dd4:	7812      	ldrb	r2, [r2, #0]
 8006dd6:	b1b2      	cbz	r2, 8006e06 <send_keyboard+0x56>
    usbPrepareTransmit(&USB_DRIVER, NKRO_ENDPOINT, (uint8_t *)report, sizeof(report_keyboard_t));
 8006dd8:	2105      	movs	r1, #5
 8006dda:	462a      	mov	r2, r5
 8006ddc:	2310      	movs	r3, #16
 8006dde:	f7ff fde7 	bl	80069b0 <usbPrepareTransmit>
 8006de2:	f384 8811 	msr	BASEPRI, r4
    /* need to wait until the previous packet has made it through */
    do {
        osalSysLock();
        ep_not_ready = usbStartTransmitI(&USB_DRIVER, NKRO_ENDPOINT);
 8006de6:	2105      	movs	r1, #5
 8006de8:	480f      	ldr	r0, [pc, #60]	; (8006e28 <send_keyboard+0x78>)
 8006dea:	f7ff faf1 	bl	80063d0 <usbStartTransmitI>
 8006dee:	2300      	movs	r3, #0
 8006df0:	f383 8811 	msr	BASEPRI, r3
        osalSysUnlock();
    } while (ep_not_ready);
 8006df4:	2800      	cmp	r0, #0
 8006df6:	d1f4      	bne.n	8006de2 <send_keyboard+0x32>
        osalSysLock();
        ep_not_ready = usbStartTransmitI(&USB_DRIVER, KBD_ENDPOINT);
        osalSysUnlock();
    } while (ep_not_ready);
  }
  keyboard_report_sent = *report;
 8006df8:	4c0d      	ldr	r4, [pc, #52]	; (8006e30 <send_keyboard+0x80>)
 8006dfa:	6828      	ldr	r0, [r5, #0]
 8006dfc:	6869      	ldr	r1, [r5, #4]
 8006dfe:	68aa      	ldr	r2, [r5, #8]
 8006e00:	68eb      	ldr	r3, [r5, #12]
 8006e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e04:	bd38      	pop	{r3, r4, r5, pc}
        osalSysUnlock();
    } while (ep_not_ready);
  } else
#endif /* NKRO_ENABLE */
  { /* boot protocol */
    usbPrepareTransmit(&USB_DRIVER, KBD_ENDPOINT, (uint8_t *)report, KBD_EPSIZE);
 8006e06:	2101      	movs	r1, #1
 8006e08:	462a      	mov	r2, r5
 8006e0a:	2308      	movs	r3, #8
 8006e0c:	f7ff fdd0 	bl	80069b0 <usbPrepareTransmit>
 8006e10:	f384 8811 	msr	BASEPRI, r4
    /* need to wait until the previous packet has made it through */
    do {
        osalSysLock();
        ep_not_ready = usbStartTransmitI(&USB_DRIVER, KBD_ENDPOINT);
 8006e14:	2101      	movs	r1, #1
 8006e16:	4804      	ldr	r0, [pc, #16]	; (8006e28 <send_keyboard+0x78>)
 8006e18:	f7ff fada 	bl	80063d0 <usbStartTransmitI>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f383 8811 	msr	BASEPRI, r3
        osalSysUnlock();
    } while (ep_not_ready);
 8006e22:	2800      	cmp	r0, #0
 8006e24:	d1f4      	bne.n	8006e10 <send_keyboard+0x60>
 8006e26:	e7e7      	b.n	8006df8 <send_keyboard+0x48>
 8006e28:	20001454 	.word	0x20001454
 8006e2c:	20001239 	.word	0x20001239
 8006e30:	2000127c 	.word	0x2000127c
 8006e34:	f3af 8000 	nop.w
 8006e38:	f3af 8000 	nop.w
 8006e3c:	f3af 8000 	nop.w

08006e40 <keyboard_idle_timer_cb>:
  (void)usbp;
}

/* Idle requests timer code
 * callback (called from ISR, unlocked state) */
static void keyboard_idle_timer_cb(void *arg) {
 8006e40:	b570      	push	{r4, r5, r6, lr}
 8006e42:	2420      	movs	r4, #32
 8006e44:	f384 8811 	msr	BASEPRI, r4
  USBDriver *usbp = (USBDriver *)arg;

  osalSysLockFromISR();

  /* check that the states of things are as they're supposed to */
  if(usbGetDriverStateI(usbp) != USB_ACTIVE) {
 8006e48:	7802      	ldrb	r2, [r0, #0]
 8006e4a:	2a04      	cmp	r2, #4
 8006e4c:	d003      	beq.n	8006e56 <keyboard_idle_timer_cb+0x16>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	bd70      	pop	{r4, r5, r6, pc}
    osalSysUnlockFromISR();
    return;
  }

#ifdef NKRO_ENABLE
  if(!keyboard_nkro && keyboard_idle) {
 8006e56:	4a17      	ldr	r2, [pc, #92]	; (8006eb4 <keyboard_idle_timer_cb+0x74>)
 8006e58:	7812      	ldrb	r2, [r2, #0]
 8006e5a:	2a00      	cmp	r2, #0
 8006e5c:	d1f7      	bne.n	8006e4e <keyboard_idle_timer_cb+0xe>
 8006e5e:	4e16      	ldr	r6, [pc, #88]	; (8006eb8 <keyboard_idle_timer_cb+0x78>)
 8006e60:	7831      	ldrb	r1, [r6, #0]
 8006e62:	2900      	cmp	r1, #0
 8006e64:	d0f3      	beq.n	8006e4e <keyboard_idle_timer_cb+0xe>
 8006e66:	4605      	mov	r5, r0
 8006e68:	f382 8811 	msr	BASEPRI, r2
#else /* NKRO_ENABLE */
  if(keyboard_idle) {
#endif /* NKRO_ENABLE */
    /* TODO: are we sure we want the KBD_ENDPOINT? */
    osalSysUnlockFromISR();
    usbPrepareTransmit(usbp, KBD_ENDPOINT, (uint8_t *)&keyboard_report_sent, sizeof(keyboard_report_sent));
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	4a13      	ldr	r2, [pc, #76]	; (8006ebc <keyboard_idle_timer_cb+0x7c>)
 8006e70:	2310      	movs	r3, #16
 8006e72:	f7ff fd9d 	bl	80069b0 <usbPrepareTransmit>
 8006e76:	f384 8811 	msr	BASEPRI, r4
    osalSysLockFromISR();
    usbStartTransmitI(usbp, KBD_ENDPOINT);
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	f7ff faa7 	bl	80063d0 <usbStartTransmitI>
    /* rearm the timer */
    chVTSetI(&keyboard_idle_timer, 4*MS2ST(keyboard_idle), keyboard_idle_timer_cb, (void *)usbp);
 8006e82:	7834      	ldrb	r4, [r6, #0]
 8006e84:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006e88:	fb03 f304 	mul.w	r3, r3, r4
 8006e8c:	4c0c      	ldr	r4, [pc, #48]	; (8006ec0 <keyboard_idle_timer_cb+0x80>)
 8006e8e:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8006e92:	fba4 3403 	umull	r3, r4, r4, r3
 8006e96:	480b      	ldr	r0, [pc, #44]	; (8006ec4 <keyboard_idle_timer_cb+0x84>)
 8006e98:	09a4      	lsrs	r4, r4, #6
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8006e9a:	68c3      	ldr	r3, [r0, #12]
 8006e9c:	00a4      	lsls	r4, r4, #2
 8006e9e:	b2a4      	uxth	r4, r4
 8006ea0:	b10b      	cbz	r3, 8006ea6 <keyboard_idle_timer_cb+0x66>
    chVTDoResetI(vtp);
 8006ea2:	f7ff fe15 	bl	8006ad0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	462b      	mov	r3, r5
 8006eaa:	4806      	ldr	r0, [pc, #24]	; (8006ec4 <keyboard_idle_timer_cb+0x84>)
 8006eac:	4a06      	ldr	r2, [pc, #24]	; (8006ec8 <keyboard_idle_timer_cb+0x88>)
 8006eae:	f7ff fe4f 	bl	8006b50 <chVTDoSetI>
 8006eb2:	e7cc      	b.n	8006e4e <keyboard_idle_timer_cb+0xe>
 8006eb4:	20001239 	.word	0x20001239
 8006eb8:	200012c0 	.word	0x200012c0
 8006ebc:	2000127c 	.word	0x2000127c
 8006ec0:	10624dd3 	.word	0x10624dd3
 8006ec4:	20001240 	.word	0x20001240
 8006ec8:	08006e41 	.word	0x08006e41
 8006ecc:	f3af 8000 	nop.w

08006ed0 <usb_request_hook_cb>:
 * Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 * Other Device    Required    Optional    Optional    Optional    Optional    Optional
 */

/* Callback for SETUP request on the endpoint 0 (control) */
static bool usb_request_hook_cb(USBDriver *usbp) {
 8006ed0:	b538      	push	{r3, r4, r5, lr}
   *  2,3: (LSB,MSB) wValue
   *  4,5: (LSB,MSB) wIndex
   *  6,7: (LSB,MSB) wLength (number of bytes to transfer if there is a data phase) */

  /* Handle HID class specific requests */
  if(((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) &&
 8006ed2:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 * Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 * Other Device    Required    Optional    Optional    Optional    Optional    Optional
 */

/* Callback for SETUP request on the endpoint 0 (control) */
static bool usb_request_hook_cb(USBDriver *usbp) {
 8006ed6:	4604      	mov	r4, r0
   *  2,3: (LSB,MSB) wValue
   *  4,5: (LSB,MSB) wIndex
   *  6,7: (LSB,MSB) wLength (number of bytes to transfer if there is a data phase) */

  /* Handle HID class specific requests */
  if(((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) &&
 8006ed8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006edc:	2a21      	cmp	r2, #33	; 0x21
 8006ede:	d007      	beq.n	8006ef0 <usb_request_hook_cb+0x20>
      break;
    }
  }

  /* Handle the Get_Descriptor Request for HID class (not handled by the default hook) */
  if((usbp->setup[0] == 0x81) && (usbp->setup[1] == USB_REQ_GET_DESCRIPTOR)) {
 8006ee0:	f240 6381 	movw	r3, #1665	; 0x681
 8006ee4:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d02d      	beq.n	8006f48 <usb_request_hook_cb+0x78>
                extra_report_blank[0] = REPORT_ID_CONSUMER;
                usbSetupTransfer(usbp, (uint8_t *)extra_report_blank, sizeof(extra_report_blank), NULL);
                return TRUE;
                break;
              default:
                return FALSE;
 8006eec:	2000      	movs	r0, #0
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    return TRUE;
  }

  return FALSE;
}
 8006eee:	bd38      	pop	{r3, r4, r5, pc}
   *  6,7: (LSB,MSB) wLength (number of bytes to transfer if there is a data phase) */

  /* Handle HID class specific requests */
  if(((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) &&
     ((usbp->setup[0] & USB_RTYPE_RECIPIENT_MASK) == USB_RTYPE_RECIPIENT_INTERFACE)) {
    switch(usbp->setup[0] & USB_RTYPE_DIR_MASK) {
 8006ef0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ef4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006ef8:	b193      	cbz	r3, 8006f20 <usb_request_hook_cb+0x50>
 8006efa:	2a00      	cmp	r2, #0
 8006efc:	d0f0      	beq.n	8006ee0 <usb_request_hook_cb+0x10>
    case USB_RTYPE_DIR_DEV2HOST:
      switch(usbp->setup[1]) {   /* bRequest */
 8006efe:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d070      	beq.n	8006fe8 <usb_request_hook_cb+0x118>
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d04d      	beq.n	8006fa6 <usb_request_hook_cb+0xd6>
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d1e8      	bne.n	8006ee0 <usb_request_hook_cb+0x10>
      case HID_GET_REPORT:
        switch(usbp->setup[4]) {     /* LSB(wIndex) (check MSB==0?) */
 8006f0e:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8006f12:	2b04      	cmp	r3, #4
 8006f14:	d841      	bhi.n	8006f9a <usb_request_hook_cb+0xca>
 8006f16:	e8df f003 	tbb	[pc, r3]
 8006f1a:	6461      	.short	0x6461
 8006f1c:	5040      	.short	0x5040
 8006f1e:	61          	.byte	0x61
 8006f1f:	00          	.byte	0x00
        break;
      }
      break;

    case USB_RTYPE_DIR_HOST2DEV:
      switch(usbp->setup[1]) {   /* bRequest */
 8006f20:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
 8006f24:	2b0a      	cmp	r3, #10
 8006f26:	d061      	beq.n	8006fec <usb_request_hook_cb+0x11c>
 8006f28:	2b0b      	cmp	r3, #11
 8006f2a:	d025      	beq.n	8006f78 <usb_request_hook_cb+0xa8>
 8006f2c:	2b09      	cmp	r3, #9
 8006f2e:	d1d7      	bne.n	8006ee0 <usb_request_hook_cb+0x10>
      case HID_SET_REPORT:
        switch(usbp->setup[4]) {       /* LSB(wIndex) (check MSB==0 and wLength==1?) */
 8006f30:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8006f34:	b10b      	cbz	r3, 8006f3a <usb_request_hook_cb+0x6a>
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	d1d2      	bne.n	8006ee0 <usb_request_hook_cb+0x10>
#ifdef NKRO_ENABLE
        case NKRO_INTERFACE:
#endif  /* NKRO_ENABLE */
        /* keyboard_led_stats = <read byte from next OUT report>
         * keyboard_led_stats needs be word (or dword), otherwise we get an exception on F0 */
          usbSetupTransfer(usbp, (uint8_t *)&keyboard_led_stats, 1, NULL);
 8006f3a:	4a47      	ldr	r2, [pc, #284]	; (8007058 <usb_request_hook_cb+0x188>)
 8006f3c:	2001      	movs	r0, #1
 8006f3e:	2300      	movs	r3, #0
 8006f40:	66a2      	str	r2, [r4, #104]	; 0x68
 8006f42:	66e0      	str	r0, [r4, #108]	; 0x6c
 8006f44:	6723      	str	r3, [r4, #112]	; 0x70
 8006f46:	bd38      	pop	{r3, r4, r5, pc}
    }
  }

  /* Handle the Get_Descriptor Request for HID class (not handled by the default hook) */
  if((usbp->setup[0] == 0x81) && (usbp->setup[1] == USB_REQ_GET_DESCRIPTOR)) {
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3], usbp->setup[2], get_hword(&usbp->setup[4]));
 8006f48:	6861      	ldr	r1, [r4, #4]
 * need it here for HID descriptor */
static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 8006f4a:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
 8006f4e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    }
  }

  /* Handle the Get_Descriptor Request for HID class (not handled by the default hook) */
  if((usbp->setup[0] == 0x81) && (usbp->setup[1] == USB_REQ_GET_DESCRIPTOR)) {
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3], usbp->setup[2], get_hword(&usbp->setup[4]));
 8006f52:	684d      	ldr	r5, [r1, #4]
 8006f54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 8006f5e:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8006f62:	47a8      	blx	r5
    if(dp == NULL)
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d0c1      	beq.n	8006eec <usb_request_hook_cb+0x1c>
      return FALSE;
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8006f68:	6841      	ldr	r1, [r0, #4]
 8006f6a:	6802      	ldr	r2, [r0, #0]
          return TRUE;
          break;

#ifdef MOUSE_ENABLE
        case MOUSE_INTERFACE:
          usbSetupTransfer(usbp, (uint8_t *)&mouse_report_blank, sizeof(mouse_report_blank), NULL);
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	66a1      	str	r1, [r4, #104]	; 0x68
 8006f70:	66e2      	str	r2, [r4, #108]	; 0x6c
 8006f72:	6723      	str	r3, [r4, #112]	; 0x70
          return TRUE;
 8006f74:	2001      	movs	r0, #1
 8006f76:	bd38      	pop	{r3, r4, r5, pc}
          break;
        }
        break;

      case HID_SET_PROTOCOL:
        if((usbp->setup[4] == KBD_INTERFACE) && (usbp->setup[5] == 0)) {   /* wIndex */
 8006f78:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
 8006f7c:	b96b      	cbnz	r3, 8006f9a <usb_request_hook_cb+0xca>
          keyboard_protocol = ((usbp->setup[2]) != 0x00);   /* LSB(wValue) */
 8006f7e:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
 8006f82:	4936      	ldr	r1, [pc, #216]	; (800705c <usb_request_hook_cb+0x18c>)
 8006f84:	3300      	adds	r3, #0
#ifdef NKRO_ENABLE
          keyboard_nkro = !!keyboard_protocol;
 8006f86:	4a36      	ldr	r2, [pc, #216]	; (8007060 <usb_request_hook_cb+0x190>)
        }
        break;

      case HID_SET_PROTOCOL:
        if((usbp->setup[4] == KBD_INTERFACE) && (usbp->setup[5] == 0)) {   /* wIndex */
          keyboard_protocol = ((usbp->setup[2]) != 0x00);   /* LSB(wValue) */
 8006f88:	bf18      	it	ne
 8006f8a:	2301      	movne	r3, #1
 8006f8c:	700b      	strb	r3, [r1, #0]
#ifdef NKRO_ENABLE
          keyboard_nkro = !!keyboard_protocol;
 8006f8e:	7013      	strb	r3, [r2, #0]
          if(!keyboard_nkro && keyboard_idle) {
 8006f90:	b91b      	cbnz	r3, 8006f9a <usb_request_hook_cb+0xca>
 8006f92:	4b34      	ldr	r3, [pc, #208]	; (8007064 <usb_request_hook_cb+0x194>)
 8006f94:	781a      	ldrb	r2, [r3, #0]
 8006f96:	2a00      	cmp	r2, #0
 8006f98:	d151      	bne.n	800703e <usb_request_hook_cb+0x16e>
            osalSysLockFromISR();
            chVTSetI(&keyboard_idle_timer, 4*MS2ST(keyboard_idle), keyboard_idle_timer_cb, (void *)usbp);
            osalSysUnlockFromISR();
          }
        }
        usbSetupTransfer(usbp, NULL, 0, NULL);
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	66a3      	str	r3, [r4, #104]	; 0x68
 8006f9e:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006fa0:	6723      	str	r3, [r4, #112]	; 0x70
        return TRUE;
 8006fa2:	2001      	movs	r0, #1
 8006fa4:	bd38      	pop	{r3, r4, r5, pc}
          break;
        }
        break;

      case HID_GET_PROTOCOL:
        if((usbp->setup[4] == KBD_INTERFACE) && (usbp->setup[5] == 0)) {   /* wIndex */
 8006fa6:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d198      	bne.n	8006ee0 <usb_request_hook_cb+0x10>
          usbSetupTransfer(usbp, &keyboard_protocol, 1, NULL);
 8006fae:	4a2b      	ldr	r2, [pc, #172]	; (800705c <usb_request_hook_cb+0x18c>)
 8006fb0:	2001      	movs	r0, #1
 8006fb2:	6723      	str	r3, [r4, #112]	; 0x70
 8006fb4:	66a2      	str	r2, [r4, #104]	; 0x68
 8006fb6:	66e0      	str	r0, [r4, #108]	; 0x6c
 8006fb8:	bd38      	pop	{r3, r4, r5, pc}
          break;
#endif /* CONSOLE_ENABLE */

#ifdef EXTRAKEY_ENABLE
        case EXTRA_INTERFACE:
          if(usbp->setup[3] == 1) { /* MSB(wValue) [Report Type] == 1 [Input Report] */
 8006fba:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
 8006fbe:	2801      	cmp	r0, #1
 8006fc0:	d194      	bne.n	8006eec <usb_request_hook_cb+0x1c>
            switch(usbp->setup[2]) { /* LSB(wValue) [Report ID] */
 8006fc2:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d03e      	beq.n	8007048 <usb_request_hook_cb+0x178>
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	d18e      	bne.n	8006eec <usb_request_hook_cb+0x1c>
                extra_report_blank[0] = REPORT_ID_SYSTEM;
                usbSetupTransfer(usbp, (uint8_t *)extra_report_blank, sizeof(extra_report_blank), NULL);
                return TRUE;
                break;
              case REPORT_ID_CONSUMER:
                extra_report_blank[0] = REPORT_ID_CONSUMER;
 8006fce:	4a26      	ldr	r2, [pc, #152]	; (8007068 <usb_request_hook_cb+0x198>)
                usbSetupTransfer(usbp, (uint8_t *)extra_report_blank, sizeof(extra_report_blank), NULL);
 8006fd0:	2100      	movs	r1, #0
                extra_report_blank[0] = REPORT_ID_SYSTEM;
                usbSetupTransfer(usbp, (uint8_t *)extra_report_blank, sizeof(extra_report_blank), NULL);
                return TRUE;
                break;
              case REPORT_ID_CONSUMER:
                extra_report_blank[0] = REPORT_ID_CONSUMER;
 8006fd2:	7013      	strb	r3, [r2, #0]
                usbSetupTransfer(usbp, (uint8_t *)extra_report_blank, sizeof(extra_report_blank), NULL);
 8006fd4:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006fd6:	66a2      	str	r2, [r4, #104]	; 0x68
 8006fd8:	6721      	str	r1, [r4, #112]	; 0x70
 8006fda:	bd38      	pop	{r3, r4, r5, pc}
        switch(usbp->setup[4]) {     /* LSB(wIndex) (check MSB==0?) */
        case KBD_INTERFACE:
#ifdef NKRO_ENABLE
        case NKRO_INTERFACE:
#endif /* NKRO_ENABLE */
          usbSetupTransfer(usbp, (uint8_t *)&keyboard_report_sent, sizeof(keyboard_report_sent), NULL);
 8006fdc:	4923      	ldr	r1, [pc, #140]	; (800706c <usb_request_hook_cb+0x19c>)
 8006fde:	2210      	movs	r2, #16
 8006fe0:	e7c4      	b.n	8006f6c <usb_request_hook_cb+0x9c>
          return TRUE;
          break;

#ifdef MOUSE_ENABLE
        case MOUSE_INTERFACE:
          usbSetupTransfer(usbp, (uint8_t *)&mouse_report_blank, sizeof(mouse_report_blank), NULL);
 8006fe2:	4923      	ldr	r1, [pc, #140]	; (8007070 <usb_request_hook_cb+0x1a0>)
 8006fe4:	2205      	movs	r2, #5
 8006fe6:	e7c1      	b.n	8006f6c <usb_request_hook_cb+0x9c>
          return TRUE;
        }
        break;

      case HID_GET_IDLE:
        usbSetupTransfer(usbp, &keyboard_idle, 1, NULL);
 8006fe8:	4a1e      	ldr	r2, [pc, #120]	; (8007064 <usb_request_hook_cb+0x194>)
 8006fea:	e7a7      	b.n	8006f3c <usb_request_hook_cb+0x6c>

      case HID_SET_IDLE:
        keyboard_idle = usbp->setup[3];     /* MSB(wValue) */
        /* arm the timer */
#ifdef NKRO_ENABLE
        if(!keyboard_nkro && keyboard_idle) {
 8006fec:	4a1c      	ldr	r2, [pc, #112]	; (8007060 <usb_request_hook_cb+0x190>)
        usbSetupTransfer(usbp, NULL, 0, NULL);
        return TRUE;
        break;

      case HID_SET_IDLE:
        keyboard_idle = usbp->setup[3];     /* MSB(wValue) */
 8006fee:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
        /* arm the timer */
#ifdef NKRO_ENABLE
        if(!keyboard_nkro && keyboard_idle) {
 8006ff2:	7811      	ldrb	r1, [r2, #0]
        usbSetupTransfer(usbp, NULL, 0, NULL);
        return TRUE;
        break;

      case HID_SET_IDLE:
        keyboard_idle = usbp->setup[3];     /* MSB(wValue) */
 8006ff4:	4a1b      	ldr	r2, [pc, #108]	; (8007064 <usb_request_hook_cb+0x194>)
 8006ff6:	7013      	strb	r3, [r2, #0]
        /* arm the timer */
#ifdef NKRO_ENABLE
        if(!keyboard_nkro && keyboard_idle) {
 8006ff8:	2900      	cmp	r1, #0
 8006ffa:	d1ce      	bne.n	8006f9a <usb_request_hook_cb+0xca>
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0cc      	beq.n	8006f9a <usb_request_hook_cb+0xca>
 8007000:	2320      	movs	r3, #32
 8007002:	f383 8811 	msr	BASEPRI, r3
#else /* NKRO_ENABLE */
        if(keyboard_idle) {
#endif /* NKRO_ENABLE */
          osalSysLockFromISR();
          chVTSetI(&keyboard_idle_timer, 4*MS2ST(keyboard_idle), keyboard_idle_timer_cb, (void *)usbp);
 8007006:	7812      	ldrb	r2, [r2, #0]
#else /* NKRO_ENABLE */
          if(keyboard_idle) {
#endif /* NKRO_ENABLE */
          /* arm the idle timer if boot protocol & idle */
            osalSysLockFromISR();
            chVTSetI(&keyboard_idle_timer, 4*MS2ST(keyboard_idle), keyboard_idle_timer_cb, (void *)usbp);
 8007008:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800700c:	fb03 f302 	mul.w	r3, r3, r2
 8007010:	4d18      	ldr	r5, [pc, #96]	; (8007074 <usb_request_hook_cb+0x1a4>)
 8007012:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8007016:	fba5 3503 	umull	r3, r5, r5, r3
 800701a:	4817      	ldr	r0, [pc, #92]	; (8007078 <usb_request_hook_cb+0x1a8>)
 800701c:	09ad      	lsrs	r5, r5, #6
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 800701e:	68c3      	ldr	r3, [r0, #12]
 8007020:	00ad      	lsls	r5, r5, #2
 8007022:	b2ad      	uxth	r5, r5
 8007024:	b10b      	cbz	r3, 800702a <usb_request_hook_cb+0x15a>
    chVTDoResetI(vtp);
 8007026:	f7ff fd53 	bl	8006ad0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 800702a:	4623      	mov	r3, r4
 800702c:	4629      	mov	r1, r5
 800702e:	4812      	ldr	r0, [pc, #72]	; (8007078 <usb_request_hook_cb+0x1a8>)
 8007030:	4a12      	ldr	r2, [pc, #72]	; (800707c <usb_request_hook_cb+0x1ac>)
 8007032:	f7ff fd8d 	bl	8006b50 <chVTDoSetI>
 8007036:	2300      	movs	r3, #0
 8007038:	f383 8811 	msr	BASEPRI, r3
 800703c:	e7ad      	b.n	8006f9a <usb_request_hook_cb+0xca>
 800703e:	2220      	movs	r2, #32
 8007040:	f382 8811 	msr	BASEPRI, r2
 8007044:	781a      	ldrb	r2, [r3, #0]
 8007046:	e7df      	b.n	8007008 <usb_request_hook_cb+0x138>
#ifdef EXTRAKEY_ENABLE
        case EXTRA_INTERFACE:
          if(usbp->setup[3] == 1) { /* MSB(wValue) [Report Type] == 1 [Input Report] */
            switch(usbp->setup[2]) { /* LSB(wValue) [Report ID] */
              case REPORT_ID_SYSTEM:
                extra_report_blank[0] = REPORT_ID_SYSTEM;
 8007048:	4a07      	ldr	r2, [pc, #28]	; (8007068 <usb_request_hook_cb+0x198>)
                usbSetupTransfer(usbp, (uint8_t *)extra_report_blank, sizeof(extra_report_blank), NULL);
 800704a:	2503      	movs	r5, #3
 800704c:	2100      	movs	r1, #0
#ifdef EXTRAKEY_ENABLE
        case EXTRA_INTERFACE:
          if(usbp->setup[3] == 1) { /* MSB(wValue) [Report Type] == 1 [Input Report] */
            switch(usbp->setup[2]) { /* LSB(wValue) [Report ID] */
              case REPORT_ID_SYSTEM:
                extra_report_blank[0] = REPORT_ID_SYSTEM;
 800704e:	7013      	strb	r3, [r2, #0]
                usbSetupTransfer(usbp, (uint8_t *)extra_report_blank, sizeof(extra_report_blank), NULL);
 8007050:	66a2      	str	r2, [r4, #104]	; 0x68
 8007052:	66e5      	str	r5, [r4, #108]	; 0x6c
 8007054:	6721      	str	r1, [r4, #112]	; 0x70
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	20001278 	.word	0x20001278
 800705c:	2000122d 	.word	0x2000122d
 8007060:	20001239 	.word	0x20001239
 8007064:	200012c0 	.word	0x200012c0
 8007068:	200012b4 	.word	0x200012b4
 800706c:	2000127c 	.word	0x2000127c
 8007070:	200012b8 	.word	0x200012b8
 8007074:	10624dd3 	.word	0x10624dd3
 8007078:	20001240 	.word	0x20001240
 800707c:	08006e41 	.word	0x08006e41

08007080 <usb_event_cb>:
 */

/* Handles the USB driver global events
 * TODO: maybe disable some things when connection is lost? */
static void usb_event_cb(USBDriver *usbp, usbevent_t event) {
  switch(event) {
 8007080:	2902      	cmp	r1, #2
 * ---------------------------------------------------------
 */

/* Handles the USB driver global events
 * TODO: maybe disable some things when connection is lost? */
static void usb_event_cb(USBDriver *usbp, usbevent_t event) {
 8007082:	b538      	push	{r3, r4, r5, lr}
 8007084:	460c      	mov	r4, r1
  switch(event) {
 8007086:	d021      	beq.n	80070cc <usb_event_cb+0x4c>
 8007088:	2904      	cmp	r1, #4
 800708a:	d11e      	bne.n	80070ca <usb_event_cb+0x4a>
/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
void del_mods(uint8_t mods) { real_mods &= ~mods; }
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
 800708c:	2000      	movs	r0, #0

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
 800708e:	4601      	mov	r1, r0
 8007090:	4b1c      	ldr	r3, [pc, #112]	; (8007104 <usb_event_cb+0x84>)
/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
void del_mods(uint8_t mods) { real_mods &= ~mods; }
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
 8007092:	4d1d      	ldr	r5, [pc, #116]	; (8007108 <usb_event_cb+0x88>)
 8007094:	681b      	ldr	r3, [r3, #0]
/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
 8007096:	4c1d      	ldr	r4, [pc, #116]	; (800710c <usb_event_cb+0x8c>)
 8007098:	f103 020f 	add.w	r2, r3, #15
/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
void del_mods(uint8_t mods) { real_mods &= ~mods; }
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
 800709c:	7028      	strb	r0, [r5, #0]
/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
 800709e:	7020      	strb	r0, [r4, #0]

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
 80070a0:	f803 1f01 	strb.w	r1, [r3, #1]!
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 80070a4:	4293      	cmp	r3, r2
        keyboard_report->raw[i] = 0;
 80070a6:	f04f 0400 	mov.w	r4, #0
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 80070aa:	d1f9      	bne.n	80070a0 <usb_event_cb+0x20>
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
 80070ac:	4b18      	ldr	r3, [pc, #96]	; (8007110 <usb_event_cb+0x90>)
    mousekey_repeat = 0;
 80070ae:	4919      	ldr	r1, [pc, #100]	; (8007114 <usb_event_cb+0x94>)
    mousekey_accel = 0;
 80070b0:	4a19      	ldr	r2, [pc, #100]	; (8007118 <usb_event_cb+0x98>)
    clear_keys();
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
#endif /* MOUSEKEY_ENABLE */
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
 80070b2:	4620      	mov	r0, r4
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
 80070b4:	601c      	str	r4, [r3, #0]
 80070b6:	711c      	strb	r4, [r3, #4]
    mousekey_repeat = 0;
 80070b8:	700c      	strb	r4, [r1, #0]
    mousekey_accel = 0;
 80070ba:	7014      	strb	r4, [r2, #0]
 80070bc:	f000 fc50 	bl	8007960 <host_system_send>
    host_consumer_send(0);
 80070c0:	4620      	mov	r0, r4
    return;

  case USB_EVENT_STALLED:
    return;
  }
}
 80070c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070c6:	f000 bc3b 	b.w	8007940 <host_consumer_send>
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
 80070cc:	4605      	mov	r5, r0
 80070ce:	2320      	movs	r3, #32
 80070d0:	f383 8811 	msr	BASEPRI, r3
    return;

  case USB_EVENT_CONFIGURED:
    osalSysLockFromISR();
    /* Enable the endpoints specified into the configuration. */
    usbInitEndpointI(usbp, KBD_ENDPOINT, &kbd_ep_config);
 80070d4:	2101      	movs	r1, #1
 80070d6:	4a11      	ldr	r2, [pc, #68]	; (800711c <usb_event_cb+0x9c>)
 80070d8:	f7ff fc7a 	bl	80069d0 <usbInitEndpointI>
#ifdef MOUSE_ENABLE
    usbInitEndpointI(usbp, MOUSE_ENDPOINT, &mouse_ep_config);
 80070dc:	4628      	mov	r0, r5
 80070de:	4621      	mov	r1, r4
 80070e0:	4a0f      	ldr	r2, [pc, #60]	; (8007120 <usb_event_cb+0xa0>)
 80070e2:	f7ff fc75 	bl	80069d0 <usbInitEndpointI>
#ifdef CONSOLE_ENABLE
    usbInitEndpointI(usbp, CONSOLE_ENDPOINT, &console_ep_config);
    /* don't need to start the flush timer, it starts from console_in_cb automatically */
#endif /* CONSOLE_ENABLE */
#ifdef EXTRAKEY_ENABLE
    usbInitEndpointI(usbp, EXTRA_ENDPOINT, &extra_ep_config);
 80070e6:	4628      	mov	r0, r5
 80070e8:	2104      	movs	r1, #4
 80070ea:	4a0e      	ldr	r2, [pc, #56]	; (8007124 <usb_event_cb+0xa4>)
 80070ec:	f7ff fc70 	bl	80069d0 <usbInitEndpointI>
#endif /* EXTRAKEY_ENABLE */
#ifdef NKRO_ENABLE
    usbInitEndpointI(usbp, NKRO_ENDPOINT, &nkro_ep_config);
 80070f0:	4628      	mov	r0, r5
 80070f2:	2105      	movs	r1, #5
 80070f4:	4a0c      	ldr	r2, [pc, #48]	; (8007128 <usb_event_cb+0xa8>)
 80070f6:	f7ff fc6b 	bl	80069d0 <usbInitEndpointI>
 80070fa:	2300      	movs	r3, #0
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	bd38      	pop	{r3, r4, r5, pc}
 8007102:	bf00      	nop
 8007104:	20001230 	.word	0x20001230
 8007108:	200014dc 	.word	0x200014dc
 800710c:	200014d8 	.word	0x200014d8
 8007110:	20001568 	.word	0x20001568
 8007114:	200014da 	.word	0x200014da
 8007118:	200012fc 	.word	0x200012fc
 800711c:	080095d0 	.word	0x080095d0
 8007120:	080095a0 	.word	0x080095a0
 8007124:	08009520 	.word	0x08009520
 8007128:	08009550 	.word	0x08009550
 800712c:	f3af 8000 	nop.w

08007130 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8007130:	4bbf      	ldr	r3, [pc, #764]	; (8007430 <main+0x300>)
 8007132:	f04f 32ff 	mov.w	r2, #4294967295
 8007136:	2100      	movs	r1, #0
 8007138:	6918      	ldr	r0, [r3, #16]



/* Main thread
 */
int main(void) {
 800713a:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800713e:	611a      	str	r2, [r3, #16]
 8007140:	6119      	str	r1, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8007142:	68d8      	ldr	r0, [r3, #12]
 8007144:	60da      	str	r2, [r3, #12]
 8007146:	60d9      	str	r1, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8007148:	69d8      	ldr	r0, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800714a:	4cba      	ldr	r4, [pc, #744]	; (8007434 <main+0x304>)
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 800714c:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8007150:	61d8      	str	r0, [r3, #28]
  rccEnableBKPInterface(FALSE);
 8007152:	69d8      	ldr	r0, [r3, #28]
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8007154:	f8df e32c 	ldr.w	lr, [pc, #812]	; 8007484 <main+0x354>
 8007158:	f040 6000 	orr.w	r0, r0, #134217728	; 0x8000000
 800715c:	61d8      	str	r0, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800715e:	6820      	ldr	r0, [r4, #0]
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 8007160:	4fb5      	ldr	r7, [pc, #724]	; (8007438 <main+0x308>)
 8007162:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8007166:	6020      	str	r0, [r4, #0]
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8007168:	699c      	ldr	r4, [r3, #24]
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 800716a:	4eb4      	ldr	r6, [pc, #720]	; (800743c <main+0x30c>)
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 800716c:	f044 047d 	orr.w	r4, r4, #125	; 0x7d
 8007170:	619c      	str	r4, [r3, #24]
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 8007172:	4cb3      	ldr	r4, [pc, #716]	; (8007440 <main+0x310>)
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 8007174:	4db3      	ldr	r5, [pc, #716]	; (8007444 <main+0x314>)
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8007176:	48b4      	ldr	r0, [pc, #720]	; (8007448 <main+0x318>)
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 8007178:	f8df a30c 	ldr.w	sl, [pc, #780]	; 8007488 <main+0x358>
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 800717c:	f8df c30c 	ldr.w	ip, [pc, #780]	; 800748c <main+0x35c>

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 8007180:	f8df b30c 	ldr.w	fp, [pc, #780]	; 8007490 <main+0x360>
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 8007184:	f8df 930c 	ldr.w	r9, [pc, #780]	; 8007494 <main+0x364>
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8007188:	f8ce 200c 	str.w	r2, [lr, #12]
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 800718c:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
  usbp->config       = NULL;
 8007190:	6061      	str	r1, [r4, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8007192:	4688      	mov	r8, r1
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 8007194:	2101      	movs	r1, #1

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 8007196:	f8ce b004 	str.w	fp, [lr, #4]
 800719a:	b08b      	sub	sp, #44	; 0x2c
  GPIOA->CRL = config->PAData.crl;
 800719c:	f8ce a000 	str.w	sl, [lr]
  GPIOB->ODR = config->PBData.odr;
 80071a0:	60fa      	str	r2, [r7, #12]
 80071a2:	f104 0e28 	add.w	lr, r4, #40	; 0x28
  GPIOB->CRH = config->PBData.crh;
 80071a6:	f8c7 c004 	str.w	ip, [r7, #4]
 80071aa:	f104 0a44 	add.w	sl, r4, #68	; 0x44
  GPIOB->CRL = config->PBData.crl;
 80071ae:	f8c7 c000 	str.w	ip, [r7]
  GPIOC->ODR = config->PCData.odr;
 80071b2:	60f2      	str	r2, [r6, #12]
  GPIOC->CRH = config->PCData.crh;
 80071b4:	6073      	str	r3, [r6, #4]
  GPIOC->CRL = config->PCData.crl;
 80071b6:	6033      	str	r3, [r6, #0]
  GPIOD->ODR = config->PDData.odr;
 80071b8:	60ea      	str	r2, [r5, #12]
  GPIOD->CRH = config->PDData.crh;
 80071ba:	606b      	str	r3, [r5, #4]
  GPIOD->CRL = config->PDData.crl;
 80071bc:	f8c5 9000 	str.w	r9, [r5]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80071c0:	60c2      	str	r2, [r0, #12]
  GPIOE->CRH = config->PEData.crh;
 80071c2:	6043      	str	r3, [r0, #4]
  GPIOE->CRL = config->PEData.crl;
 80071c4:	6003      	str	r3, [r0, #0]
 80071c6:	7021      	strb	r1, [r4, #0]
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 80071c8:	f84e 8f04 	str.w	r8, [lr, #4]!
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 80071cc:	45d6      	cmp	lr, sl
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
 80071ce:	f8ce 801c 	str.w	r8, [lr, #28]
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 80071d2:	f04f 0600 	mov.w	r6, #0
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 80071d6:	d1f7      	bne.n	80071c8 <main+0x98>
  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80071d8:	f64f 71ff 	movw	r1, #65535	; 0xffff

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80071dc:	f648 4a9f 	movw	sl, #35999	; 0x8c9f
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 80071e0:	f64f 00ff 	movw	r0, #63743	; 0xf8ff

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80071e4:	4a92      	ldr	r2, [pc, #584]	; (8007430 <main+0x300>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80071e6:	f8df c2b0 	ldr.w	ip, [pc, #688]	; 8007498 <main+0x368>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80071ea:	69d3      	ldr	r3, [r2, #28]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80071ec:	4d97      	ldr	r5, [pc, #604]	; (800744c <main+0x31c>)
 80071ee:	f043 0301 	orr.w	r3, r3, #1
 80071f2:	61d3      	str	r3, [r2, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80071f4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 80071f8:	4a95      	ldr	r2, [pc, #596]	; (8007450 <main+0x320>)
 80071fa:	f443 6e00 	orr.w	lr, r3, #2048	; 0x800
 80071fe:	f8cc e004 	str.w	lr, [ip, #4]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8007202:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8007206:	2701      	movs	r7, #1
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007208:	f04f 5e80 	mov.w	lr, #268435456	; 0x10000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800720c:	f04f 0b80 	mov.w	fp, #128	; 0x80
 8007210:	f44f 4ca0 	mov.w	ip, #20480	; 0x5000

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8007214:	f8c3 a028 	str.w	sl, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8007218:	62d9      	str	r1, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 800721a:	619e      	str	r6, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 800721c:	635e      	str	r6, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 800721e:	60de      	str	r6, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8007220:	605e      	str	r6, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8007222:	615f      	str	r7, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8007224:	601f      	str	r7, [r3, #0]
 8007226:	f885 b31c 	strb.w	fp, [r5, #796]	; 0x31c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800722a:	f8c5 e180 	str.w	lr, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800722e:	f8c5 e000 	str.w	lr, [r5]
 8007232:	f8c2 c008 	str.w	ip, [r2, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007236:	68d5      	ldr	r5, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8007238:	4b86      	ldr	r3, [pc, #536]	; (8007454 <main+0x324>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 800723a:	4028      	ands	r0, r5
  reg_value  =  (reg_value                                   |
 800723c:	4303      	orrs	r3, r0

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800723e:	4d86      	ldr	r5, [pc, #536]	; (8007458 <main+0x328>)
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8007240:	60d3      	str	r3, [r2, #12]
 8007242:	68eb      	ldr	r3, [r5, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8007244:	4885      	ldr	r0, [pc, #532]	; (800745c <main+0x32c>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800724a:	60eb      	str	r3, [r5, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800724c:	6803      	ldr	r3, [r0, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800724e:	4d84      	ldr	r5, [pc, #528]	; (8007460 <main+0x330>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007250:	f04f 0c10 	mov.w	ip, #16
 8007254:	433b      	orrs	r3, r7
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8007256:	f105 0e1c 	add.w	lr, r5, #28
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
  }
  usbp->transmitting = 0;
 800725a:	8126      	strh	r6, [r4, #8]
  usbp->receiving    = 0;
 800725c:	8166      	strh	r6, [r4, #10]

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800725e:	f04f 0800 	mov.w	r8, #0
 8007262:	6003      	str	r3, [r0, #0]
 8007264:	f04f 0900 	mov.w	r9, #0
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8007268:	eb0d 000c 	add.w	r0, sp, ip
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800726c:	f04f 33ff 	mov.w	r3, #4294967295
 8007270:	f04f 0a20 	mov.w	sl, #32
 8007274:	f882 c01f 	strb.w	ip, [r2, #31]
  tqp->p_prev = (thread_t *)tqp;
 8007278:	606d      	str	r5, [r5, #4]
 800727a:	f882 a022 	strb.w	sl, [r2, #34]	; 0x22
 800727e:	f8c5 e01c 	str.w	lr, [r5, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8007282:	f8c5 e020 	str.w	lr, [r5, #32]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8007286:	60ae      	str	r6, [r5, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8007288:	602d      	str	r5, [r5, #0]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 800728a:	612d      	str	r5, [r5, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 800728c:	616d      	str	r5, [r5, #20]
  ch.vtlist.vt_delta = (systime_t)-1;
 800728e:	84a9      	strh	r1, [r5, #36]	; 0x24
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8007290:	e9cd 8908 	strd	r8, r9, [sp, #32]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8007294:	9304      	str	r3, [sp, #16]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8007296:	84ee      	strh	r6, [r5, #38]	; 0x26
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8007298:	672e      	str	r6, [r5, #112]	; 0x70
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 800729a:	9605      	str	r6, [sp, #20]
  tmp->last       = (rtcnt_t)0;
 800729c:	9606      	str	r6, [sp, #24]
  tmp->n          = (ucnt_t)0;
 800729e:	9607      	str	r6, [sp, #28]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80072a0:	f001 fbf6 	bl	8008a90 <chTMStartMeasurementX.constprop.21>
  chTMStopMeasurementX(&tm);
 80072a4:	a804      	add	r0, sp, #16
 80072a6:	f7ff fbb3 	bl	8006a10 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 80072aa:	4b6e      	ldr	r3, [pc, #440]	; (8007464 <main+0x334>)
  ch.tm.offset = tm.last;
 80072ac:	9906      	ldr	r1, [sp, #24]
 80072ae:	f103 0c10 	add.w	ip, r3, #16
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80072b2:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80072b6:	f8c3 c010 	str.w	ip, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 80072ba:	f8c3 c014 	str.w	ip, [r3, #20]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80072be:	486a      	ldr	r0, [pc, #424]	; (8007468 <main+0x338>)
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80072c0:	f04f 0c40 	mov.w	ip, #64	; 0x40
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80072c4:	4a69      	ldr	r2, [pc, #420]	; (800746c <main+0x33c>)
 80072c6:	6729      	str	r1, [r5, #112]	; 0x70
 80072c8:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80072cc:	f105 012c 	add.w	r1, r5, #44	; 0x2c
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80072d0:	f8c5 c068 	str.w	ip, [r5, #104]	; 0x68
 80072d4:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 800749c <main+0x36c>
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80072d8:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80074a0 <main+0x370>
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80072dc:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 80074a4 <main+0x374>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80072e0:	f8c5 e040 	str.w	lr, [r5, #64]	; 0x40
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80072e4:	f020 0007 	bic.w	r0, r0, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80072e8:	f022 0207 	bic.w	r2, r2, #7
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80072ec:	f885 6049 	strb.w	r6, [r5, #73]	; 0x49
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80072f0:	666e      	str	r6, [r5, #100]	; 0x64
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80072f2:	662e      	str	r6, [r5, #96]	; 0x60
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80072f4:	f885 704a 	strb.w	r7, [r5, #74]	; 0x4a
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80072f8:	646e      	str	r6, [r5, #68]	; 0x44
  REG_INSERT(tp);
 80072fa:	63ed      	str	r5, [r5, #60]	; 0x3c
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 80072fc:	619e      	str	r6, [r3, #24]
 80072fe:	f8ce 1010 	str.w	r1, [lr, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8007302:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8007306:	6169      	str	r1, [r5, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8007308:	61a9      	str	r1, [r5, #24]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800730a:	f105 0154 	add.w	r1, r5, #84	; 0x54
 800730e:	f8c3 9000 	str.w	r9, [r3]
  default_heap.h_free.h.u.next = NULL;
 8007312:	609e      	str	r6, [r3, #8]
  default_heap.h_free.h.size = 0;
 8007314:	60de      	str	r6, [r3, #12]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8007316:	f885 7048 	strb.w	r7, [r5, #72]	; 0x48
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800731a:	f8c5 e050 	str.w	lr, [r5, #80]	; 0x50
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800731e:	6569      	str	r1, [r5, #84]	; 0x54
  tqp->p_prev = (thread_t *)tqp;
 8007320:	65a9      	str	r1, [r5, #88]	; 0x58
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8007322:	f8c8 0000 	str.w	r0, [r8]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8007326:	f8cc 2000 	str.w	r2, [ip]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800732a:	f04f 0902 	mov.w	r9, #2
 800732e:	f386 8811 	msr	BASEPRI, r6
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8007332:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8007334:	4a4e      	ldr	r2, [pc, #312]	; (8007470 <main+0x340>)
 8007336:	69ab      	ldr	r3, [r5, #24]
 8007338:	619a      	str	r2, [r3, #24]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800733a:	f38a 8811 	msr	BASEPRI, sl

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800733e:	69ab      	ldr	r3, [r5, #24]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8007340:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
 8007344:	6899      	ldr	r1, [r3, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8007346:	6968      	ldr	r0, [r5, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8007348:	f8df 815c 	ldr.w	r8, [pc, #348]	; 80074a8 <main+0x378>
 800734c:	f8df c15c 	ldr.w	ip, [pc, #348]	; 80074ac <main+0x37c>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8007350:	f105 0278 	add.w	r2, r5, #120	; 0x78
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8007354:	f885 9094 	strb.w	r9, [r5, #148]	; 0x94

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8007358:	f505 7a96 	add.w	sl, r5, #300	; 0x12c
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800735c:	f105 09a0 	add.w	r9, r5, #160	; 0xa0
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8007360:	f105 0e9c 	add.w	lr, r5, #156	; 0x9c
 8007364:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8007368:	f885 6095 	strb.w	r6, [r5, #149]	; 0x95
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800736c:	f8c5 70b4 	str.w	r7, [r5, #180]	; 0xb4
  tp->p_mtxlist = NULL;
 8007370:	f8c5 60b0 	str.w	r6, [r5, #176]	; 0xb0
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8007374:	f8c5 60ac 	str.w	r6, [r5, #172]	; 0xac
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8007378:	f885 7096 	strb.w	r7, [r5, #150]	; 0x96
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800737c:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
  REG_INSERT(tp);
 8007380:	f8c5 5088 	str.w	r5, [r5, #136]	; 0x88

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8007384:	f8c5 a084 	str.w	sl, [r5, #132]	; 0x84
 8007388:	f8c5 812c 	str.w	r8, [r5, #300]	; 0x12c
 800738c:	f8c5 c14c 	str.w	ip, [r5, #332]	; 0x14c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8007390:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
 8007394:	6102      	str	r2, [r0, #16]
 8007396:	616a      	str	r2, [r5, #20]
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8007398:	f8c5 6098 	str.w	r6, [r5, #152]	; 0x98
 800739c:	f8c5 e09c 	str.w	lr, [r5, #156]	; 0x9c
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80073a0:	f8c5 90a0 	str.w	r9, [r5, #160]	; 0xa0
  tqp->p_prev = (thread_t *)tqp;
 80073a4:	f8c5 90a4 	str.w	r9, [r5, #164]	; 0xa4

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80073a8:	2900      	cmp	r1, #0
 80073aa:	f000 81a7 	beq.w	80076fc <main+0x5cc>
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.r_queue;
 80073ae:	462b      	mov	r3, r5
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80073b0:	f885 6094 	strb.w	r6, [r5, #148]	; 0x94
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80073b4:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80073b6:	689e      	ldr	r6, [r3, #8]
 80073b8:	2e00      	cmp	r6, #0
 80073ba:	d1fb      	bne.n	80073b4 <main+0x284>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80073bc:	6859      	ldr	r1, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80073be:	67ab      	str	r3, [r5, #120]	; 0x78
  tp->p_prev = cp->p_prev;
 80073c0:	67e9      	str	r1, [r5, #124]	; 0x7c
  tp->p_prev->p_next = tp;
 80073c2:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 80073c4:	605a      	str	r2, [r3, #4]
 80073c6:	f386 8811 	msr	BASEPRI, r6
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(usbp);
 80073ca:	4a1b      	ldr	r2, [pc, #108]	; (8007438 <main+0x308>)
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 80073cc:	4b29      	ldr	r3, [pc, #164]	; (8007474 <main+0x344>)
 80073ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073d2:	6111      	str	r1, [r2, #16]
  chThdSleepMilliseconds(1500);
 80073d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80073d8:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 80073dc:	f7ff fbf8 	bl	8006bd0 <chThdSleep>
 80073e0:	2320      	movs	r3, #32
 80073e2:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 80073e6:	4a24      	ldr	r2, [pc, #144]	; (8007478 <main+0x348>)
 80073e8:	4b24      	ldr	r3, [pc, #144]	; (800747c <main+0x34c>)
 80073ea:	6062      	str	r2, [r4, #4]
 80073ec:	f103 0220 	add.w	r2, r3, #32
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 80073f0:	f843 6f04 	str.w	r6, [r3, #4]!

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 80073f4:	4293      	cmp	r3, r2
    usbp->epc[i] = NULL;
 80073f6:	f04f 0e00 	mov.w	lr, #0

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 80073fa:	d1f9      	bne.n	80073f0 <main+0x2c0>
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {

  if (usbp->state == USB_STOP) {
 80073fc:	7826      	ldrb	r6, [r4, #0]
 80073fe:	2e01      	cmp	r6, #1
 8007400:	d15f      	bne.n	80074c2 <main+0x392>
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 8007402:	4f0b      	ldr	r7, [pc, #44]	; (8007430 <main+0x300>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007404:	4b11      	ldr	r3, [pc, #68]	; (800744c <main+0x31c>)
 8007406:	69fa      	ldr	r2, [r7, #28]
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 8007408:	491d      	ldr	r1, [pc, #116]	; (8007480 <main+0x350>)
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800740a:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 800740e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 8007412:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007416:	f04f 08d0 	mov.w	r8, #208	; 0xd0
 800741a:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
 800741e:	61fa      	str	r2, [r7, #28]
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 8007420:	640e      	str	r6, [r1, #64]	; 0x40
 8007422:	f883 8313 	strb.w	r8, [r3, #787]	; 0x313
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007426:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800742a:	601d      	str	r5, [r3, #0]
 800742c:	e040      	b.n	80074b0 <main+0x380>
 800742e:	bf00      	nop
 8007430:	40021000 	.word	0x40021000
 8007434:	40007000 	.word	0x40007000
 8007438:	40010c00 	.word	0x40010c00
 800743c:	40011000 	.word	0x40011000
 8007440:	20001454 	.word	0x20001454
 8007444:	40011400 	.word	0x40011400
 8007448:	40011800 	.word	0x40011800
 800744c:	e000e100 	.word	0xe000e100
 8007450:	e000ed00 	.word	0xe000ed00
 8007454:	05fa0300 	.word	0x05fa0300
 8007458:	e000edf0 	.word	0xe000edf0
 800745c:	e0001000 	.word	0xe0001000
 8007460:	20001300 	.word	0x20001300
 8007464:	20001290 	.word	0x20001290
 8007468:	2000157f 	.word	0x2000157f
 800746c:	20005000 	.word	0x20005000
 8007470:	08009500 	.word	0x08009500
 8007474:	08009590 	.word	0x08009590
 8007478:	08009580 	.word	0x08009580
 800747c:	2000145c 	.word	0x2000145c
 8007480:	40005c00 	.word	0x40005c00
 8007484:	40010800 	.word	0x40010800
 8007488:	88884b88 	.word	0x88884b88
 800748c:	88888838 	.word	0x88888838
 8007490:	888884b8 	.word	0x888884b8
 8007494:	88888844 	.word	0x88888844
 8007498:	e0042000 	.word	0xe0042000
 800749c:	08005ca1 	.word	0x08005ca1
 80074a0:	200012b0 	.word	0x200012b0
 80074a4:	20001274 	.word	0x20001274
 80074a8:	08005d51 	.word	0x08005d51
 80074ac:	08005231 	.word	0x08005231

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80074b0:	f883 c314 	strb.w	ip, [r3, #788]	; 0x314
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80074b4:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80074b8:	6018      	str	r0, [r3, #0]
#if STM32_USB1_HP_NUMBER != STM32_USB1_LP_NUMBER
      nvicEnableVector(STM32_USB1_HP_NUMBER, STM32_USB_USB1_HP_IRQ_PRIORITY);
#endif
      nvicEnableVector(STM32_USB1_LP_NUMBER, STM32_USB_USB1_LP_IRQ_PRIORITY);
      /* Releases the USB reset.*/
      STM32_USB->CNTR = 0;
 80074ba:	f8c1 e040 	str.w	lr, [r1, #64]	; 0x40
    }
#endif
    /* Reset procedure enforced on driver start.*/
    _usb_reset(usbp);
 80074be:	f001 fb0f 	bl	8008ae0 <_usb_reset.constprop.15>
    usbp->epc[i] = NULL;
  }
  usb_lld_start(usbp);
  usbp->state = USB_READY;
 80074c2:	2302      	movs	r3, #2
 80074c4:	7023      	strb	r3, [r4, #0]
 80074c6:	2300      	movs	r3, #0
 80074c8:	f383 8811 	msr	BASEPRI, r3
  usbStart(usbp, &usbcfg);
  usbConnectBus(usbp);
 80074cc:	49b8      	ldr	r1, [pc, #736]	; (80077b0 <main+0x680>)
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->vt_func = NULL;
 80074ce:	4ab9      	ldr	r2, [pc, #740]	; (80077b4 <main+0x684>)
 80074d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80074d4:	6148      	str	r0, [r1, #20]
 80074d6:	60d3      	str	r3, [r2, #12]

  /* Init USB */
  init_usb_driver(&USB_DRIVER);

  /* init printf */
  init_printf(NULL,sendchar_pf);
 80074d8:	f001 fb7a 	bl	8008bd0 <init_printf.constprop.0>

  /* Wait until the USB is active */
  while(USB_DRIVER.state != USB_ACTIVE)
 80074dc:	7823      	ldrb	r3, [r4, #0]
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d005      	beq.n	80074ee <main+0x3be>
    chThdSleepMilliseconds(50);
 80074e2:	2064      	movs	r0, #100	; 0x64
 80074e4:	f7ff fb74 	bl	8006bd0 <chThdSleep>

  /* init printf */
  init_printf(NULL,sendchar_pf);

  /* Wait until the USB is active */
  while(USB_DRIVER.state != USB_ACTIVE)
 80074e8:	7823      	ldrb	r3, [r4, #0]
 80074ea:	2b04      	cmp	r3, #4
 80074ec:	d1f9      	bne.n	80074e2 <main+0x3b2>
#define LED_TGL()   do { palTogglePad(MAPLE_LED_PORT, MAPLE_LED_PIN); } while (0)

void matrix_init(void)
{
    // debug on
    debug_config.enable = true;
 80074ee:	49b2      	ldr	r1, [pc, #712]	; (80077b8 <main+0x688>)
  if (mode == PAL_MODE_INPUT_PULLUP)
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	780a      	ldrb	r2, [r1, #0]
 80074f4:	4618      	mov	r0, r3
    debug_config.keyboard = true;
    debug_config.matrix = true;
    debug_config.mouse = true;
 80074f6:	f042 020f 	orr.w	r2, r2, #15
 80074fa:	700a      	strb	r2, [r1, #0]
 80074fc:	4619      	mov	r1, r3
 80074fe:	2208      	movs	r2, #8
 8007500:	f44f 7580 	mov.w	r5, #256	; 0x100
    crh <<= 4;
    if ((mask & 0x0080) == 0)
      ml |= 0xf;
    else
      crl |= cfg;
    if ((mask & 0x8000) == 0)
 8007504:	042e      	lsls	r6, r5, #16
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
 8007506:	ea4f 1000 	mov.w	r0, r0, lsl #4
    crl <<= 4;
    crh <<= 4;
 800750a:	ea4f 1303 	mov.w	r3, r3, lsl #4
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
    ml <<= 4;
 800750e:	ea4f 1101 	mov.w	r1, r1, lsl #4
    if ((mask & 0x0080) == 0)
      ml |= 0xf;
    else
      crl |= cfg;
    if ((mask & 0x8000) == 0)
      mh |= 0xf;
 8007512:	bf54      	ite	pl
 8007514:	f040 000f 	orrpl.w	r0, r0, #15
    else
      crh |= cfg;
 8007518:	f043 0304 	orrmi.w	r3, r3, #4
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
 800751c:	3a01      	subs	r2, #1
    ml <<= 4;
    mh <<= 4;
    crl <<= 4;
    crh <<= 4;
    if ((mask & 0x0080) == 0)
      ml |= 0xf;
 800751e:	f041 010f 	orr.w	r1, r1, #15
      crl |= cfg;
    if ((mask & 0x8000) == 0)
      mh |= 0xf;
    else
      crh |= cfg;
    mask <<= 1;
 8007522:	ea4f 0545 	mov.w	r5, r5, lsl #1
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
 8007526:	d1ed      	bne.n	8007504 <main+0x3d4>
      mh |= 0xf;
    else
      crh |= cfg;
    mask <<= 1;
  }
  port->CRH = (port->CRH & mh) | crh;
 8007528:	4fa1      	ldr	r7, [pc, #644]	; (80077b0 <main+0x680>)
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
 800752a:	4da4      	ldr	r5, [pc, #656]	; (80077bc <main+0x68c>)
 800752c:	687e      	ldr	r6, [r7, #4]
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
 800752e:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 80077ec <main+0x6bc>
 8007532:	4030      	ands	r0, r6
 8007534:	4303      	orrs	r3, r0
 8007536:	607b      	str	r3, [r7, #4]
  port->CRL = (port->CRL & ml) | crl;
 8007538:	683b      	ldr	r3, [r7, #0]
        matrix_debouncing[i] = 0;
    }

    LED_ON();
 800753a:	2602      	movs	r6, #2
 800753c:	4019      	ands	r1, r3
 800753e:	6039      	str	r1, [r7, #0]
    wait_ms(500);
 8007540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
 8007544:	702a      	strb	r2, [r5, #0]
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
 8007546:	f88a 2000 	strb.w	r2, [sl]
        matrix_debouncing[i] = 0;
    }

    LED_ON();
 800754a:	613e      	str	r6, [r7, #16]
    wait_ms(500);
 800754c:	f7ff fb40 	bl	8006bd0 <chThdSleep>
    LED_OFF();
    wait_ms(500);
 8007550:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
        matrix_debouncing[i] = 0;
    }

    LED_ON();
    wait_ms(500);
    LED_OFF();
 8007554:	617e      	str	r6, [r7, #20]
    wait_ms(500);
 8007556:	f7ff fb3b 	bl	8006bd0 <chThdSleep>
    LED_ON();
 800755a:	613e      	str	r6, [r7, #16]
    wait_ms(500);
 800755c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007560:	f7ff fb36 	bl	8006bd0 <chThdSleep>
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
 8007564:	4b96      	ldr	r3, [pc, #600]	; (80077c0 <main+0x690>)
 8007566:	4a97      	ldr	r2, [pc, #604]	; (80077c4 <main+0x694>)
 8007568:	f8df 8270 	ldr.w	r8, [pc, #624]	; 80077dc <main+0x6ac>
  /* Main loop */
  while(true) {

    if(USB_DRIVER.state == USB_SUSPENDED) {
      print("[s]");
      while(USB_DRIVER.state == USB_SUSPENDED) {
 800756c:	4d96      	ldr	r5, [pc, #600]	; (80077c8 <main+0x698>)
    return ST2MS(chVTGetSystemTime());
}

uint16_t timer_elapsed(uint16_t last)
{
    return (uint16_t)(ST2MS(chVTTimeElapsedSinceX(MS2ST(last))));
 800756e:	f8df 9280 	ldr.w	r9, [pc, #640]	; 80077f0 <main+0x6c0>
    LED_OFF();
 8007572:	617e      	str	r6, [r7, #20]
 8007574:	601a      	str	r2, [r3, #0]
  print("Keyboard start.\n");

  /* Main loop */
  while(true) {

    if(USB_DRIVER.state == USB_SUSPENDED) {
 8007576:	7823      	ldrb	r3, [r4, #0]
 8007578:	2b05      	cmp	r3, #5
 800757a:	f000 80c7 	beq.w	800770c <main+0x5dc>
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
 800757e:	f000 fd37 	bl	8007ff0 <matrix_scan>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
        matrix_change = matrix_row ^ matrix_prev[r];
 8007582:	4b92      	ldr	r3, [pc, #584]	; (80077cc <main+0x69c>)
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
 8007584:	f89a 2000 	ldrb.w	r2, [sl]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	4e90      	ldr	r6, [pc, #576]	; (80077cc <main+0x69c>)
        if (matrix_change) {
 800758c:	4053      	eors	r3, r2
 800758e:	d002      	beq.n	8007596 <main+0x466>
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
 8007590:	07db      	lsls	r3, r3, #31
 8007592:	f100 812f 	bmi.w	80077f4 <main+0x6c4>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
 8007596:	23ff      	movs	r3, #255	; 0xff
 8007598:	2200      	movs	r2, #0
 800759a:	f88d 3008 	strb.w	r3, [sp, #8]
 800759e:	f88d 3009 	strb.w	r3, [sp, #9]
 80075a2:	f88d 200a 	strb.w	r2, [sp, #10]
 80075a6:	f001 fcb3 	bl	8008f10 <timer_read>
 80075aa:	f040 0001 	orr.w	r0, r0, #1
 80075ae:	f8ad 000c 	strh.w	r0, [sp, #12]
 80075b2:	ab02      	add	r3, sp, #8
 80075b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80075b8:	f000 f93a 	bl	8007830 <action_exec>
 80075bc:	4b84      	ldr	r3, [pc, #528]	; (80077d0 <main+0x6a0>)
 80075be:	881a      	ldrh	r2, [r3, #0]
 80075c0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80075c4:	fb03 f302 	mul.w	r3, r3, r2
 80075c8:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80075cc:	fba9 2303 	umull	r2, r3, r9, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80075d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80075d4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80075d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 *
 * @xclass
 */
static inline systime_t chVTTimeElapsedSinceX(systime_t start) {

  return chVTGetSystemTimeX() - start;
 80075da:	eba1 1393 	sub.w	r3, r1, r3, lsr #6
 80075de:	b29b      	uxth	r3, r3
 80075e0:	fb02 f303 	mul.w	r3, r2, r3
 80075e4:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 80075e8:	fba9 2303 	umull	r2, r3, r9, r3
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
 80075ec:	4a79      	ldr	r2, [pc, #484]	; (80077d4 <main+0x6a4>)
 80075ee:	09db      	lsrs	r3, r3, #7
 80075f0:	7811      	ldrb	r1, [r2, #0]
 80075f2:	2900      	cmp	r1, #0
 80075f4:	f000 80a2 	beq.w	800773c <main+0x60c>
 80075f8:	4a77      	ldr	r2, [pc, #476]	; (80077d8 <main+0x6a8>)
 80075fa:	7812      	ldrb	r2, [r2, #0]
 80075fc:	4293      	cmp	r3, r2
 80075fe:	db6f      	blt.n	80076e0 <main+0x5b0>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
 8007600:	4a76      	ldr	r2, [pc, #472]	; (80077dc <main+0x6ac>)
 8007602:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007606:	7896      	ldrb	r6, [r2, #2]
 8007608:	2b00      	cmp	r3, #0
 800760a:	f040 8090 	bne.w	800772e <main+0x5fe>
 800760e:	2e00      	cmp	r6, #0
 8007610:	f040 80b0 	bne.w	8007774 <main+0x644>
 8007614:	78d7      	ldrb	r7, [r2, #3]
 8007616:	2f00      	cmp	r7, #0
 8007618:	f040 80ac 	bne.w	8007774 <main+0x644>
 800761c:	f892 b004 	ldrb.w	fp, [r2, #4]
 8007620:	f1bb 0f00 	cmp.w	fp, #0
 8007624:	d05c      	beq.n	80076e0 <main+0x5b0>
        return;

    if (mousekey_repeat != UINT8_MAX)
 8007626:	29ff      	cmp	r1, #255	; 0xff
 8007628:	d00e      	beq.n	8007648 <main+0x518>
        mousekey_repeat++;
 800762a:	4a6a      	ldr	r2, [pc, #424]	; (80077d4 <main+0x6a4>)
 800762c:	3101      	adds	r1, #1
 800762e:	7011      	strb	r1, [r2, #0]


    if (mouse_report.x > 0) mouse_report.x = move_unit();
 8007630:	b25a      	sxtb	r2, r3
 8007632:	2a00      	cmp	r2, #0
 8007634:	dd05      	ble.n	8007642 <main+0x512>
 8007636:	f001 fc2b 	bl	8008e90 <move_unit.lto_priv.42>
 800763a:	b2c3      	uxtb	r3, r0
 800763c:	f888 3001 	strb.w	r3, [r8, #1]
 8007640:	b25a      	sxtb	r2, r3
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
 8007642:	2a00      	cmp	r2, #0
 8007644:	f2c0 80a7 	blt.w	8007796 <main+0x666>
    if (mouse_report.y > 0) mouse_report.y = move_unit();
 8007648:	b276      	sxtb	r6, r6
 800764a:	2e00      	cmp	r6, #0
 800764c:	dd07      	ble.n	800765e <main+0x52e>
 800764e:	9301      	str	r3, [sp, #4]
 8007650:	f001 fc1e 	bl	8008e90 <move_unit.lto_priv.42>
 8007654:	9b01      	ldr	r3, [sp, #4]
 8007656:	b2c6      	uxtb	r6, r0
 8007658:	f888 6002 	strb.w	r6, [r8, #2]
 800765c:	b276      	sxtb	r6, r6
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
 800765e:	2e00      	cmp	r6, #0
 8007660:	db5d      	blt.n	800771e <main+0x5ee>

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
 8007662:	b303      	cbz	r3, 80076a6 <main+0x576>
 8007664:	f898 c002 	ldrb.w	ip, [r8, #2]
 8007668:	4e5c      	ldr	r6, [pc, #368]	; (80077dc <main+0x6ac>)
 800766a:	f1bc 0f00 	cmp.w	ip, #0
 800766e:	d01a      	beq.n	80076a6 <main+0x576>
        mouse_report.x *= 0.7;
 8007670:	b258      	sxtb	r0, r3
 8007672:	f8cd c004 	str.w	ip, [sp, #4]
 8007676:	f7fd ff3d 	bl	80054f4 <__aeabi_i2d>
 800767a:	a34b      	add	r3, pc, #300	; (adr r3, 80077a8 <main+0x678>)
 800767c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007680:	f7fd ff9e 	bl	80055c0 <__aeabi_dmul>
 8007684:	f7fe f9b4 	bl	80059f0 <__aeabi_d2iz>
        mouse_report.y *= 0.7;
 8007688:	f8dd c004 	ldr.w	ip, [sp, #4]
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
        mouse_report.x *= 0.7;
 800768c:	7070      	strb	r0, [r6, #1]
        mouse_report.y *= 0.7;
 800768e:	fa4f f08c 	sxtb.w	r0, ip
 8007692:	f7fd ff2f 	bl	80054f4 <__aeabi_i2d>
 8007696:	a344      	add	r3, pc, #272	; (adr r3, 80077a8 <main+0x678>)
 8007698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769c:	f7fd ff90 	bl	80055c0 <__aeabi_dmul>
 80076a0:	f7fe f9a6 	bl	80059f0 <__aeabi_d2iz>
 80076a4:	70b0      	strb	r0, [r6, #2]
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
 80076a6:	b27f      	sxtb	r7, r7
 80076a8:	2f00      	cmp	r7, #0
 80076aa:	dd05      	ble.n	80076b8 <main+0x588>
 80076ac:	f001 fbb8 	bl	8008e20 <wheel_unit.lto_priv.41>
 80076b0:	b2c7      	uxtb	r7, r0
 80076b2:	f888 7003 	strb.w	r7, [r8, #3]
 80076b6:	b27f      	sxtb	r7, r7
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
 80076b8:	2f00      	cmp	r7, #0
 80076ba:	db66      	blt.n	800778a <main+0x65a>
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
 80076bc:	fa4f fb8b 	sxtb.w	fp, fp
 80076c0:	f1bb 0f00 	cmp.w	fp, #0
 80076c4:	dd07      	ble.n	80076d6 <main+0x5a6>
 80076c6:	f001 fbab 	bl	8008e20 <wheel_unit.lto_priv.41>
 80076ca:	fa5f fb80 	uxtb.w	fp, r0
 80076ce:	f888 b004 	strb.w	fp, [r8, #4]
 80076d2:	fa4f fb8b 	sxtb.w	fp, fp
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
 80076d6:	f1bb 0f00 	cmp.w	fp, #0
 80076da:	db50      	blt.n	800777e <main+0x64e>

    mousekey_send();
 80076dc:	f001 fc30 	bl	8008f40 <mousekey_send>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
 80076e0:	f000 fc7e 	bl	8007fe0 <host_keyboard_leds>
 80076e4:	4b3e      	ldr	r3, [pc, #248]	; (80077e0 <main+0x6b0>)
 80076e6:	4e3e      	ldr	r6, [pc, #248]	; (80077e0 <main+0x6b0>)
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	4283      	cmp	r3, r0
 80076ec:	d002      	beq.n	80076f4 <main+0x5c4>
        led_status = host_keyboard_leds();
 80076ee:	f000 fc77 	bl	8007fe0 <host_keyboard_leds>
 80076f2:	7030      	strb	r0, [r6, #0]
      mousekey_send();
#endif /* MOUSEKEY_ENABLE */
    }

    keyboard_task();
    chThdSleepMilliseconds(5);
 80076f4:	200a      	movs	r0, #10
 80076f6:	f7ff fa6b 	bl	8006bd0 <chThdSleep>
 80076fa:	e73c      	b.n	8007576 <main+0x446>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80076fc:	7719      	strb	r1, [r3, #28]
 80076fe:	e7fe      	b.n	80076fe <main+0x5ce>
	// also shouldn't power down USB

	// on AVR, this enables the watchdog for 15ms (max), and goes to
	// SLEEP_MODE_PWR_DOWN

	chThdSleepMilliseconds(17);
 8007700:	f7ff fa66 	bl	8006bd0 <chThdSleep>
      print("[s]");
      while(USB_DRIVER.state == USB_SUSPENDED) {
        /* Do this in the suspended state */
        suspend_power_down(); // on AVR this deep sleeps for 15ms
        /* Remote wakeup */
        if((USB_DRIVER.status & 2) && suspend_wakeup_condition()) {
 8007704:	f8b5 307c 	ldrh.w	r3, [r5, #124]	; 0x7c
 8007708:	079a      	lsls	r2, r3, #30
 800770a:	d41d      	bmi.n	8007748 <main+0x618>
  /* Main loop */
  while(true) {

    if(USB_DRIVER.state == USB_SUSPENDED) {
      print("[s]");
      while(USB_DRIVER.state == USB_SUSPENDED) {
 800770c:	7823      	ldrb	r3, [r4, #0]
 800770e:	2022      	movs	r0, #34	; 0x22
 8007710:	2b05      	cmp	r3, #5
 8007712:	d0f5      	beq.n	8007700 <main+0x5d0>
          send_remote_wakeup(&USB_DRIVER);
        }
      }
      /* Woken up */
      // variables has been already cleared by the wakeup hook
      send_keyboard_report();
 8007714:	f001 fc3c 	bl	8008f90 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
      mousekey_send();
 8007718:	f001 fc12 	bl	8008f40 <mousekey_send>
 800771c:	e72f      	b.n	800757e <main+0x44e>
 800771e:	9301      	str	r3, [sp, #4]


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
 8007720:	f001 fbb6 	bl	8008e90 <move_unit.lto_priv.42>
 8007724:	4240      	negs	r0, r0
 8007726:	f888 0002 	strb.w	r0, [r8, #2]
 800772a:	9b01      	ldr	r3, [sp, #4]
 800772c:	e799      	b.n	8007662 <main+0x532>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
        return;

    if (mousekey_repeat != UINT8_MAX)
 800772e:	29ff      	cmp	r1, #255	; 0xff
 8007730:	78d7      	ldrb	r7, [r2, #3]
 8007732:	f892 b004 	ldrb.w	fp, [r2, #4]
 8007736:	f47f af78 	bne.w	800762a <main+0x4fa>
 800773a:	e779      	b.n	8007630 <main+0x500>
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
 800773c:	4a29      	ldr	r2, [pc, #164]	; (80077e4 <main+0x6b4>)
 800773e:	7812      	ldrb	r2, [r2, #0]
 8007740:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007744:	0052      	lsls	r2, r2, #1
 8007746:	e759      	b.n	80075fc <main+0x4cc>
__attribute__ ((weak)) void matrix_power_up(void) {}
__attribute__ ((weak)) void matrix_power_down(void) {}
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
 8007748:	f000 fc52 	bl	8007ff0 <matrix_scan>
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
 800774c:	f89a 3000 	ldrb.w	r3, [sl]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d0db      	beq.n	800770c <main+0x5dc>
  USB0->CTL |= USBx_CTL_RESUME;
  chThdSleepMilliseconds(15);
  USB0->CTL &= ~USBx_CTL_RESUME;
#endif /* KINETIS_USB_USE_USB0 */
#elif defined(STM32F0XX) || defined(STM32F1XX) /* K20x || KL2x */
  STM32_USB->CNTR |= CNTR_RESUME;
 8007754:	4b24      	ldr	r3, [pc, #144]	; (80077e8 <main+0x6b8>)
 8007756:	4a24      	ldr	r2, [pc, #144]	; (80077e8 <main+0x6b8>)
 8007758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  chThdSleepMilliseconds(15);
 800775a:	201e      	movs	r0, #30
  USB0->CTL |= USBx_CTL_RESUME;
  chThdSleepMilliseconds(15);
  USB0->CTL &= ~USBx_CTL_RESUME;
#endif /* KINETIS_USB_USE_USB0 */
#elif defined(STM32F0XX) || defined(STM32F1XX) /* K20x || KL2x */
  STM32_USB->CNTR |= CNTR_RESUME;
 800775c:	f043 0310 	orr.w	r3, r3, #16
 8007760:	6413      	str	r3, [r2, #64]	; 0x40
  chThdSleepMilliseconds(15);
 8007762:	f7ff fa35 	bl	8006bd0 <chThdSleep>
  STM32_USB->CNTR &= ~CNTR_RESUME;
 8007766:	4b20      	ldr	r3, [pc, #128]	; (80077e8 <main+0x6b8>)
 8007768:	4a1f      	ldr	r2, [pc, #124]	; (80077e8 <main+0x6b8>)
 800776a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776c:	f023 0310 	bic.w	r3, r3, #16
 8007770:	6413      	str	r3, [r2, #64]	; 0x40
 8007772:	e7cb      	b.n	800770c <main+0x5dc>
 8007774:	f898 7003 	ldrb.w	r7, [r8, #3]
 8007778:	f898 b004 	ldrb.w	fp, [r8, #4]
 800777c:	e753      	b.n	8007626 <main+0x4f6>
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
 800777e:	f001 fb4f 	bl	8008e20 <wheel_unit.lto_priv.41>
 8007782:	4240      	negs	r0, r0
 8007784:	f888 0004 	strb.w	r0, [r8, #4]
 8007788:	e7a8      	b.n	80076dc <main+0x5ac>
        mouse_report.x *= 0.7;
        mouse_report.y *= 0.7;
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
 800778a:	f001 fb49 	bl	8008e20 <wheel_unit.lto_priv.41>
 800778e:	4240      	negs	r0, r0
 8007790:	f888 0003 	strb.w	r0, [r8, #3]
 8007794:	e792      	b.n	80076bc <main+0x58c>
    if (mousekey_repeat != UINT8_MAX)
        mousekey_repeat++;


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
 8007796:	f001 fb7b 	bl	8008e90 <move_unit.lto_priv.42>
 800779a:	4240      	negs	r0, r0
 800779c:	b2c3      	uxtb	r3, r0
 800779e:	f888 3001 	strb.w	r3, [r8, #1]
 80077a2:	e751      	b.n	8007648 <main+0x518>
 80077a4:	f3af 8000 	nop.w
 80077a8:	66666666 	.word	0x66666666
 80077ac:	3fe66666 	.word	0x3fe66666
 80077b0:	40010c00 	.word	0x40010c00
 80077b4:	20001240 	.word	0x20001240
 80077b8:	200014e0 	.word	0x200014e0
 80077bc:	200012f0 	.word	0x200012f0
 80077c0:	20001548 	.word	0x20001548
 80077c4:	20001218 	.word	0x20001218
 80077c8:	20001454 	.word	0x20001454
 80077cc:	200012e4 	.word	0x200012e4
 80077d0:	20001574 	.word	0x20001574
 80077d4:	200014da 	.word	0x200014da
 80077d8:	20001234 	.word	0x20001234
 80077dc:	20001568 	.word	0x20001568
 80077e0:	2000128c 	.word	0x2000128c
 80077e4:	20001238 	.word	0x20001238
 80077e8:	40005c00 	.word	0x40005c00
 80077ec:	200012ec 	.word	0x200012ec
 80077f0:	10624dd3 	.word	0x10624dd3
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
 80077f4:	2300      	movs	r3, #0
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
 80077f6:	f002 0201 	and.w	r2, r2, #1
 80077fa:	f88d 2012 	strb.w	r2, [sp, #18]
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
 80077fe:	f88d 3010 	strb.w	r3, [sp, #16]
 8007802:	f88d 3011 	strb.w	r3, [sp, #17]
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
 8007806:	f001 fb83 	bl	8008f10 <timer_read>
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
 800780a:	f040 0001 	orr.w	r0, r0, #1
 800780e:	ab04      	add	r3, sp, #16
 8007810:	f8ad 0014 	strh.w	r0, [sp, #20]
 8007814:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007818:	f000 f80a 	bl	8007830 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
 800781c:	7833      	ldrb	r3, [r6, #0]
 800781e:	f083 0301 	eor.w	r3, r3, #1
 8007822:	7033      	strb	r3, [r6, #0]
 8007824:	e6ca      	b.n	80075bc <main+0x48c>
 8007826:	bf00      	nop
 8007828:	f3af 8000 	nop.w
 800782c:	f3af 8000 	nop.w

08007830 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
 8007830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007834:	b08c      	sub	sp, #48	; 0x30
 8007836:	e88d 0003 	stmia.w	sp, {r0, r1}
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
 800783a:	2200      	movs	r2, #0
 800783c:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8007840:	9207      	str	r2, [sp, #28]
 8007842:	9006      	str	r0, [sp, #24]
 8007844:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007848:	ab06      	add	r3, sp, #24
 800784a:	ac08      	add	r4, sp, #32
 800784c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007850:	e884 0003 	stmia.w	r4, {r0, r1}
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    if (process_tapping(&record)) {
 8007854:	4620      	mov	r0, r4
 8007856:	f000 fc2b 	bl	80080b0 <process_tapping.lto_priv.43>
 800785a:	4607      	mov	r7, r0
 800785c:	b328      	cbz	r0, 80078aa <action_exec+0x7a>

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
 800785e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8007862:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8007866:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 800786a:	b9cb      	cbnz	r3, 80078a0 <action_exec+0x70>
 800786c:	4e2d      	ldr	r6, [pc, #180]	; (8007924 <action_exec+0xf4>)
 800786e:	4d2e      	ldr	r5, [pc, #184]	; (8007928 <action_exec+0xf8>)
 8007870:	f896 8000 	ldrb.w	r8, [r6]
 8007874:	782c      	ldrb	r4, [r5, #0]

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
 8007876:	4544      	cmp	r4, r8
 8007878:	d00f      	beq.n	800789a <action_exec+0x6a>
 800787a:	4f2c      	ldr	r7, [pc, #176]	; (800792c <action_exec+0xfc>)
 800787c:	e007      	b.n	800788e <action_exec+0x5e>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
 800787e:	782c      	ldrb	r4, [r5, #0]

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
 8007880:	7833      	ldrb	r3, [r6, #0]
 8007882:	3401      	adds	r4, #1
 8007884:	f004 0407 	and.w	r4, r4, #7
 8007888:	42a3      	cmp	r3, r4
 800788a:	702c      	strb	r4, [r5, #0]
 800788c:	d005      	beq.n	800789a <action_exec+0x6a>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
 800788e:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
 8007892:	f000 fc0d 	bl	80080b0 <process_tapping.lto_priv.43>
 8007896:	2800      	cmp	r0, #0
 8007898:	d1f1      	bne.n	800787e <action_exec+0x4e>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
 800789a:	b00c      	add	sp, #48	; 0x30
 800789c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a0:	f88d 1008 	strb.w	r1, [sp, #8]
 80078a4:	f88d 2009 	strb.w	r2, [sp, #9]
 80078a8:	e7e0      	b.n	800786c <action_exec+0x3c>
 80078aa:	f89d 6020 	ldrb.w	r6, [sp, #32]
 80078ae:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
 80078b2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80078b6:	ab0a      	add	r3, sp, #40	; 0x28
 80078b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80078bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80078c0:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 80078c4:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 80078c8:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80078cc:	2a00      	cmp	r2, #0
 80078ce:	d0cd      	beq.n	800786c <action_exec+0x3c>
 80078d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078d4:	f88d 6010 	strb.w	r6, [sp, #16]
 80078d8:	f88d 5011 	strb.w	r5, [sp, #17]
 80078dc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80078e0:	4291      	cmp	r1, r2
 80078e2:	d0c3      	beq.n	800786c <action_exec+0x3c>
{
    if (IS_NOEVENT(record.event)) {
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
 80078e4:	4e0f      	ldr	r6, [pc, #60]	; (8007924 <action_exec+0xf4>)
 80078e6:	4d10      	ldr	r5, [pc, #64]	; (8007928 <action_exec+0xf8>)
 80078e8:	7832      	ldrb	r2, [r6, #0]
 80078ea:	782c      	ldrb	r4, [r5, #0]
 80078ec:	f102 0801 	add.w	r8, r2, #1
 80078f0:	f008 0807 	and.w	r8, r8, #7
 80078f4:	45a0      	cmp	r8, r4
 80078f6:	d00d      	beq.n	8007914 <action_exec+0xe4>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
 80078f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80078fc:	4f0b      	ldr	r7, [pc, #44]	; (800792c <action_exec+0xfc>)
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
 80078fe:	fa5f f888 	uxtb.w	r8, r8
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
 8007902:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
 8007906:	f886 8000 	strb.w	r8, [r6]
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
 800790a:	e887 0003 	stmia.w	r7, {r0, r1}
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
 800790e:	f001 fbb7 	bl	8009080 <debug_waiting_buffer.lto_priv.44>
 8007912:	e7b0      	b.n	8007876 <action_exec+0x46>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
 8007914:	f000 fddc 	bl	80084d0 <clear_keyboard>
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
 8007918:	4b05      	ldr	r3, [pc, #20]	; (8007930 <action_exec+0x100>)
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
 800791a:	7037      	strb	r7, [r6, #0]
    waiting_buffer_tail = 0;
 800791c:	702f      	strb	r7, [r5, #0]
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
 800791e:	601f      	str	r7, [r3, #0]
 8007920:	605f      	str	r7, [r3, #4]
 8007922:	e7ba      	b.n	800789a <action_exec+0x6a>
 8007924:	20001544 	.word	0x20001544
 8007928:	200014d9 	.word	0x200014d9
 800792c:	200014f4 	.word	0x200014f4
 8007930:	20001538 	.word	0x20001538
 8007934:	f3af 8000 	nop.w
 8007938:	f3af 8000 	nop.w
 800793c:	f3af 8000 	nop.w

08007940 <host_consumer_send>:
    (*driver->send_system)(report);
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
 8007940:	4b05      	ldr	r3, [pc, #20]	; (8007958 <host_consumer_send+0x18>)
 8007942:	8819      	ldrh	r1, [r3, #0]
 8007944:	4281      	cmp	r1, r0
 8007946:	d005      	beq.n	8007954 <host_consumer_send+0x14>
    last_consumer_report = report;

    if (!driver) return;
 8007948:	4904      	ldr	r1, [pc, #16]	; (800795c <host_consumer_send+0x1c>)
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    last_consumer_report = report;
 800794a:	8018      	strh	r0, [r3, #0]

    if (!driver) return;
 800794c:	680b      	ldr	r3, [r1, #0]
 800794e:	b10b      	cbz	r3, 8007954 <host_consumer_send+0x14>
    (*driver->send_consumer)(report);
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	4718      	bx	r3
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	200012e8 	.word	0x200012e8
 800795c:	20001548 	.word	0x20001548

08007960 <host_system_send>:
    (*driver->send_mouse)(report);
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
 8007960:	4b05      	ldr	r3, [pc, #20]	; (8007978 <host_system_send+0x18>)
 8007962:	8819      	ldrh	r1, [r3, #0]
 8007964:	4281      	cmp	r1, r0
 8007966:	d005      	beq.n	8007974 <host_system_send+0x14>
    last_system_report = report;

    if (!driver) return;
 8007968:	4904      	ldr	r1, [pc, #16]	; (800797c <host_system_send+0x1c>)
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    last_system_report = report;
 800796a:	8018      	strh	r0, [r3, #0]

    if (!driver) return;
 800796c:	680b      	ldr	r3, [r1, #0]
 800796e:	b10b      	cbz	r3, 8007974 <host_system_send+0x14>
    (*driver->send_system)(report);
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	4718      	bx	r3
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	200012ea 	.word	0x200012ea
 800797c:	20001548 	.word	0x20001548

08007980 <process_action>:

void process_action(keyrecord_t *record)
{
 8007980:	4603      	mov	r3, r0
 8007982:	b5f0      	push	{r4, r5, r6, r7, lr}
    keyevent_t event = record->event;
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
 8007984:	7985      	ldrb	r5, [r0, #6]
 8007986:	889a      	ldrh	r2, [r3, #4]
#endif
}

void process_action(keyrecord_t *record)
{
    keyevent_t event = record->event;
 8007988:	6800      	ldr	r0, [r0, #0]
    }
#endif
}

void process_action(keyrecord_t *record)
{
 800798a:	b087      	sub	sp, #28
    keyevent_t event = record->event;
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
 800798c:	f3c5 1503 	ubfx	r5, r5, #4, #4
#endif
}

void process_action(keyrecord_t *record)
{
    keyevent_t event = record->event;
 8007990:	9002      	str	r0, [sp, #8]
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
 8007992:	b2ef      	uxtb	r7, r5
#endif
}

void process_action(keyrecord_t *record)
{
    keyevent_t event = record->event;
 8007994:	7818      	ldrb	r0, [r3, #0]
 8007996:	7859      	ldrb	r1, [r3, #1]
 8007998:	789e      	ldrb	r6, [r3, #2]
 800799a:	b332      	cbz	r2, 80079ea <process_action+0x6a>
 800799c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80079a0:	f88d 0010 	strb.w	r0, [sp, #16]
 80079a4:	f88d 1011 	strb.w	r1, [sp, #17]
 80079a8:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 80079ac:	4294      	cmp	r4, r2
 80079ae:	d01c      	beq.n	80079ea <process_action+0x6a>
    uint8_t tap_count = record->tap.count;
#endif

    if (IS_NOEVENT(event)) { return; }

    action_t action = layer_switch_get_action(event.key);
 80079b0:	f88d 0008 	strb.w	r0, [sp, #8]
 80079b4:	f88d 1009 	strb.w	r1, [sp, #9]
 80079b8:	9802      	ldr	r0, [sp, #8]
 80079ba:	461c      	mov	r4, r3
 80079bc:	f001 fb18 	bl	8008ff0 <layer_switch_get_action>
    dprint(" layer_state: "); layer_debug();
    dprint(" default_layer_state: "); default_layer_debug();
#endif
    dprintln();

    switch (action.kind.id) {
 80079c0:	f3c0 3303 	ubfx	r3, r0, #12, #4
 80079c4:	2b0b      	cmp	r3, #11
 80079c6:	d810      	bhi.n	80079ea <process_action+0x6a>
 80079c8:	e8df f003 	tbb	[pc, r3]
 80079cc:	42422d2d 	.word	0x42422d2d
 80079d0:	0f0f6e5d 	.word	0x0f0f6e5d
 80079d4:	11110fab 	.word	0x11110fab
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
 80079d8:	2e00      	cmp	r6, #0
 80079da:	f000 81d4 	beq.w	8007d86 <process_action+0x406>
                            if (tap_count == 0) {
 80079de:	2f00      	cmp	r7, #0
 80079e0:	d04d      	beq.n	8007a7e <process_action+0xfe>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
 80079e2:	2f01      	cmp	r7, #1
 80079e4:	d14b      	bne.n	8007a7e <process_action+0xfe>

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
 80079e6:	4ac6      	ldr	r2, [pc, #792]	; (8007d00 <process_action+0x380>)
 80079e8:	7013      	strb	r3, [r2, #0]
            break;
#endif
        default:
            break;
    }
}
 80079ea:	b007      	add	sp, #28
 80079ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
 80079ee:	b2c4      	uxtb	r4, r0
 80079f0:	f1a4 03e0 	sub.w	r3, r4, #224	; 0xe0
 80079f4:	2b13      	cmp	r3, #19
 80079f6:	f200 81ba 	bhi.w	8007d6e <process_action+0x3ee>
 80079fa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80079fe:	00d4      	.short	0x00d4
 8007a00:	00d400d4 	.word	0x00d400d4
 8007a04:	00d400d4 	.word	0x00d400d4
 8007a08:	00d400d4 	.word	0x00d400d4
 8007a0c:	00d400d4 	.word	0x00d400d4
 8007a10:	00d400d4 	.word	0x00d400d4
 8007a14:	00d400d4 	.word	0x00d400d4
 8007a18:	00d400d4 	.word	0x00d400d4
 8007a1c:	00e600d4 	.word	0x00e600d4
 8007a20:	00c300cb 	.word	0x00c300cb
 8007a24:	00b9      	.short	0x00b9
    switch (action.kind.id) {
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 8007a26:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8007a2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f040 80da 	bne.w	8007be8 <process_action+0x268>
 8007a34:	f3c0 2403 	ubfx	r4, r0, #8, #4
                                                                action.key.mods<<4;
                if (event.pressed) {
 8007a38:	2e00      	cmp	r6, #0
 8007a3a:	f000 816d 	beq.w	8007d18 <process_action+0x398>
                    if (mods) {
 8007a3e:	2c00      	cmp	r4, #0
 8007a40:	f040 8179 	bne.w	8007d36 <process_action+0x3b6>
                        add_weak_mods(mods);
                        send_keyboard_report();
                    }
                    register_code(action.key.code);
 8007a44:	b2c0      	uxtb	r0, r0
            break;
#endif
        default:
            break;
    }
}
 8007a46:	b007      	add	sp, #28
 8007a48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
 8007a4c:	f000 bda0 	b.w	8008590 <register_code>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 8007a50:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8007a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a58:	2b20      	cmp	r3, #32
 8007a5a:	bf14      	ite	ne
 8007a5c:	0903      	lsrne	r3, r0, #4
 8007a5e:	f3c0 2303 	ubfxeq	r3, r0, #8, #4
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
 8007a62:	b2c0      	uxtb	r0, r0
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 8007a64:	bf18      	it	ne
 8007a66:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	d0b4      	beq.n	80079d8 <process_action+0x58>
 8007a6e:	2801      	cmp	r0, #1
 8007a70:	f040 812e 	bne.w	8007cd0 <process_action+0x350>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
 8007a74:	2e00      	cmp	r6, #0
 8007a76:	f000 8181 	beq.w	8007d7c <process_action+0x3fc>
                            if (tap_count <= TAPPING_TOGGLE) {
 8007a7a:	2f05      	cmp	r7, #5
 8007a7c:	d8b5      	bhi.n	80079ea <process_action+0x6a>
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d0b3      	beq.n	80079ea <process_action+0x6a>
        add_mods(mods);
 8007a82:	4618      	mov	r0, r3
 8007a84:	e09a      	b.n	8007bbc <process_action+0x23c>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
 8007a86:	f3c0 2381 	ubfx	r3, r0, #10, #2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 8130 	beq.w	8007cf0 <process_action+0x370>
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d1aa      	bne.n	80079ea <process_action+0x6a>
                    } else {
                        host_system_send(0);
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
 8007a94:	2e00      	cmp	r6, #0
 8007a96:	f000 8174 	beq.w	8007d82 <process_action+0x402>
                        host_consumer_send(action.usage.code);
 8007a9a:	f3c0 0009 	ubfx	r0, r0, #0, #10
            break;
#endif
        default:
            break;
    }
}
 8007a9e:	b007      	add	sp, #28
 8007aa0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
 8007aa4:	f7ff bf4c 	b.w	8007940 <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
 8007aa8:	b2c0      	uxtb	r0, r0
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
 8007aaa:	2e00      	cmp	r6, #0
 8007aac:	f000 80c8 	beq.w	8007c40 <process_action+0x2c0>
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
 8007ab0:	28f0      	cmp	r0, #240	; 0xf0
 8007ab2:	f000 8190 	beq.w	8007dd6 <process_action+0x456>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
 8007ab6:	28f1      	cmp	r0, #241	; 0xf1
 8007ab8:	f000 81c8 	beq.w	8007e4c <process_action+0x4cc>
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
 8007abc:	28f2      	cmp	r0, #242	; 0xf2
 8007abe:	f000 81df 	beq.w	8007e80 <process_action+0x500>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
 8007ac2:	28f3      	cmp	r0, #243	; 0xf3
 8007ac4:	f000 81f3 	beq.w	8007eae <process_action+0x52e>
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
 8007ac8:	28f9      	cmp	r0, #249	; 0xf9
 8007aca:	f000 8201 	beq.w	8007ed0 <process_action+0x550>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
 8007ace:	28fa      	cmp	r0, #250	; 0xfa
 8007ad0:	f000 8211 	beq.w	8007ef6 <process_action+0x576>
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
 8007ad4:	28fb      	cmp	r0, #251	; 0xfb
 8007ad6:	f000 8219 	beq.w	8007f0c <process_action+0x58c>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
 8007ada:	28fc      	cmp	r0, #252	; 0xfc
 8007adc:	f000 8211 	beq.w	8007f02 <process_action+0x582>
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
 8007ae0:	28f4      	cmp	r0, #244	; 0xf4
 8007ae2:	f000 8220 	beq.w	8007f26 <process_action+0x5a6>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
 8007ae6:	28f5      	cmp	r0, #245	; 0xf5
 8007ae8:	f000 8230 	beq.w	8007f4c <process_action+0x5cc>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
 8007aec:	28f6      	cmp	r0, #246	; 0xf6
 8007aee:	f000 8227 	beq.w	8007f40 <process_action+0x5c0>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
 8007af2:	28f7      	cmp	r0, #247	; 0xf7
 8007af4:	f000 8237 	beq.w	8007f66 <process_action+0x5e6>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
 8007af8:	28f8      	cmp	r0, #248	; 0xf8
 8007afa:	f000 825e 	beq.w	8007fba <process_action+0x63a>
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
 8007afe:	28fd      	cmp	r0, #253	; 0xfd
 8007b00:	f000 8255 	beq.w	8007fae <process_action+0x62e>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
 8007b04:	28fe      	cmp	r0, #254	; 0xfe
 8007b06:	f000 824c 	beq.w	8007fa2 <process_action+0x622>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
 8007b0a:	28ff      	cmp	r0, #255	; 0xff
 8007b0c:	d104      	bne.n	8007b18 <process_action+0x198>
 8007b0e:	4a7d      	ldr	r2, [pc, #500]	; (8007d04 <process_action+0x384>)
 8007b10:	7813      	ldrb	r3, [r2, #0]
 8007b12:	f043 0304 	orr.w	r3, r3, #4
 8007b16:	7013      	strb	r3, [r2, #0]
            break;
#endif
        default:
            break;
    }
}
 8007b18:	b007      	add	sp, #28
 8007b1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
 8007b1e:	f001 ba0f 	b.w	8008f40 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
 8007b22:	f410 7f40 	tst.w	r0, #768	; 0x300
 8007b26:	d163      	bne.n	8007bf0 <process_action+0x270>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
 8007b28:	2e00      	cmp	r6, #0
 8007b2a:	f47f af5e 	bne.w	80079ea <process_action+0x6a>
                    uint8_t shift = action.layer_bitop.part*4;
 8007b2e:	08c3      	lsrs	r3, r0, #3
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 8007b30:	f000 020f 	and.w	r2, r0, #15
 8007b34:	f003 031c 	and.w	r3, r3, #28
 8007b38:	fa02 f403 	lsl.w	r4, r2, r3
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 8007b3c:	06c2      	lsls	r2, r0, #27
 8007b3e:	d502      	bpl.n	8007b46 <process_action+0x1c6>
 8007b40:	260f      	movs	r6, #15
 8007b42:	409e      	lsls	r6, r3
 8007b44:	43f6      	mvns	r6, r6
                    switch (action.layer_bitop.op) {
 8007b46:	f3c0 2081 	ubfx	r0, r0, #10, #2
 8007b4a:	2802      	cmp	r0, #2
 8007b4c:	f000 816f 	beq.w	8007e2e <process_action+0x4ae>
 8007b50:	2803      	cmp	r0, #3
 8007b52:	f000 8161 	beq.w	8007e18 <process_action+0x498>
 8007b56:	2801      	cmp	r0, #1

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
 8007b58:	4a6b      	ldr	r2, [pc, #428]	; (8007d08 <process_action+0x388>)
 8007b5a:	f000 8158 	beq.w	8007e0e <process_action+0x48e>
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
 8007b5e:	6813      	ldr	r3, [r2, #0]
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
 8007b60:	4326      	orrs	r6, r4
 8007b62:	401e      	ands	r6, r3

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
 8007b64:	6016      	str	r6, [r2, #0]
            break;
#endif
        default:
            break;
    }
}
 8007b66:	b007      	add	sp, #28
 8007b68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
 8007b6c:	f000 bc80 	b.w	8008470 <clear_keyboard_but_mods>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
 8007b70:	2e00      	cmp	r6, #0
 8007b72:	f000 8149 	beq.w	8007e08 <process_action+0x488>
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
 8007b76:	f3c0 2004 	ubfx	r0, r0, #8, #5
 8007b7a:	2301      	movs	r3, #1

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 8007b7c:	4a63      	ldr	r2, [pc, #396]	; (8007d0c <process_action+0x38c>)
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
 8007b7e:	4083      	lsls	r3, r0

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 8007b80:	6013      	str	r3, [r2, #0]
 8007b82:	e7f0      	b.n	8007b66 <process_action+0x1e6>
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
 8007b84:	b146      	cbz	r6, 8007b98 <process_action+0x218>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
 8007b86:	f3c0 2004 	ubfx	r0, r0, #8, #5
            break;
#endif
        default:
            break;
    }
}
 8007b8a:	b007      	add	sp, #28
 8007b8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
 8007b90:	f001 ba56 	b.w	8009040 <layer_off>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
 8007b94:	2e00      	cmp	r6, #0
 8007b96:	d0f6      	beq.n	8007b86 <process_action+0x206>
 8007b98:	f3c0 2004 	ubfx	r0, r0, #8, #5
            break;
#endif
        default:
            break;
    }
}
 8007b9c:	b007      	add	sp, #28
 8007b9e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
 8007ba2:	f001 ba5d 	b.w	8009060 <layer_on>
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
 8007ba6:	f3c0 2004 	ubfx	r0, r0, #8, #5
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
 8007baa:	2e00      	cmp	r6, #0
 8007bac:	f000 8123 	beq.w	8007df6 <process_action+0x476>
                        layer_on(action.layer_tap.val);
 8007bb0:	f001 fa56 	bl	8009060 <layer_on>
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
 8007bb4:	f014 000f 	ands.w	r0, r4, #15
 8007bb8:	f43f af17 	beq.w	80079ea <process_action+0x6a>
        add_mods(mods);
 8007bbc:	f001 f9e0 	bl	8008f80 <add_mods>
            break;
#endif
        default:
            break;
    }
}
 8007bc0:	b007      	add	sp, #28
 8007bc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

void register_mods(uint8_t mods)
{
    if (mods) {
        add_mods(mods);
        send_keyboard_report();
 8007bc6:	f001 b9e3 	b.w	8008f90 <send_keyboard_report>
                        unregister_mods(action.layer_tap.code & 0x0f);
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
 8007bca:	2e00      	cmp	r6, #0
 8007bcc:	f000 810f 	beq.w	8007dee <process_action+0x46e>
                        if (tap_count < TAPPING_TOGGLE) {
 8007bd0:	2f04      	cmp	r7, #4
 8007bd2:	f63f af0a 	bhi.w	80079ea <process_action+0x6a>
 8007bd6:	494d      	ldr	r1, [pc, #308]	; (8007d0c <process_action+0x38c>)
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
 8007bd8:	f3c0 2004 	ubfx	r0, r0, #8, #5
 8007bdc:	680b      	ldr	r3, [r1, #0]
 8007bde:	2201      	movs	r2, #1
 8007be0:	4082      	lsls	r2, r0
 8007be2:	4053      	eors	r3, r2

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 8007be4:	600b      	str	r3, [r1, #0]
 8007be6:	e7be      	b.n	8007b66 <process_action+0x1e6>
    switch (action.kind.id) {
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 8007be8:	0904      	lsrs	r4, r0, #4
 8007bea:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8007bee:	e723      	b.n	8007a38 <process_action+0xb8>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 8007bf0:	2e00      	cmp	r6, #0
 8007bf2:	f000 809d 	beq.w	8007d30 <process_action+0x3b0>
 8007bf6:	f3c0 2300 	ubfx	r3, r0, #8, #1
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f43f aef5 	beq.w	80079ea <process_action+0x6a>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
 8007c00:	08c1      	lsrs	r1, r0, #3
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 8007c02:	f000 030f 	and.w	r3, r0, #15
 8007c06:	f001 011c 	and.w	r1, r1, #28
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 8007c0a:	f000 0210 	and.w	r2, r0, #16
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 8007c0e:	fa03 f401 	lsl.w	r4, r3, r1
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 8007c12:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8007c16:	b112      	cbz	r2, 8007c1e <process_action+0x29e>
 8007c18:	230f      	movs	r3, #15
 8007c1a:	408b      	lsls	r3, r1
 8007c1c:	43db      	mvns	r3, r3
                    switch (action.layer_bitop.op) {
 8007c1e:	f3c0 2081 	ubfx	r0, r0, #10, #2
 8007c22:	2802      	cmp	r0, #2
 8007c24:	f000 8126 	beq.w	8007e74 <process_action+0x4f4>
 8007c28:	2803      	cmp	r0, #3
 8007c2a:	f000 8119 	beq.w	8007e60 <process_action+0x4e0>
 8007c2e:	2801      	cmp	r0, #1
 8007c30:	4936      	ldr	r1, [pc, #216]	; (8007d0c <process_action+0x38c>)
 8007c32:	f000 8110 	beq.w	8007e56 <process_action+0x4d6>
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
 8007c36:	680a      	ldr	r2, [r1, #0]
                        case OP_BIT_AND: layer_and(bits | mask); break;
 8007c38:	4323      	orrs	r3, r4
 8007c3a:	4013      	ands	r3, r2

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 8007c3c:	600b      	str	r3, [r1, #0]
 8007c3e:	e792      	b.n	8007b66 <process_action+0x1e6>
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
 8007c40:	28f0      	cmp	r0, #240	; 0xf0
 8007c42:	f000 80ac 	beq.w	8007d9e <process_action+0x41e>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
 8007c46:	28f1      	cmp	r0, #241	; 0xf1
 8007c48:	f000 80b7 	beq.w	8007dba <process_action+0x43a>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
 8007c4c:	28f2      	cmp	r0, #242	; 0xf2
 8007c4e:	f000 80ba 	beq.w	8007dc6 <process_action+0x446>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
 8007c52:	28f3      	cmp	r0, #243	; 0xf3
 8007c54:	f000 80c5 	beq.w	8007de2 <process_action+0x462>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
 8007c58:	28f9      	cmp	r0, #249	; 0xf9
 8007c5a:	f000 80ee 	beq.w	8007e3a <process_action+0x4ba>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
 8007c5e:	28fa      	cmp	r0, #250	; 0xfa
 8007c60:	f000 8114 	beq.w	8007e8c <process_action+0x50c>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
 8007c64:	28fb      	cmp	r0, #251	; 0xfb
 8007c66:	f000 8118 	beq.w	8007e9a <process_action+0x51a>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
 8007c6a:	28fc      	cmp	r0, #252	; 0xfc
 8007c6c:	f000 8124 	beq.w	8007eb8 <process_action+0x538>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
 8007c70:	28f4      	cmp	r0, #244	; 0xf4
 8007c72:	f000 8132 	beq.w	8007eda <process_action+0x55a>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
 8007c76:	28f5      	cmp	r0, #245	; 0xf5
 8007c78:	f000 8136 	beq.w	8007ee8 <process_action+0x568>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
 8007c7c:	28f6      	cmp	r0, #246	; 0xf6
 8007c7e:	f000 814b 	beq.w	8007f18 <process_action+0x598>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
 8007c82:	28f7      	cmp	r0, #247	; 0xf7
 8007c84:	f000 8155 	beq.w	8007f32 <process_action+0x5b2>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
 8007c88:	28f8      	cmp	r0, #248	; 0xf8
 8007c8a:	f000 8165 	beq.w	8007f58 <process_action+0x5d8>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
 8007c8e:	28fd      	cmp	r0, #253	; 0xfd
 8007c90:	f000 8177 	beq.w	8007f82 <process_action+0x602>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
 8007c94:	28fe      	cmp	r0, #254	; 0xfe
 8007c96:	f000 816c 	beq.w	8007f72 <process_action+0x5f2>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
 8007c9a:	28ff      	cmp	r0, #255	; 0xff
 8007c9c:	f000 8179 	beq.w	8007f92 <process_action+0x612>
 8007ca0:	4b1b      	ldr	r3, [pc, #108]	; (8007d10 <process_action+0x390>)
 8007ca2:	785a      	ldrb	r2, [r3, #1]

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
 8007ca4:	2a00      	cmp	r2, #0
 8007ca6:	f47f af37 	bne.w	8007b18 <process_action+0x198>
 8007caa:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8007cae:	2a00      	cmp	r2, #0
 8007cb0:	f47f af32 	bne.w	8007b18 <process_action+0x198>
 8007cb4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8007cb8:	4a15      	ldr	r2, [pc, #84]	; (8007d10 <process_action+0x390>)
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f47f af2c 	bne.w	8007b18 <process_action+0x198>
 8007cc0:	f992 3004 	ldrsb.w	r3, [r2, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f47f af27 	bne.w	8007b18 <process_action+0x198>
        mousekey_repeat = 0;
 8007cca:	4a12      	ldr	r2, [pc, #72]	; (8007d14 <process_action+0x394>)
 8007ccc:	7013      	strb	r3, [r2, #0]
 8007cce:	e723      	b.n	8007b18 <process_action+0x198>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
 8007cd0:	2e00      	cmp	r6, #0
 8007cd2:	d03b      	beq.n	8007d4c <process_action+0x3cc>
                            if (tap_count > 0) {
 8007cd4:	2f00      	cmp	r7, #0
 8007cd6:	f43f aed2 	beq.w	8007a7e <process_action+0xfe>
                                if (record->tap.interrupted) {
 8007cda:	79a2      	ldrb	r2, [r4, #6]
 8007cdc:	07d5      	lsls	r5, r2, #31
 8007cde:	f57f aeb2 	bpl.w	8007a46 <process_action+0xc6>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
 8007ce2:	f36f 1207 	bfc	r2, #4, #4
 8007ce6:	71a2      	strb	r2, [r4, #6]
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f43f ae7e 	beq.w	80079ea <process_action+0x6a>
 8007cee:	e6c8      	b.n	8007a82 <process_action+0x102>
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
 8007cf0:	b356      	cbz	r6, 8007d48 <process_action+0x3c8>
                        host_system_send(action.usage.code);
 8007cf2:	f3c0 0009 	ubfx	r0, r0, #0, #10
            break;
#endif
        default:
            break;
    }
}
 8007cf6:	b007      	add	sp, #28
 8007cf8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
 8007cfc:	f7ff be30 	b.w	8007960 <host_system_send>
 8007d00:	200014db 	.word	0x200014db
 8007d04:	200012fc 	.word	0x200012fc
 8007d08:	20001570 	.word	0x20001570
 8007d0c:	200012f8 	.word	0x200012f8
 8007d10:	20001568 	.word	0x20001568
 8007d14:	200014da 	.word	0x200014da
                        add_weak_mods(mods);
                        send_keyboard_report();
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
 8007d18:	b2c0      	uxtb	r0, r0
 8007d1a:	f000 fbe1 	bl	80084e0 <unregister_code>
                    if (mods) {
 8007d1e:	2c00      	cmp	r4, #0
 8007d20:	f43f ae63 	beq.w	80079ea <process_action+0x6a>
void clear_mods(void) { real_mods = 0; }

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 8007d24:	4aa8      	ldr	r2, [pc, #672]	; (8007fc8 <process_action+0x648>)
 8007d26:	7813      	ldrb	r3, [r2, #0]
 8007d28:	ea23 0404 	bic.w	r4, r3, r4
 8007d2c:	7014      	strb	r4, [r2, #0]
 8007d2e:	e747      	b.n	8007bc0 <process_action+0x240>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 8007d30:	f3c0 2340 	ubfx	r3, r0, #9, #1
 8007d34:	e761      	b.n	8007bfa <process_action+0x27a>
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 8007d36:	4aa4      	ldr	r2, [pc, #656]	; (8007fc8 <process_action+0x648>)
 8007d38:	9001      	str	r0, [sp, #4]
 8007d3a:	7813      	ldrb	r3, [r2, #0]
 8007d3c:	431c      	orrs	r4, r3
 8007d3e:	7014      	strb	r4, [r2, #0]
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
                                                                action.key.mods<<4;
                if (event.pressed) {
                    if (mods) {
                        add_weak_mods(mods);
                        send_keyboard_report();
 8007d40:	f001 f926 	bl	8008f90 <send_keyboard_report>
 8007d44:	9801      	ldr	r0, [sp, #4]
 8007d46:	e67d      	b.n	8007a44 <process_action+0xc4>
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
 8007d48:	4630      	mov	r0, r6
 8007d4a:	e7d4      	b.n	8007cf6 <process_action+0x376>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
 8007d4c:	b957      	cbnz	r7, 8007d64 <process_action+0x3e4>
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f43f ae4b 	beq.w	80079ea <process_action+0x6a>
        del_mods(mods);
 8007d54:	4618      	mov	r0, r3
 8007d56:	f001 f90b 	bl	8008f70 <del_mods>
 8007d5a:	e731      	b.n	8007bc0 <process_action+0x240>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
 8007d5c:	2f00      	cmp	r7, #0
 8007d5e:	f43f af12 	beq.w	8007b86 <process_action+0x206>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
 8007d62:	4620      	mov	r0, r4
            break;
#endif
        default:
            break;
    }
}
 8007d64:	b007      	add	sp, #28
 8007d66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
 8007d6a:	f000 bbb9 	b.w	80084e0 <unregister_code>
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
 8007d6e:	2e00      	cmp	r6, #0
 8007d70:	d0f4      	beq.n	8007d5c <process_action+0x3dc>
                        if (tap_count > 0) {
 8007d72:	2f00      	cmp	r7, #0
 8007d74:	f43f af10 	beq.w	8007b98 <process_action+0x218>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
 8007d78:	4620      	mov	r0, r4
 8007d7a:	e664      	b.n	8007a46 <process_action+0xc6>
                        if (event.pressed) {
                            if (tap_count <= TAPPING_TOGGLE) {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
 8007d7c:	2f04      	cmp	r7, #4
 8007d7e:	d9e6      	bls.n	8007d4e <process_action+0x3ce>
 8007d80:	e633      	b.n	80079ea <process_action+0x6a>
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
 8007d82:	4630      	mov	r0, r6
 8007d84:	e68b      	b.n	8007a9e <process_action+0x11e>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
 8007d86:	2f00      	cmp	r7, #0
 8007d88:	f000 809c 	beq.w	8007ec4 <process_action+0x544>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
 8007d8c:	2f01      	cmp	r7, #1
 8007d8e:	f43f ae2c 	beq.w	80079ea <process_action+0x6a>
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
 8007d92:	4a8e      	ldr	r2, [pc, #568]	; (8007fcc <process_action+0x64c>)
 8007d94:	7016      	strb	r6, [r2, #0]
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f43f ae27 	beq.w	80079ea <process_action+0x6a>
 8007d9c:	e7da      	b.n	8007d54 <process_action+0x3d4>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
 8007d9e:	4b8c      	ldr	r3, [pc, #560]	; (8007fd0 <process_action+0x650>)
 8007da0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8007da4:	2a00      	cmp	r2, #0
 8007da6:	f6bf af7c 	bge.w	8007ca2 <process_action+0x322>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
 8007daa:	f993 2001 	ldrsb.w	r2, [r3, #1]
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
 8007dae:	2100      	movs	r1, #0
 8007db0:	7099      	strb	r1, [r3, #2]
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
 8007db2:	2a00      	cmp	r2, #0
 8007db4:	f43f af7e 	beq.w	8007cb4 <process_action+0x334>
 8007db8:	e6ae      	b.n	8007b18 <process_action+0x198>
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
 8007dba:	4b85      	ldr	r3, [pc, #532]	; (8007fd0 <process_action+0x650>)
 8007dbc:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8007dc0:	2a00      	cmp	r2, #0
 8007dc2:	dcf2      	bgt.n	8007daa <process_action+0x42a>
 8007dc4:	e76d      	b.n	8007ca2 <process_action+0x322>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
 8007dc6:	4b82      	ldr	r3, [pc, #520]	; (8007fd0 <process_action+0x650>)
 8007dc8:	785a      	ldrb	r2, [r3, #1]
 8007dca:	0611      	lsls	r1, r2, #24
 8007dcc:	f57f af6a 	bpl.w	8007ca4 <process_action+0x324>
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	705a      	strb	r2, [r3, #1]
 8007dd4:	e769      	b.n	8007caa <process_action+0x32a>
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
 8007dd6:	f001 f85b 	bl	8008e90 <move_unit.lto_priv.42>
 8007dda:	4b7d      	ldr	r3, [pc, #500]	; (8007fd0 <process_action+0x650>)
 8007ddc:	4240      	negs	r0, r0
 8007dde:	7098      	strb	r0, [r3, #2]
 8007de0:	e69a      	b.n	8007b18 <process_action+0x198>
void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
 8007de2:	4b7b      	ldr	r3, [pc, #492]	; (8007fd0 <process_action+0x650>)
 8007de4:	785a      	ldrb	r2, [r3, #1]
 8007de6:	b251      	sxtb	r1, r2
 8007de8:	2900      	cmp	r1, #0
 8007dea:	dcf1      	bgt.n	8007dd0 <process_action+0x450>
 8007dec:	e75a      	b.n	8007ca4 <process_action+0x324>
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
 8007dee:	2f05      	cmp	r7, #5
 8007df0:	f63f adfb 	bhi.w	80079ea <process_action+0x6a>
 8007df4:	e6ef      	b.n	8007bd6 <process_action+0x256>
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
 8007df6:	f001 f923 	bl	8009040 <layer_off>
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
 8007dfa:	f014 000f 	ands.w	r0, r4, #15
 8007dfe:	f43f adf4 	beq.w	80079ea <process_action+0x6a>
        del_mods(mods);
 8007e02:	f001 f8b5 	bl	8008f70 <del_mods>
 8007e06:	e6db      	b.n	8007bc0 <process_action+0x240>
 8007e08:	4b72      	ldr	r3, [pc, #456]	; (8007fd4 <process_action+0x654>)
 8007e0a:	601e      	str	r6, [r3, #0]
 8007e0c:	e6ab      	b.n	8007b66 <process_action+0x1e6>
 8007e0e:	6813      	ldr	r3, [r2, #0]
 8007e10:	4323      	orrs	r3, r4
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
 8007e12:	431e      	orrs	r6, r3

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
 8007e14:	6016      	str	r6, [r2, #0]
 8007e16:	e6a6      	b.n	8007b66 <process_action+0x1e6>
 8007e18:	4d6f      	ldr	r5, [pc, #444]	; (8007fd8 <process_action+0x658>)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
 8007e1a:	682b      	ldr	r3, [r5, #0]
 8007e1c:	401e      	ands	r6, r3

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
 8007e1e:	602e      	str	r6, [r5, #0]
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
 8007e20:	f000 fb26 	bl	8008470 <clear_keyboard_but_mods>
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
 8007e24:	682b      	ldr	r3, [r5, #0]
 8007e26:	ea44 0603 	orr.w	r6, r4, r3

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
 8007e2a:	602e      	str	r6, [r5, #0]
 8007e2c:	e69b      	b.n	8007b66 <process_action+0x1e6>
 8007e2e:	4a6a      	ldr	r2, [pc, #424]	; (8007fd8 <process_action+0x658>)
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 8007e30:	4326      	orrs	r6, r4
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
 8007e32:	6813      	ldr	r3, [r2, #0]
 8007e34:	405e      	eors	r6, r3

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
 8007e36:	6016      	str	r6, [r2, #0]
 8007e38:	e695      	b.n	8007b66 <process_action+0x1e6>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
 8007e3a:	4b65      	ldr	r3, [pc, #404]	; (8007fd0 <process_action+0x650>)
 8007e3c:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8007e40:	2a00      	cmp	r2, #0
 8007e42:	f77f af2e 	ble.w	8007ca2 <process_action+0x322>
 8007e46:	2200      	movs	r2, #0
 8007e48:	70da      	strb	r2, [r3, #3]
 8007e4a:	e72a      	b.n	8007ca2 <process_action+0x322>
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
 8007e4c:	f001 f820 	bl	8008e90 <move_unit.lto_priv.42>
 8007e50:	4b5f      	ldr	r3, [pc, #380]	; (8007fd0 <process_action+0x650>)
 8007e52:	7098      	strb	r0, [r3, #2]
 8007e54:	e660      	b.n	8007b18 <process_action+0x198>
 8007e56:	680a      	ldr	r2, [r1, #0]
 8007e58:	4322      	orrs	r2, r4
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
 8007e5a:	4313      	orrs	r3, r2

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 8007e5c:	600b      	str	r3, [r1, #0]
 8007e5e:	e682      	b.n	8007b66 <process_action+0x1e6>
 8007e60:	4d5c      	ldr	r5, [pc, #368]	; (8007fd4 <process_action+0x654>)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
 8007e62:	682a      	ldr	r2, [r5, #0]
 8007e64:	4013      	ands	r3, r2

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 8007e66:	602b      	str	r3, [r5, #0]
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
 8007e68:	f000 fb02 	bl	8008470 <clear_keyboard_but_mods>
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	4323      	orrs	r3, r4

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 8007e70:	602b      	str	r3, [r5, #0]
 8007e72:	e678      	b.n	8007b66 <process_action+0x1e6>
 8007e74:	4957      	ldr	r1, [pc, #348]	; (8007fd4 <process_action+0x654>)
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
 8007e76:	4323      	orrs	r3, r4
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
 8007e78:	680a      	ldr	r2, [r1, #0]
 8007e7a:	4053      	eors	r3, r2

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 8007e7c:	600b      	str	r3, [r1, #0]
 8007e7e:	e672      	b.n	8007b66 <process_action+0x1e6>
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
 8007e80:	f001 f806 	bl	8008e90 <move_unit.lto_priv.42>
 8007e84:	4b52      	ldr	r3, [pc, #328]	; (8007fd0 <process_action+0x650>)
 8007e86:	4240      	negs	r0, r0
 8007e88:	7058      	strb	r0, [r3, #1]
 8007e8a:	e645      	b.n	8007b18 <process_action+0x198>
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
 8007e8c:	4b50      	ldr	r3, [pc, #320]	; (8007fd0 <process_action+0x650>)
 8007e8e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8007e92:	2a00      	cmp	r2, #0
 8007e94:	f6bf af05 	bge.w	8007ca2 <process_action+0x322>
 8007e98:	e7d5      	b.n	8007e46 <process_action+0x4c6>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
 8007e9a:	4b4d      	ldr	r3, [pc, #308]	; (8007fd0 <process_action+0x650>)
 8007e9c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8007ea0:	2a00      	cmp	r2, #0
 8007ea2:	f6bf aefe 	bge.w	8007ca2 <process_action+0x322>
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	711a      	strb	r2, [r3, #4]
 8007eaa:	785a      	ldrb	r2, [r3, #1]
 8007eac:	e6fa      	b.n	8007ca4 <process_action+0x324>
void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
 8007eae:	f000 ffef 	bl	8008e90 <move_unit.lto_priv.42>
 8007eb2:	4b47      	ldr	r3, [pc, #284]	; (8007fd0 <process_action+0x650>)
 8007eb4:	7058      	strb	r0, [r3, #1]
 8007eb6:	e62f      	b.n	8007b18 <process_action+0x198>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
 8007eb8:	4b45      	ldr	r3, [pc, #276]	; (8007fd0 <process_action+0x650>)
 8007eba:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8007ebe:	2a00      	cmp	r2, #0
 8007ec0:	dcf1      	bgt.n	8007ea6 <process_action+0x526>
 8007ec2:	e6ee      	b.n	8007ca2 <process_action+0x322>
 8007ec4:	4a41      	ldr	r2, [pc, #260]	; (8007fcc <process_action+0x64c>)
 8007ec6:	7015      	strb	r5, [r2, #0]
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f43f ad8e 	beq.w	80079ea <process_action+0x6a>
 8007ece:	e741      	b.n	8007d54 <process_action+0x3d4>
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
 8007ed0:	f000 ffa6 	bl	8008e20 <wheel_unit.lto_priv.41>
 8007ed4:	4b3e      	ldr	r3, [pc, #248]	; (8007fd0 <process_action+0x650>)
 8007ed6:	70d8      	strb	r0, [r3, #3]
 8007ed8:	e61e      	b.n	8007b18 <process_action+0x198>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
 8007eda:	4b3d      	ldr	r3, [pc, #244]	; (8007fd0 <process_action+0x650>)
 8007edc:	7819      	ldrb	r1, [r3, #0]
 8007ede:	785a      	ldrb	r2, [r3, #1]
 8007ee0:	f021 0101 	bic.w	r1, r1, #1
 8007ee4:	7019      	strb	r1, [r3, #0]
 8007ee6:	e6dd      	b.n	8007ca4 <process_action+0x324>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
 8007ee8:	4b39      	ldr	r3, [pc, #228]	; (8007fd0 <process_action+0x650>)
 8007eea:	7819      	ldrb	r1, [r3, #0]
 8007eec:	785a      	ldrb	r2, [r3, #1]
 8007eee:	f021 0102 	bic.w	r1, r1, #2
 8007ef2:	7019      	strb	r1, [r3, #0]
 8007ef4:	e6d6      	b.n	8007ca4 <process_action+0x324>
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
 8007ef6:	f000 ff93 	bl	8008e20 <wheel_unit.lto_priv.41>
 8007efa:	4b35      	ldr	r3, [pc, #212]	; (8007fd0 <process_action+0x650>)
 8007efc:	4240      	negs	r0, r0
 8007efe:	70d8      	strb	r0, [r3, #3]
 8007f00:	e60a      	b.n	8007b18 <process_action+0x198>
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
 8007f02:	f000 ff8d 	bl	8008e20 <wheel_unit.lto_priv.41>
 8007f06:	4b32      	ldr	r3, [pc, #200]	; (8007fd0 <process_action+0x650>)
 8007f08:	7118      	strb	r0, [r3, #4]
 8007f0a:	e605      	b.n	8007b18 <process_action+0x198>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
 8007f0c:	f000 ff88 	bl	8008e20 <wheel_unit.lto_priv.41>
 8007f10:	4b2f      	ldr	r3, [pc, #188]	; (8007fd0 <process_action+0x650>)
 8007f12:	4240      	negs	r0, r0
 8007f14:	7118      	strb	r0, [r3, #4]
 8007f16:	e5ff      	b.n	8007b18 <process_action+0x198>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
 8007f18:	4b2d      	ldr	r3, [pc, #180]	; (8007fd0 <process_action+0x650>)
 8007f1a:	7819      	ldrb	r1, [r3, #0]
 8007f1c:	785a      	ldrb	r2, [r3, #1]
 8007f1e:	f021 0104 	bic.w	r1, r1, #4
 8007f22:	7019      	strb	r1, [r3, #0]
 8007f24:	e6be      	b.n	8007ca4 <process_action+0x324>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
 8007f26:	4a2a      	ldr	r2, [pc, #168]	; (8007fd0 <process_action+0x650>)
 8007f28:	7813      	ldrb	r3, [r2, #0]
 8007f2a:	f043 0301 	orr.w	r3, r3, #1
 8007f2e:	7013      	strb	r3, [r2, #0]
 8007f30:	e5f2      	b.n	8007b18 <process_action+0x198>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
 8007f32:	4b27      	ldr	r3, [pc, #156]	; (8007fd0 <process_action+0x650>)
 8007f34:	7819      	ldrb	r1, [r3, #0]
 8007f36:	785a      	ldrb	r2, [r3, #1]
 8007f38:	f021 0108 	bic.w	r1, r1, #8
 8007f3c:	7019      	strb	r1, [r3, #0]
 8007f3e:	e6b1      	b.n	8007ca4 <process_action+0x324>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
 8007f40:	4a23      	ldr	r2, [pc, #140]	; (8007fd0 <process_action+0x650>)
 8007f42:	7813      	ldrb	r3, [r2, #0]
 8007f44:	f043 0304 	orr.w	r3, r3, #4
 8007f48:	7013      	strb	r3, [r2, #0]
 8007f4a:	e5e5      	b.n	8007b18 <process_action+0x198>
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
 8007f4c:	4a20      	ldr	r2, [pc, #128]	; (8007fd0 <process_action+0x650>)
 8007f4e:	7813      	ldrb	r3, [r2, #0]
 8007f50:	f043 0302 	orr.w	r3, r3, #2
 8007f54:	7013      	strb	r3, [r2, #0]
 8007f56:	e5df      	b.n	8007b18 <process_action+0x198>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
 8007f58:	4b1d      	ldr	r3, [pc, #116]	; (8007fd0 <process_action+0x650>)
 8007f5a:	7819      	ldrb	r1, [r3, #0]
 8007f5c:	785a      	ldrb	r2, [r3, #1]
 8007f5e:	f021 0110 	bic.w	r1, r1, #16
 8007f62:	7019      	strb	r1, [r3, #0]
 8007f64:	e69e      	b.n	8007ca4 <process_action+0x324>
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
 8007f66:	4a1a      	ldr	r2, [pc, #104]	; (8007fd0 <process_action+0x650>)
 8007f68:	7813      	ldrb	r3, [r2, #0]
 8007f6a:	f043 0308 	orr.w	r3, r3, #8
 8007f6e:	7013      	strb	r3, [r2, #0]
 8007f70:	e5d2      	b.n	8007b18 <process_action+0x198>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
 8007f72:	481a      	ldr	r0, [pc, #104]	; (8007fdc <process_action+0x65c>)
 8007f74:	4b16      	ldr	r3, [pc, #88]	; (8007fd0 <process_action+0x650>)
 8007f76:	7801      	ldrb	r1, [r0, #0]
 8007f78:	785a      	ldrb	r2, [r3, #1]
 8007f7a:	f021 0102 	bic.w	r1, r1, #2
 8007f7e:	7001      	strb	r1, [r0, #0]
 8007f80:	e690      	b.n	8007ca4 <process_action+0x324>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
 8007f82:	4816      	ldr	r0, [pc, #88]	; (8007fdc <process_action+0x65c>)
 8007f84:	4b12      	ldr	r3, [pc, #72]	; (8007fd0 <process_action+0x650>)
 8007f86:	7801      	ldrb	r1, [r0, #0]
 8007f88:	785a      	ldrb	r2, [r3, #1]
 8007f8a:	f021 0101 	bic.w	r1, r1, #1
 8007f8e:	7001      	strb	r1, [r0, #0]
 8007f90:	e688      	b.n	8007ca4 <process_action+0x324>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
 8007f92:	4812      	ldr	r0, [pc, #72]	; (8007fdc <process_action+0x65c>)
 8007f94:	4b0e      	ldr	r3, [pc, #56]	; (8007fd0 <process_action+0x650>)
 8007f96:	7801      	ldrb	r1, [r0, #0]
 8007f98:	785a      	ldrb	r2, [r3, #1]
 8007f9a:	f021 0104 	bic.w	r1, r1, #4
 8007f9e:	7001      	strb	r1, [r0, #0]
 8007fa0:	e680      	b.n	8007ca4 <process_action+0x324>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
 8007fa2:	4a0e      	ldr	r2, [pc, #56]	; (8007fdc <process_action+0x65c>)
 8007fa4:	7813      	ldrb	r3, [r2, #0]
 8007fa6:	f043 0302 	orr.w	r3, r3, #2
 8007faa:	7013      	strb	r3, [r2, #0]
 8007fac:	e5b4      	b.n	8007b18 <process_action+0x198>
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
 8007fae:	4a0b      	ldr	r2, [pc, #44]	; (8007fdc <process_action+0x65c>)
 8007fb0:	7813      	ldrb	r3, [r2, #0]
 8007fb2:	f043 0301 	orr.w	r3, r3, #1
 8007fb6:	7013      	strb	r3, [r2, #0]
 8007fb8:	e5ae      	b.n	8007b18 <process_action+0x198>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
 8007fba:	4a05      	ldr	r2, [pc, #20]	; (8007fd0 <process_action+0x650>)
 8007fbc:	7813      	ldrb	r3, [r2, #0]
 8007fbe:	f043 0310 	orr.w	r3, r3, #16
 8007fc2:	7013      	strb	r3, [r2, #0]
 8007fc4:	e5a8      	b.n	8007b18 <process_action+0x198>
 8007fc6:	bf00      	nop
 8007fc8:	200014d8 	.word	0x200014d8
 8007fcc:	200014db 	.word	0x200014db
 8007fd0:	20001568 	.word	0x20001568
 8007fd4:	200012f8 	.word	0x200012f8
 8007fd8:	20001570 	.word	0x20001570
 8007fdc:	200012fc 	.word	0x200012fc

08007fe0 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
 8007fe0:	4b02      	ldr	r3, [pc, #8]	; (8007fec <host_keyboard_leds+0xc>)
 8007fe2:	6818      	ldr	r0, [r3, #0]
 8007fe4:	b108      	cbz	r0, 8007fea <host_keyboard_leds+0xa>
    return (*driver->keyboard_leds)();
 8007fe6:	6803      	ldr	r3, [r0, #0]
 8007fe8:	4718      	bx	r3
}
 8007fea:	4770      	bx	lr
 8007fec:	20001548 	.word	0x20001548

08007ff0 <matrix_scan>:
    wait_ms(500);
    LED_OFF();
}

uint8_t matrix_scan(void)
{
 8007ff0:	b508      	push	{r3, lr}
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        wait_us(30);  // without this wait read unstable value.
 8007ff2:	2001      	movs	r0, #1
 8007ff4:	f7fe fdec 	bl	8006bd0 <chThdSleep>
}

/* Returns status of switches(1:on, 0:off) */
static matrix_row_t read_cols(void)
{
    return ((palReadPad(MAPLE_BUTTON_PORT, MAPLE_BUTTON_PIN)==PAL_LOW) ? 0 : (1<<0));
 8007ff8:	4b0e      	ldr	r3, [pc, #56]	; (8008034 <matrix_scan+0x44>)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        wait_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
 8007ffa:	4a0f      	ldr	r2, [pc, #60]	; (8008038 <matrix_scan+0x48>)
}

/* Returns status of switches(1:on, 0:off) */
static matrix_row_t read_cols(void)
{
    return ((palReadPad(MAPLE_BUTTON_PORT, MAPLE_BUTTON_PIN)==PAL_LOW) ? 0 : (1<<0));
 8007ffc:	689b      	ldr	r3, [r3, #8]
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        wait_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
 8007ffe:	7811      	ldrb	r1, [r2, #0]
}

/* Returns status of switches(1:on, 0:off) */
static matrix_row_t read_cols(void)
{
    return ((palReadPad(MAPLE_BUTTON_PORT, MAPLE_BUTTON_PIN)==PAL_LOW) ? 0 : (1<<0));
 8008000:	f3c3 2300 	ubfx	r3, r3, #8, #1
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        wait_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
 8008004:	4299      	cmp	r1, r3
 8008006:	d008      	beq.n	800801a <matrix_scan+0x2a>
        }
        unselect_rows();
    }

    if (debouncing) {
        if (--debouncing) {
 8008008:	490c      	ldr	r1, [pc, #48]	; (800803c <matrix_scan+0x4c>)
 800800a:	2004      	movs	r0, #4
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        wait_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
 800800c:	7013      	strb	r3, [r2, #0]
        }
        unselect_rows();
    }

    if (debouncing) {
        if (--debouncing) {
 800800e:	7008      	strb	r0, [r1, #0]
            wait_ms(1);
 8008010:	2002      	movs	r0, #2
 8008012:	f7fe fddd 	bl	8006bd0 <chThdSleep>
            }
        }
    }

    return 1;
}
 8008016:	2001      	movs	r0, #1
 8008018:	bd08      	pop	{r3, pc}
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
 800801a:	4a08      	ldr	r2, [pc, #32]	; (800803c <matrix_scan+0x4c>)
 800801c:	7813      	ldrb	r3, [r2, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d0f9      	beq.n	8008016 <matrix_scan+0x26>
 8008022:	3b01      	subs	r3, #1
 8008024:	b2db      	uxtb	r3, r3
        if (--debouncing) {
 8008026:	7013      	strb	r3, [r2, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1f1      	bne.n	8008010 <matrix_scan+0x20>
            wait_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
 800802c:	4b04      	ldr	r3, [pc, #16]	; (8008040 <matrix_scan+0x50>)
            }
        }
    }

    return 1;
}
 800802e:	2001      	movs	r0, #1
    if (debouncing) {
        if (--debouncing) {
            wait_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
 8008030:	7019      	strb	r1, [r3, #0]
            }
        }
    }

    return 1;
}
 8008032:	bd08      	pop	{r3, pc}
 8008034:	40010c00 	.word	0x40010c00
 8008038:	200012f0 	.word	0x200012f0
 800803c:	2000122c 	.word	0x2000122c
 8008040:	200012ec 	.word	0x200012ec
 8008044:	f3af 8000 	nop.w
 8008048:	f3af 8000 	nop.w
 800804c:	f3af 8000 	nop.w

08008050 <is_tap_key>:
    host_consumer_send(0);
#endif
}

bool is_tap_key(keypos_t key)
{
 8008050:	b500      	push	{lr}
 8008052:	b083      	sub	sp, #12
 8008054:	f8ad 0004 	strh.w	r0, [sp, #4]
    action_t action = layer_switch_get_action(key);
 8008058:	9801      	ldr	r0, [sp, #4]
 800805a:	f000 ffc9 	bl	8008ff0 <layer_switch_get_action>
 800805e:	f3c0 3303 	ubfx	r3, r0, #12, #4
 8008062:	3b02      	subs	r3, #2
 8008064:	2b0d      	cmp	r3, #13
 8008066:	d814      	bhi.n	8008092 <is_tap_key+0x42>
 8008068:	2201      	movs	r2, #1
 800806a:	409a      	lsls	r2, r3
 800806c:	f412 5110 	ands.w	r1, r2, #9216	; 0x2400
 8008070:	d004      	beq.n	800807c <is_tap_key+0x2c>
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
 8008072:	f3c0 20c0 	ubfx	r0, r0, #11, #1
            return false;
    }
    return false;
}
 8008076:	b003      	add	sp, #12
 8008078:	f85d fb04 	ldr.w	pc, [sp], #4
 800807c:	f240 3303 	movw	r3, #771	; 0x303
 8008080:	4013      	ands	r3, r2
 8008082:	b153      	cbz	r3, 800809a <is_tap_key+0x4a>
    switch (action.kind.id) {
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
 8008084:	b2c3      	uxtb	r3, r0
 8008086:	2bdf      	cmp	r3, #223	; 0xdf
 8008088:	d90b      	bls.n	80080a2 <is_tap_key+0x52>
 800808a:	2bf0      	cmp	r3, #240	; 0xf0
 800808c:	d009      	beq.n	80080a2 <is_tap_key+0x52>
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
            }
            return false;
 800808e:	4608      	mov	r0, r1
 8008090:	e7f1      	b.n	8008076 <is_tap_key+0x26>
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
 8008092:	2000      	movs	r0, #0
}
 8008094:	b003      	add	sp, #12
 8008096:	f85d fb04 	ldr.w	pc, [sp], #4
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
 800809a:	4618      	mov	r0, r3
}
 800809c:	b003      	add	sp, #12
 800809e:	f85d fb04 	ldr.w	pc, [sp], #4
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
 80080a2:	2001      	movs	r0, #1
 80080a4:	e7e7      	b.n	8008076 <is_tap_key+0x26>
 80080a6:	bf00      	nop
 80080a8:	f3af 8000 	nop.w
 80080ac:	f3af 8000 	nop.w

080080b0 <process_tapping.lto_priv.43>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
 80080b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080b4:	4604      	mov	r4, r0
 80080b6:	4dc3      	ldr	r5, [pc, #780]	; (80083c4 <process_tapping.lto_priv.43+0x314>)
    keyevent_t event = keyp->event;
 80080b8:	6800      	ldr	r0, [r0, #0]
 80080ba:	88ab      	ldrh	r3, [r5, #4]
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
 80080bc:	b094      	sub	sp, #80	; 0x50
    keyevent_t event = keyp->event;
 80080be:	9000      	str	r0, [sp, #0]
 80080c0:	f894 e000 	ldrb.w	lr, [r4]
 80080c4:	7862      	ldrb	r2, [r4, #1]
 80080c6:	f894 9002 	ldrb.w	r9, [r4, #2]
 80080ca:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80080ce:	7828      	ldrb	r0, [r5, #0]
 80080d0:	7869      	ldrb	r1, [r5, #1]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d054      	beq.n	8008180 <process_tapping.lto_priv.43+0xd0>
 80080d6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80080da:	f88d 0008 	strb.w	r0, [sp, #8]
 80080de:	f88d 1009 	strb.w	r1, [sp, #9]
 80080e2:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80080e6:	42b7      	cmp	r7, r6
 80080e8:	d002      	beq.n	80080f0 <process_tapping.lto_priv.43+0x40>

    // if tapping
    if (IS_TAPPING_PRESSED()) {
 80080ea:	78af      	ldrb	r7, [r5, #2]
 80080ec:	2f00      	cmp	r7, #0
 80080ee:	d15c      	bne.n	80081aa <process_tapping.lto_priv.43+0xfa>
 80080f0:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80080f4:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 80080f8:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
 80080fc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 8008100:	42b7      	cmp	r7, r6
 8008102:	d03d      	beq.n	8008180 <process_tapping.lto_priv.43+0xd0>
                    process_action(keyp);
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
 8008104:	78ae      	ldrb	r6, [r5, #2]
 8008106:	2e00      	cmp	r6, #0
 8008108:	d13a      	bne.n	8008180 <process_tapping.lto_priv.43+0xd0>
        if (WITHIN_TAPPING_TERM(event)) {
 800810a:	4598      	cmp	r8, r3
 800810c:	bf3b      	ittet	cc
 800810e:	f5c3 437f 	rsbcc	r3, r3, #65280	; 0xff00
 8008112:	33ff      	addcc	r3, #255	; 0xff
 8008114:	ebc3 0308 	rsbcs	r3, r3, r8
 8008118:	4443      	addcc	r3, r8
 800811a:	2bc7      	cmp	r3, #199	; 0xc7
 800811c:	bfcc      	ite	gt
 800811e:	2700      	movgt	r7, #0
 8008120:	2701      	movle	r7, #1
 8008122:	2f00      	cmp	r7, #0
 8008124:	f000 811d 	beq.w	8008362 <process_tapping.lto_priv.43+0x2b2>
            if (event.pressed) {
 8008128:	464f      	mov	r7, r9
 800812a:	b367      	cbz	r7, 8008186 <process_tapping.lto_priv.43+0xd6>
 800812c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008130:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
 8008134:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
 8008138:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 800813c:	48a1      	ldr	r0, [pc, #644]	; (80083c4 <process_tapping.lto_priv.43+0x314>)
 800813e:	4299      	cmp	r1, r3
 8008140:	d009      	beq.n	8008156 <process_tapping.lto_priv.43+0xa6>
                if (IS_TAPPING_KEY(event.key)) {
 8008142:	f88d e000 	strb.w	lr, [sp]
 8008146:	f88d 2001 	strb.w	r2, [sp, #1]
 800814a:	f8bd 1000 	ldrh.w	r1, [sp]
 800814e:	8803      	ldrh	r3, [r0, #0]
 8008150:	4299      	cmp	r1, r3
 8008152:	f000 80dc 	beq.w	800830e <process_tapping.lto_priv.43+0x25e>
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
                        return true;
                    }
                } else if (is_tap_key(event.key)) {
 8008156:	f88d e000 	strb.w	lr, [sp]
 800815a:	f88d 2001 	strb.w	r2, [sp, #1]
 800815e:	9800      	ldr	r0, [sp, #0]
 8008160:	f7ff ff76 	bl	8008050 <is_tap_key>
 8008164:	2800      	cmp	r0, #0
 8008166:	f000 80ca 	beq.w	80082fe <process_tapping.lto_priv.43+0x24e>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
 800816a:	6820      	ldr	r0, [r4, #0]
 800816c:	6861      	ldr	r1, [r4, #4]
 800816e:	4b95      	ldr	r3, [pc, #596]	; (80083c4 <process_tapping.lto_priv.43+0x314>)
                    waiting_buffer_scan_tap();
                    debug_tapping_key();
                    return true;
 8008170:	2701      	movs	r7, #1
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
 8008172:	c303      	stmia	r3!, {r0, r1}
                    waiting_buffer_scan_tap();
 8008174:	f000 ff94 	bl	80090a0 <waiting_buffer_scan_tap.lto_priv.35>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
 8008178:	4638      	mov	r0, r7
 800817a:	b014      	add	sp, #80	; 0x50
 800817c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
 8008180:	f1b9 0f00 	cmp.w	r9, #0
 8008184:	d107      	bne.n	8008196 <process_tapping.lto_priv.43+0xe6>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
 8008186:	4620      	mov	r0, r4
 8008188:	f7ff fbfa 	bl	8007980 <process_action>
                    return true;
 800818c:	2701      	movs	r7, #1
        } else {
            process_action(keyp);
            return true;
        }
    }
}
 800818e:	4638      	mov	r0, r7
 8008190:	b014      	add	sp, #80	; 0x50
 8008192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
 8008196:	f88d e000 	strb.w	lr, [sp]
 800819a:	f88d 2001 	strb.w	r2, [sp, #1]
 800819e:	9800      	ldr	r0, [sp, #0]
 80081a0:	f7ff ff56 	bl	8008050 <is_tap_key>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d0ee      	beq.n	8008186 <process_tapping.lto_priv.43+0xd6>
 80081a8:	e7df      	b.n	800816a <process_tapping.lto_priv.43+0xba>
{
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
 80081aa:	4598      	cmp	r8, r3
 80081ac:	bf3b      	ittet	cc
 80081ae:	f5c3 437f 	rsbcc	r3, r3, #65280	; 0xff00
 80081b2:	33ff      	addcc	r3, #255	; 0xff
 80081b4:	ebc3 0308 	rsbcs	r3, r3, r8
 80081b8:	4443      	addcc	r3, r8
 80081ba:	2bc7      	cmp	r3, #199	; 0xc7
 80081bc:	bfcc      	ite	gt
 80081be:	2600      	movgt	r6, #0
 80081c0:	2601      	movle	r6, #1
            if (tapping_key.tap.count == 0) {
 80081c2:	79ab      	ldrb	r3, [r5, #6]
 80081c4:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 80083c4 <process_tapping.lto_priv.43+0x314>
{
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
 80081c8:	bbb6      	cbnz	r6, 8008238 <process_tapping.lto_priv.43+0x188>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
 80081ca:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80081ce:	f000 811a 	beq.w	8008406 <process_tapping.lto_priv.43+0x356>
 80081d2:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80081d6:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 80081da:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
 80081de:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80081e2:	42b1      	cmp	r1, r6
 80081e4:	d00a      	beq.n	80081fc <process_tapping.lto_priv.43+0x14c>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
 80081e6:	f88d e000 	strb.w	lr, [sp]
 80081ea:	f88d 2001 	strb.w	r2, [sp, #1]
 80081ee:	f8bd 0000 	ldrh.w	r0, [sp]
 80081f2:	f8ba 1000 	ldrh.w	r1, [sl]
 80081f6:	4288      	cmp	r0, r1
 80081f8:	f000 80a1 	beq.w	800833e <process_tapping.lto_priv.43+0x28e>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
 80081fc:	f88d e000 	strb.w	lr, [sp]
 8008200:	f88d 2001 	strb.w	r2, [sp, #1]
 8008204:	9800      	ldr	r0, [sp, #0]
 8008206:	f7ff ff23 	bl	8008050 <is_tap_key>
 800820a:	2800      	cmp	r0, #0
 800820c:	d0bb      	beq.n	8008186 <process_tapping.lto_priv.43+0xd6>
 800820e:	f1b9 0f00 	cmp.w	r9, #0
 8008212:	d0b8      	beq.n	8008186 <process_tapping.lto_priv.43+0xd6>
                    if (tapping_key.tap.count > 1) {
 8008214:	79ab      	ldrb	r3, [r5, #6]
 8008216:	4a6b      	ldr	r2, [pc, #428]	; (80083c4 <process_tapping.lto_priv.43+0x314>)
 8008218:	2b1f      	cmp	r3, #31
 800821a:	d9a6      	bls.n	800816a <process_tapping.lto_priv.43+0xba>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
 800821c:	8811      	ldrh	r1, [r2, #0]
 800821e:	a812      	add	r0, sp, #72	; 0x48
 8008220:	2200      	movs	r2, #0
 8008222:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 8008226:	f8ad 804c 	strh.w	r8, [sp, #76]	; 0x4c
 800822a:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
 800822e:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
 8008232:	f7ff fba5 	bl	8007980 <process_action>
 8008236:	e798      	b.n	800816a <process_tapping.lto_priv.43+0xba>
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
 8008238:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800823c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8008240:	d129      	bne.n	8008296 <process_tapping.lto_priv.43+0x1e6>
 8008242:	f88d 0010 	strb.w	r0, [sp, #16]
 8008246:	f88d 1011 	strb.w	r1, [sp, #17]
 800824a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800824e:	42b9      	cmp	r1, r7
 8008250:	d00a      	beq.n	8008268 <process_tapping.lto_priv.43+0x1b8>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
 8008252:	f88d e000 	strb.w	lr, [sp]
 8008256:	f88d 2001 	strb.w	r2, [sp, #1]
 800825a:	f8bd 0000 	ldrh.w	r0, [sp]
 800825e:	f8ba 1000 	ldrh.w	r1, [sl]
 8008262:	4288      	cmp	r0, r1
 8008264:	f000 80eb 	beq.w	800843e <process_tapping.lto_priv.43+0x38e>
 8008268:	464f      	mov	r7, r9
 800826a:	f1b8 0f00 	cmp.w	r8, #0
 800826e:	d073      	beq.n	8008358 <process_tapping.lto_priv.43+0x2a8>
 8008270:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008274:	f88d e018 	strb.w	lr, [sp, #24]
 8008278:	f88d 2019 	strb.w	r2, [sp, #25]
 800827c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8008280:	4299      	cmp	r1, r3
 8008282:	d069      	beq.n	8008358 <process_tapping.lto_priv.43+0x2a8>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
 8008284:	f1b9 0f00 	cmp.w	r9, #0
 8008288:	d06e      	beq.n	8008368 <process_tapping.lto_priv.43+0x2b8>
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
                        tapping_key.tap.interrupted = true;
 800828a:	79ab      	ldrb	r3, [r5, #6]
                    }
                    // enqueue 
                    return false;
 800828c:	2700      	movs	r7, #0
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
                        tapping_key.tap.interrupted = true;
 800828e:	f043 0301 	orr.w	r3, r3, #1
 8008292:	71ab      	strb	r3, [r5, #6]
 8008294:	e77b      	b.n	800818e <process_tapping.lto_priv.43+0xde>

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
 8008296:	f88d 0020 	strb.w	r0, [sp, #32]
 800829a:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
 800829e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80082a2:	42b9      	cmp	r1, r7
 80082a4:	d00a      	beq.n	80082bc <process_tapping.lto_priv.43+0x20c>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
 80082a6:	f88d e000 	strb.w	lr, [sp]
 80082aa:	f88d 2001 	strb.w	r2, [sp, #1]
 80082ae:	f8bd 0000 	ldrh.w	r0, [sp]
 80082b2:	f8ba 1000 	ldrh.w	r1, [sl]
 80082b6:	4288      	cmp	r0, r1
 80082b8:	f000 80ae 	beq.w	8008418 <process_tapping.lto_priv.43+0x368>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
 80082bc:	f88d e000 	strb.w	lr, [sp]
 80082c0:	f88d 2001 	strb.w	r2, [sp, #1]
 80082c4:	9800      	ldr	r0, [sp, #0]
 80082c6:	f7ff fec3 	bl	8008050 <is_tap_key>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	f43f af5b 	beq.w	8008186 <process_tapping.lto_priv.43+0xd6>
 80082d0:	f1b9 0f00 	cmp.w	r9, #0
 80082d4:	f43f af57 	beq.w	8008186 <process_tapping.lto_priv.43+0xd6>
                    if (tapping_key.tap.count > 1) {
 80082d8:	79ab      	ldrb	r3, [r5, #6]
 80082da:	4a3a      	ldr	r2, [pc, #232]	; (80083c4 <process_tapping.lto_priv.43+0x314>)
 80082dc:	2b1f      	cmp	r3, #31
 80082de:	f67f af44 	bls.w	800816a <process_tapping.lto_priv.43+0xba>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
 80082e2:	8811      	ldrh	r1, [r2, #0]
 80082e4:	a810      	add	r0, sp, #64	; 0x40
 80082e6:	2200      	movs	r2, #0
 80082e8:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 80082ec:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 80082f0:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 80082f4:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
 80082f8:	f7ff fb42 	bl	8007980 <process_action>
 80082fc:	e735      	b.n	800816a <process_tapping.lto_priv.43+0xba>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
 80082fe:	79ab      	ldrb	r3, [r5, #6]
                    process_action(keyp);
 8008300:	4620      	mov	r0, r4
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
 8008302:	f043 0301 	orr.w	r3, r3, #1
 8008306:	71ab      	strb	r3, [r5, #6]
                    process_action(keyp);
 8008308:	f7ff fb3a 	bl	8007980 <process_action>
 800830c:	e73f      	b.n	800818e <process_tapping.lto_priv.43+0xde>
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (event.pressed) {
                if (IS_TAPPING_KEY(event.key)) {
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
 800830e:	7983      	ldrb	r3, [r0, #6]
 8008310:	07da      	lsls	r2, r3, #31
 8008312:	f100 808f 	bmi.w	8008434 <process_tapping.lto_priv.43+0x384>
 8008316:	091a      	lsrs	r2, r3, #4
 8008318:	f000 808c 	beq.w	8008434 <process_tapping.lto_priv.43+0x384>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
 800831c:	0919      	lsrs	r1, r3, #4
 800831e:	290f      	cmp	r1, #15
 8008320:	461a      	mov	r2, r3
        if (WITHIN_TAPPING_TERM(event)) {
            if (event.pressed) {
                if (IS_TAPPING_KEY(event.key)) {
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
 8008322:	71a3      	strb	r3, [r4, #6]
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
 8008324:	d003      	beq.n	800832e <process_tapping.lto_priv.43+0x27e>
 8008326:	3101      	adds	r1, #1
 8008328:	f361 1207 	bfi	r2, r1, #4, #4
 800832c:	71a2      	strb	r2, [r4, #6]
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
 800832e:	4620      	mov	r0, r4
 8008330:	f7ff fb26 	bl	8007980 <process_action>
                        tapping_key = *keyp;
 8008334:	4b23      	ldr	r3, [pc, #140]	; (80083c4 <process_tapping.lto_priv.43+0x314>)
 8008336:	6820      	ldr	r0, [r4, #0]
 8008338:	6861      	ldr	r1, [r4, #4]
 800833a:	c303      	stmia	r3!, {r0, r1}
 800833c:	e727      	b.n	800818e <process_tapping.lto_priv.43+0xde>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
 800833e:	f1b9 0f00 	cmp.w	r9, #0
 8008342:	f47f af5b 	bne.w	80081fc <process_tapping.lto_priv.43+0x14c>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
 8008346:	71a3      	strb	r3, [r4, #6]
                    process_action(keyp);
 8008348:	4620      	mov	r0, r4
 800834a:	f7ff fb19 	bl	8007980 <process_action>
                    tapping_key = (keyrecord_t){};
 800834e:	f8ca 9000 	str.w	r9, [sl]
 8008352:	f8ca 9004 	str.w	r9, [sl, #4]
 8008356:	e71a      	b.n	800818e <process_tapping.lto_priv.43+0xde>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
 8008358:	f1b9 0f00 	cmp.w	r9, #0
 800835c:	f43f af17 	beq.w	800818e <process_tapping.lto_priv.43+0xde>
 8008360:	e793      	b.n	800828a <process_tapping.lto_priv.43+0x1da>
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
            tapping_key = (keyrecord_t){};
 8008362:	602f      	str	r7, [r5, #0]
 8008364:	606f      	str	r7, [r5, #4]
 8008366:	e712      	b.n	800818e <process_tapping.lto_priv.43+0xde>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
 8008368:	4b17      	ldr	r3, [pc, #92]	; (80083c8 <process_tapping.lto_priv.43+0x318>)
 800836a:	4918      	ldr	r1, [pc, #96]	; (80083cc <process_tapping.lto_priv.43+0x31c>)
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	f891 8000 	ldrb.w	r8, [r1]
 8008372:	4543      	cmp	r3, r8
 8008374:	d015      	beq.n	80083a2 <process_tapping.lto_priv.43+0x2f2>
 8008376:	f8df c058 	ldr.w	ip, [pc, #88]	; 80083d0 <process_tapping.lto_priv.43+0x320>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
 800837a:	46e1      	mov	r9, ip
 800837c:	e003      	b.n	8008386 <process_tapping.lto_priv.43+0x2d6>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
 800837e:	f005 0307 	and.w	r3, r5, #7
 8008382:	4543      	cmp	r3, r8
 8008384:	d00d      	beq.n	80083a2 <process_tapping.lto_priv.43+0x2f2>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
 8008386:	eb0c 01c3 	add.w	r1, ip, r3, lsl #3
 800838a:	7848      	ldrb	r0, [r1, #1]
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
 800838c:	1c5d      	adds	r5, r3, #1
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
 800838e:	4290      	cmp	r0, r2
 8008390:	d1f5      	bne.n	800837e <process_tapping.lto_priv.43+0x2ce>
 8008392:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
 8008396:	4573      	cmp	r3, lr
 8008398:	d1f1      	bne.n	800837e <process_tapping.lto_priv.43+0x2ce>
 800839a:	788b      	ldrb	r3, [r1, #2]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d0ee      	beq.n	800837e <process_tapping.lto_priv.43+0x2ce>
 80083a0:	e6f5      	b.n	800818e <process_tapping.lto_priv.43+0xde>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
 80083a2:	f88d 2001 	strb.w	r2, [sp, #1]
 80083a6:	f88d e000 	strb.w	lr, [sp]
 80083aa:	9800      	ldr	r0, [sp, #0]
 80083ac:	f000 fe20 	bl	8008ff0 <layer_switch_get_action>
                    switch (action.kind.id) {
 80083b0:	f3c0 3303 	ubfx	r3, r0, #12, #4
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
 80083b4:	b2c2      	uxtb	r2, r0
                    switch (action.kind.id) {
 80083b6:	2b03      	cmp	r3, #3
 80083b8:	d81a      	bhi.n	80083f0 <process_tapping.lto_priv.43+0x340>
 80083ba:	e8df f003 	tbb	[pc, r3]
 80083be:	1e1e      	.short	0x1e1e
 80083c0:	0b0b      	.short	0x0b0b
 80083c2:	bf00      	nop
 80083c4:	20001538 	.word	0x20001538
 80083c8:	200014d9 	.word	0x200014d9
 80083cc:	20001544 	.word	0x20001544
 80083d0:	200014f4 	.word	0x200014f4
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
 80083d4:	f410 6f70 	tst.w	r0, #3840	; 0xf00
 80083d8:	d004      	beq.n	80083e4 <process_tapping.lto_priv.43+0x334>
 80083da:	79a3      	ldrb	r3, [r4, #6]
 80083dc:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80083e0:	f43f aed5 	beq.w	800818e <process_tapping.lto_priv.43+0xde>
                            if (IS_MOD(action.key.code)) return false;
 80083e4:	f102 0320 	add.w	r3, r2, #32
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b07      	cmp	r3, #7
 80083ec:	f67f aecf 	bls.w	800818e <process_tapping.lto_priv.43+0xde>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
 80083f0:	4620      	mov	r0, r4
 80083f2:	f7ff fac5 	bl	8007980 <process_action>
                    return true;
 80083f6:	4637      	mov	r7, r6
 80083f8:	e6c9      	b.n	800818e <process_tapping.lto_priv.43+0xde>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
 80083fa:	f410 6f70 	tst.w	r0, #3840	; 0xf00
 80083fe:	d0f1      	beq.n	80083e4 <process_tapping.lto_priv.43+0x334>
 8008400:	2a00      	cmp	r2, #0
 8008402:	d1ef      	bne.n	80083e4 <process_tapping.lto_priv.43+0x334>
 8008404:	e6c3      	b.n	800818e <process_tapping.lto_priv.43+0xde>
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
                process_action(&tapping_key);
 8008406:	4650      	mov	r0, sl
 8008408:	f7ff faba 	bl	8007980 <process_action>
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
 800840c:	4637      	mov	r7, r6
        else {
            if (tapping_key.tap.count == 0) {
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
 800840e:	f8ca 6000 	str.w	r6, [sl]
 8008412:	f8ca 6004 	str.w	r6, [sl, #4]
 8008416:	e6ba      	b.n	800818e <process_tapping.lto_priv.43+0xde>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
 8008418:	f1b9 0f00 	cmp.w	r9, #0
 800841c:	f47f af4e 	bne.w	80082bc <process_tapping.lto_priv.43+0x20c>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
 8008420:	4620      	mov	r0, r4
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
 8008422:	71a3      	strb	r3, [r4, #6]
                    process_action(keyp);
 8008424:	f7ff faac 	bl	8007980 <process_action>
                    tapping_key = *keyp;
 8008428:	6820      	ldr	r0, [r4, #0]
 800842a:	6861      	ldr	r1, [r4, #4]
                    debug_tapping_key();
                    return true;
 800842c:	4637      	mov	r7, r6
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = *keyp;
 800842e:	e8aa 0003 	stmia.w	sl!, {r0, r1}
 8008432:	e6ac      	b.n	800818e <process_tapping.lto_priv.43+0xde>
                        tapping_key = *keyp;
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
 8008434:	4b0c      	ldr	r3, [pc, #48]	; (8008468 <process_tapping.lto_priv.43+0x3b8>)
 8008436:	6820      	ldr	r0, [r4, #0]
 8008438:	6861      	ldr	r1, [r4, #4]
 800843a:	c303      	stmia	r3!, {r0, r1}
 800843c:	e6a7      	b.n	800818e <process_tapping.lto_priv.43+0xde>

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
 800843e:	464f      	mov	r7, r9
 8008440:	f1b9 0f00 	cmp.w	r9, #0
 8008444:	d004      	beq.n	8008450 <process_tapping.lto_priv.43+0x3a0>
 8008446:	f1b8 0f00 	cmp.w	r8, #0
 800844a:	f43f af1e 	beq.w	800828a <process_tapping.lto_priv.43+0x1da>
 800844e:	e70f      	b.n	8008270 <process_tapping.lto_priv.43+0x1c0>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
 8008450:	2201      	movs	r2, #1
 8008452:	f362 1307 	bfi	r3, r2, #4, #4
                    debug_tapping_key();
                    process_action(&tapping_key);
 8008456:	4650      	mov	r0, sl
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
 8008458:	f88a 3006 	strb.w	r3, [sl, #6]
                    debug_tapping_key();
                    process_action(&tapping_key);
 800845c:	f7ff fa90 	bl	8007980 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
 8008460:	f89a 3006 	ldrb.w	r3, [sl, #6]
 8008464:	71a3      	strb	r3, [r4, #6]
 8008466:	e692      	b.n	800818e <process_tapping.lto_priv.43+0xde>
 8008468:	20001538 	.word	0x20001538
 800846c:	f3af 8000 	nop.w

08008470 <clear_keyboard_but_mods>:
    clear_mods();
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
 8008470:	4b10      	ldr	r3, [pc, #64]	; (80084b4 <clear_keyboard_but_mods+0x44>)
/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
 8008472:	4811      	ldr	r0, [pc, #68]	; (80084b8 <clear_keyboard_but_mods+0x48>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2200      	movs	r2, #0
 8008478:	b510      	push	{r4, lr}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
 800847a:	4611      	mov	r1, r2
/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
 800847c:	7002      	strb	r2, [r0, #0]
 800847e:	f103 020f 	add.w	r2, r3, #15

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
 8008482:	f803 1f01 	strb.w	r1, [r3, #1]!
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 8008486:	4293      	cmp	r3, r2
        keyboard_report->raw[i] = 0;
 8008488:	f04f 0400 	mov.w	r4, #0
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 800848c:	d1f9      	bne.n	8008482 <clear_keyboard_but_mods+0x12>
    clear_weak_mods();
    clear_keys();
    send_keyboard_report();
 800848e:	f000 fd7f 	bl	8008f90 <send_keyboard_report>
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
 8008492:	4b0a      	ldr	r3, [pc, #40]	; (80084bc <clear_keyboard_but_mods+0x4c>)
    mousekey_repeat = 0;
 8008494:	490a      	ldr	r1, [pc, #40]	; (80084c0 <clear_keyboard_but_mods+0x50>)
    mousekey_accel = 0;
 8008496:	4a0b      	ldr	r2, [pc, #44]	; (80084c4 <clear_keyboard_but_mods+0x54>)
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
 8008498:	601c      	str	r4, [r3, #0]
 800849a:	711c      	strb	r4, [r3, #4]
    mousekey_repeat = 0;
 800849c:	700c      	strb	r4, [r1, #0]
    mousekey_accel = 0;
 800849e:	7014      	strb	r4, [r2, #0]
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    mousekey_send();
 80084a0:	f000 fd4e 	bl	8008f40 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
 80084a4:	4620      	mov	r0, r4
 80084a6:	f7ff fa5b 	bl	8007960 <host_system_send>
    host_consumer_send(0);
 80084aa:	4620      	mov	r0, r4
#endif
}
 80084ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mousekey_clear();
    mousekey_send();
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    host_consumer_send(0);
 80084b0:	f7ff ba46 	b.w	8007940 <host_consumer_send>
 80084b4:	20001230 	.word	0x20001230
 80084b8:	200014d8 	.word	0x200014d8
 80084bc:	20001568 	.word	0x20001568
 80084c0:	200014da 	.word	0x200014da
 80084c4:	200012fc 	.word	0x200012fc
 80084c8:	f3af 8000 	nop.w
 80084cc:	f3af 8000 	nop.w

080084d0 <clear_keyboard>:
/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
void del_mods(uint8_t mods) { real_mods &= ~mods; }
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
 80084d0:	4b02      	ldr	r3, [pc, #8]	; (80084dc <clear_keyboard+0xc>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	701a      	strb	r2, [r3, #0]
}

void clear_keyboard(void)
{
    clear_mods();
    clear_keyboard_but_mods();
 80084d6:	f7ff bfcb 	b.w	8008470 <clear_keyboard_but_mods>
 80084da:	bf00      	nop
 80084dc:	200014dc 	.word	0x200014dc

080084e0 <unregister_code>:
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}

void unregister_code(uint8_t code)
{
 80084e0:	b510      	push	{r4, lr}
    if (code == KC_NO) {
 80084e2:	b188      	cbz	r0, 8008508 <unregister_code+0x28>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
 80084e4:	1f03      	subs	r3, r0, #4
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2ba0      	cmp	r3, #160	; 0xa0
 80084ea:	d90e      	bls.n	800850a <unregister_code+0x2a>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
 80084ec:	f100 0320 	add.w	r3, r0, #32
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b07      	cmp	r3, #7
 80084f4:	d933      	bls.n	800855e <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
 80084f6:	f100 035b 	add.w	r3, r0, #91	; 0x5b
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d939      	bls.n	8008574 <unregister_code+0x94>
        host_system_send(0);
    }
    else if IS_CONSUMER(code) {
 8008500:	3058      	adds	r0, #88	; 0x58
 8008502:	b2c0      	uxtb	r0, r0
 8008504:	2812      	cmp	r0, #18
 8008506:	d918      	bls.n	800853a <unregister_code+0x5a>
 8008508:	bd10      	pop	{r4, pc}
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
 800850a:	4b1d      	ldr	r3, [pc, #116]	; (8008580 <unregister_code+0xa0>)
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	b1cb      	cbz	r3, 8008544 <unregister_code+0x64>
 8008510:	4b1c      	ldr	r3, [pc, #112]	; (8008584 <unregister_code+0xa4>)
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	b1b3      	cbz	r3, 8008544 <unregister_code+0x64>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
 8008516:	08c3      	lsrs	r3, r0, #3
 8008518:	2b0e      	cmp	r3, #14
 800851a:	d80a      	bhi.n	8008532 <unregister_code+0x52>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
 800851c:	4a1a      	ldr	r2, [pc, #104]	; (8008588 <unregister_code+0xa8>)
 800851e:	f000 0007 	and.w	r0, r0, #7
 8008522:	6811      	ldr	r1, [r2, #0]
 8008524:	2201      	movs	r2, #1
 8008526:	440b      	add	r3, r1
 8008528:	7859      	ldrb	r1, [r3, #1]
 800852a:	4082      	lsls	r2, r0
 800852c:	ea21 0202 	bic.w	r2, r1, r2
 8008530:	705a      	strb	r2, [r3, #1]
        host_consumer_send(0);
    }
}
 8008532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
        del_mods(MOD_BIT(code));
        send_keyboard_report();
 8008536:	f000 bd2b 	b.w	8008f90 <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
        host_system_send(0);
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(0);
 800853a:	2000      	movs	r0, #0
    }
}
 800853c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    else if IS_SYSTEM(code) {
        host_system_send(0);
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(0);
 8008540:	f7ff b9fe 	b.w	8007940 <host_consumer_send>
 8008544:	4b10      	ldr	r3, [pc, #64]	; (8008588 <unregister_code+0xa8>)
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
            keyboard_report->keys[i] = 0;
 8008546:	2400      	movs	r4, #0
 8008548:	6819      	ldr	r1, [r3, #0]
 800854a:	1c4b      	adds	r3, r1, #1
 800854c:	310f      	adds	r1, #15
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
 800854e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8008552:	4282      	cmp	r2, r0
            keyboard_report->keys[i] = 0;
 8008554:	bf08      	it	eq
 8008556:	701c      	strbeq	r4, [r3, #0]
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 8008558:	428b      	cmp	r3, r1
 800855a:	d1f8      	bne.n	800854e <unregister_code+0x6e>
 800855c:	e7e9      	b.n	8008532 <unregister_code+0x52>
    else if IS_KEY(code) {
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
        del_mods(MOD_BIT(code));
 800855e:	f000 0307 	and.w	r3, r0, #7
 8008562:	2001      	movs	r0, #1
 8008564:	4098      	lsls	r0, r3
 8008566:	b2c0      	uxtb	r0, r0
 8008568:	f000 fd02 	bl	8008f70 <del_mods>
        host_system_send(0);
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(0);
    }
}
 800856c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
        del_mods(MOD_BIT(code));
        send_keyboard_report();
 8008570:	f000 bd0e 	b.w	8008f90 <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
        host_system_send(0);
 8008574:	2000      	movs	r0, #0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(0);
    }
}
 8008576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else if IS_MOD(code) {
        del_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(0);
 800857a:	f7ff b9f1 	b.w	8007960 <host_system_send>
 800857e:	bf00      	nop
 8008580:	2000122d 	.word	0x2000122d
 8008584:	20001239 	.word	0x20001239
 8008588:	20001230 	.word	0x20001230
 800858c:	f3af 8000 	nop.w

08008590 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
 8008590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (code == KC_NO) {
 8008594:	4604      	mov	r4, r0
 8008596:	2800      	cmp	r0, #0
 8008598:	d05b      	beq.n	8008652 <register_code+0xc2>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
 800859a:	1f03      	subs	r3, r0, #4
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2ba0      	cmp	r3, #160	; 0xa0
 80085a0:	d959      	bls.n	8008656 <register_code+0xc6>
        {
            add_key(code);
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
 80085a2:	f100 0320 	add.w	r3, r0, #32
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b07      	cmp	r3, #7
 80085aa:	f240 8081 	bls.w	80086b0 <register_code+0x120>
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
 80085ae:	f100 035b 	add.w	r3, r0, #91	; 0x5b
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d970      	bls.n	800869a <register_code+0x10a>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
 80085b8:	f100 0358 	add.w	r3, r0, #88	; 0x58
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b12      	cmp	r3, #18
 80085c0:	d847      	bhi.n	8008652 <register_code+0xc2>
        host_consumer_send(KEYCODE2CONSUMER(code));
 80085c2:	28a8      	cmp	r0, #168	; 0xa8
 80085c4:	f000 81ef 	beq.w	80089a6 <register_code+0x416>
 80085c8:	28a9      	cmp	r0, #169	; 0xa9
 80085ca:	f000 81ee 	beq.w	80089aa <register_code+0x41a>
 80085ce:	28aa      	cmp	r0, #170	; 0xaa
 80085d0:	f000 8118 	beq.w	8008804 <register_code+0x274>
 80085d4:	28ab      	cmp	r0, #171	; 0xab
 80085d6:	f000 820a 	beq.w	80089ee <register_code+0x45e>
 80085da:	28ac      	cmp	r0, #172	; 0xac
 80085dc:	f000 8209 	beq.w	80089f2 <register_code+0x462>
 80085e0:	28ad      	cmp	r0, #173	; 0xad
 80085e2:	f000 8208 	beq.w	80089f6 <register_code+0x466>
 80085e6:	28b0      	cmp	r0, #176	; 0xb0
 80085e8:	f000 820b 	beq.w	8008a02 <register_code+0x472>
 80085ec:	28ae      	cmp	r0, #174	; 0xae
 80085ee:	f000 820a 	beq.w	8008a06 <register_code+0x476>
 80085f2:	28af      	cmp	r0, #175	; 0xaf
 80085f4:	f000 8209 	beq.w	8008a0a <register_code+0x47a>
 80085f8:	28b1      	cmp	r0, #177	; 0xb1
 80085fa:	f000 8209 	beq.w	8008a10 <register_code+0x480>
 80085fe:	28b2      	cmp	r0, #178	; 0xb2
 8008600:	f000 8209 	beq.w	8008a16 <register_code+0x486>
 8008604:	28b3      	cmp	r0, #179	; 0xb3
 8008606:	f000 8209 	beq.w	8008a1c <register_code+0x48c>
 800860a:	28b4      	cmp	r0, #180	; 0xb4
 800860c:	f000 8209 	beq.w	8008a22 <register_code+0x492>
 8008610:	28b5      	cmp	r0, #181	; 0xb5
 8008612:	f000 8209 	beq.w	8008a28 <register_code+0x498>
 8008616:	28b6      	cmp	r0, #182	; 0xb6
 8008618:	f000 820c 	beq.w	8008a34 <register_code+0x4a4>
 800861c:	28b7      	cmp	r0, #183	; 0xb7
 800861e:	f000 820f 	beq.w	8008a40 <register_code+0x4b0>
 8008622:	28b8      	cmp	r0, #184	; 0xb8
 8008624:	f000 8209 	beq.w	8008a3a <register_code+0x4aa>
 8008628:	28b9      	cmp	r0, #185	; 0xb9
 800862a:	f000 8200 	beq.w	8008a2e <register_code+0x49e>
 800862e:	2cba      	cmp	r4, #186	; 0xba
 8008630:	f240 202a 	movw	r0, #554	; 0x22a
 8008634:	bf18      	it	ne
 8008636:	2000      	movne	r0, #0
    }
}
 8008638:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
 800863c:	f7ff b980 	b.w	8007940 <host_consumer_send>

bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
 8008640:	4bdb      	ldr	r3, [pc, #876]	; (80089b0 <register_code+0x420>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	2b22      	cmp	r3, #34	; 0x22
 8008648:	d10f      	bne.n	800866a <register_code+0xda>
                return false;
            return (command_extra(code) || command_common(code));
 800864a:	4620      	mov	r0, r4
 800864c:	f000 fb48 	bl	8008ce0 <command_common.lto_priv.36>
    }
#endif

    else if IS_KEY(code) {
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
 8008650:	b158      	cbz	r0, 800866a <register_code+0xda>
 8008652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    switch (command_state) {
 8008656:	4ad7      	ldr	r2, [pc, #860]	; (80089b4 <register_code+0x424>)
 8008658:	7813      	ldrb	r3, [r2, #0]
 800865a:	2b01      	cmp	r3, #1
 800865c:	f000 811c 	beq.w	8008898 <register_code+0x308>
 8008660:	d3ee      	bcc.n	8008640 <register_code+0xb0>
 8008662:	2b02      	cmp	r3, #2
 8008664:	d02f      	beq.n	80086c6 <register_code+0x136>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
 8008666:	2300      	movs	r3, #0
 8008668:	7013      	strb	r3, [r2, #0]

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
 800866a:	4bd3      	ldr	r3, [pc, #844]	; (80089b8 <register_code+0x428>)
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	f000 8182 	beq.w	8008978 <register_code+0x3e8>
 8008674:	4bd1      	ldr	r3, [pc, #836]	; (80089bc <register_code+0x42c>)
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	f000 817d 	beq.w	8008978 <register_code+0x3e8>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
 800867e:	08e3      	lsrs	r3, r4, #3
 8008680:	2b0e      	cmp	r3, #14
 8008682:	d81c      	bhi.n	80086be <register_code+0x12e>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
 8008684:	4aca      	ldr	r2, [pc, #808]	; (80089b0 <register_code+0x420>)
 8008686:	f004 0407 	and.w	r4, r4, #7
 800868a:	6811      	ldr	r1, [r2, #0]
 800868c:	2201      	movs	r2, #1
 800868e:	440b      	add	r3, r1
 8008690:	7859      	ldrb	r1, [r3, #1]
 8008692:	40a2      	lsls	r2, r4
 8008694:	430a      	orrs	r2, r1
 8008696:	705a      	strb	r2, [r3, #1]
 8008698:	e011      	b.n	80086be <register_code+0x12e>
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
 800869a:	28a5      	cmp	r0, #165	; 0xa5
 800869c:	f000 816a 	beq.w	8008974 <register_code+0x3e4>
 80086a0:	28a6      	cmp	r0, #166	; 0xa6
 80086a2:	bf0c      	ite	eq
 80086a4:	2082      	moveq	r0, #130	; 0x82
 80086a6:	2083      	movne	r0, #131	; 0x83
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
 80086a8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
 80086ac:	f7ff b958 	b.w	8007960 <host_system_send>
            add_key(code);
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
 80086b0:	f000 0407 	and.w	r4, r0, #7
 80086b4:	2001      	movs	r0, #1
 80086b6:	40a0      	lsls	r0, r4
 80086b8:	b2c0      	uxtb	r0, r0
 80086ba:	f000 fc61 	bl	8008f80 <add_mods>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
 80086be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
 80086c2:	f000 bc65 	b.w	8008f90 <send_keyboard_report>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
 80086c6:	1fc3      	subs	r3, r0, #7
 80086c8:	2b4b      	cmp	r3, #75	; 0x4b
 80086ca:	d8c2      	bhi.n	8008652 <register_code+0xc2>
 80086cc:	a101      	add	r1, pc, #4	; (adr r1, 80086d4 <register_code+0x144>)
 80086ce:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086d2:	bf00      	nop
 80086d4:	08008857 	.word	0x08008857
 80086d8:	08008653 	.word	0x08008653
 80086dc:	08008653 	.word	0x08008653
 80086e0:	08008653 	.word	0x08008653
 80086e4:	08008653 	.word	0x08008653
 80086e8:	08008653 	.word	0x08008653
 80086ec:	08008653 	.word	0x08008653
 80086f0:	08008653 	.word	0x08008653
 80086f4:	08008653 	.word	0x08008653
 80086f8:	08008653 	.word	0x08008653
 80086fc:	08008653 	.word	0x08008653
 8008700:	08008653 	.word	0x08008653
 8008704:	08008653 	.word	0x08008653
 8008708:	08008829 	.word	0x08008829
 800870c:	08008653 	.word	0x08008653
 8008710:	08008653 	.word	0x08008653
 8008714:	08008653 	.word	0x08008653
 8008718:	08008653 	.word	0x08008653
 800871c:	08008653 	.word	0x08008653
 8008720:	08008653 	.word	0x08008653
 8008724:	08008653 	.word	0x08008653
 8008728:	08008653 	.word	0x08008653
 800872c:	08008653 	.word	0x08008653
 8008730:	08008817 	.word	0x08008817
 8008734:	08008817 	.word	0x08008817
 8008738:	08008817 	.word	0x08008817
 800873c:	08008817 	.word	0x08008817
 8008740:	08008817 	.word	0x08008817
 8008744:	08008817 	.word	0x08008817
 8008748:	08008653 	.word	0x08008653
 800874c:	08008653 	.word	0x08008653
 8008750:	08008653 	.word	0x08008653
 8008754:	08008653 	.word	0x08008653
 8008758:	08008653 	.word	0x08008653
 800875c:	08008829 	.word	0x08008829
 8008760:	08008653 	.word	0x08008653
 8008764:	08008653 	.word	0x08008653
 8008768:	08008653 	.word	0x08008653
 800876c:	08008653 	.word	0x08008653
 8008770:	08008653 	.word	0x08008653
 8008774:	08008653 	.word	0x08008653
 8008778:	08008653 	.word	0x08008653
 800877c:	08008653 	.word	0x08008653
 8008780:	08008653 	.word	0x08008653
 8008784:	08008653 	.word	0x08008653
 8008788:	08008653 	.word	0x08008653
 800878c:	08008653 	.word	0x08008653
 8008790:	08008653 	.word	0x08008653
 8008794:	08008653 	.word	0x08008653
 8008798:	08008653 	.word	0x08008653
 800879c:	08008653 	.word	0x08008653
 80087a0:	08008653 	.word	0x08008653
 80087a4:	08008653 	.word	0x08008653
 80087a8:	08008653 	.word	0x08008653
 80087ac:	08008653 	.word	0x08008653
 80087b0:	08008653 	.word	0x08008653
 80087b4:	08008653 	.word	0x08008653
 80087b8:	08008653 	.word	0x08008653
 80087bc:	08008653 	.word	0x08008653
 80087c0:	08008653 	.word	0x08008653
 80087c4:	08008653 	.word	0x08008653
 80087c8:	08008653 	.word	0x08008653
 80087cc:	08008653 	.word	0x08008653
 80087d0:	08008653 	.word	0x08008653
 80087d4:	08008653 	.word	0x08008653
 80087d8:	08008653 	.word	0x08008653
 80087dc:	08008653 	.word	0x08008653
 80087e0:	08008653 	.word	0x08008653
 80087e4:	08008809 	.word	0x08008809
 80087e8:	08008653 	.word	0x08008653
 80087ec:	08008653 	.word	0x08008653
 80087f0:	0800888b 	.word	0x0800888b
 80087f4:	08008653 	.word	0x08008653
 80087f8:	08008653 	.word	0x08008653
 80087fc:	08008849 	.word	0x08008849
 8008800:	0800883b 	.word	0x0800883b
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
 8008804:	20ea      	movs	r0, #234	; 0xea
 8008806:	e717      	b.n	8008638 <register_code+0xa8>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
 8008808:	4b6d      	ldr	r3, [pc, #436]	; (80089c0 <register_code+0x430>)
 800880a:	210a      	movs	r1, #10
 800880c:	7818      	ldrb	r0, [r3, #0]
    }
}
 800880e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008812:	f000 ba25 	b.w	8008c60 <mousekey_param_inc.lto_priv.38>
 8008816:	f1a0 031e 	sub.w	r3, r0, #30
 800881a:	4a6a      	ldr	r2, [pc, #424]	; (80089c4 <register_code+0x434>)
 800881c:	b2db      	uxtb	r3, r3
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
 800881e:	5cd2      	ldrb	r2, [r2, r3]
 8008820:	4b67      	ldr	r3, [pc, #412]	; (80089c0 <register_code+0x430>)
 8008822:	701a      	strb	r2, [r3, #0]
 8008824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        case KC_SLASH: /* ? */
            mousekey_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
 8008828:	4b65      	ldr	r3, [pc, #404]	; (80089c0 <register_code+0x430>)
 800882a:	7819      	ldrb	r1, [r3, #0]
 800882c:	2900      	cmp	r1, #0
 800882e:	f000 80e4 	beq.w	80089fa <register_code+0x46a>
                mousekey_param = 0;
 8008832:	2200      	movs	r2, #0
 8008834:	701a      	strb	r2, [r3, #0]
 8008836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
 800883a:	4b61      	ldr	r3, [pc, #388]	; (80089c0 <register_code+0x430>)
 800883c:	2101      	movs	r1, #1
 800883e:	7818      	ldrb	r0, [r3, #0]
 8008840:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008844:	f000 ba0c 	b.w	8008c60 <mousekey_param_inc.lto_priv.38>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
 8008848:	4b5d      	ldr	r3, [pc, #372]	; (80089c0 <register_code+0x430>)
 800884a:	2101      	movs	r1, #1
 800884c:	7818      	ldrb	r0, [r3, #0]
 800884e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008852:	f000 b9cd 	b.w	8008bf0 <mousekey_param_dec.lto_priv.37>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
 8008856:	f8df 8180 	ldr.w	r8, [pc, #384]	; 80089d8 <register_code+0x448>
            mk_interval = MOUSEKEY_INTERVAL;
 800885a:	f8df e180 	ldr.w	lr, [pc, #384]	; 80089dc <register_code+0x44c>
            mk_max_speed = MOUSEKEY_MAX_SPEED;
 800885e:	4e5a      	ldr	r6, [pc, #360]	; (80089c8 <register_code+0x438>)
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 8008860:	4c5a      	ldr	r4, [pc, #360]	; (80089cc <register_code+0x43c>)
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 8008862:	495b      	ldr	r1, [pc, #364]	; (80089d0 <register_code+0x440>)
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 8008864:	4b5b      	ldr	r3, [pc, #364]	; (80089d4 <register_code+0x444>)
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
 8008866:	f04f 091e 	mov.w	r9, #30
            mk_interval = MOUSEKEY_INTERVAL;
 800886a:	f04f 0c32 	mov.w	ip, #50	; 0x32
            mk_max_speed = MOUSEKEY_MAX_SPEED;
 800886e:	270a      	movs	r7, #10
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 8008870:	2514      	movs	r5, #20
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 8008872:	2008      	movs	r0, #8
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 8008874:	2228      	movs	r2, #40	; 0x28
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
 8008876:	f888 9000 	strb.w	r9, [r8]
            mk_interval = MOUSEKEY_INTERVAL;
 800887a:	f88e c000 	strb.w	ip, [lr]
            mk_max_speed = MOUSEKEY_MAX_SPEED;
 800887e:	7037      	strb	r7, [r6, #0]
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 8008880:	7025      	strb	r5, [r4, #0]
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 8008882:	7008      	strb	r0, [r1, #0]
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 8008884:	701a      	strb	r2, [r3, #0]
 8008886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
 800888a:	4b4d      	ldr	r3, [pc, #308]	; (80089c0 <register_code+0x430>)
 800888c:	210a      	movs	r1, #10
 800888e:	7818      	ldrb	r0, [r3, #0]
 8008890:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008894:	f000 b9ac 	b.w	8008bf0 <mousekey_param_dec.lto_priv.37>
            if (!IS_COMMAND())
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
 8008898:	4b45      	ldr	r3, [pc, #276]	; (80089b0 <register_code+0x420>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	2b22      	cmp	r3, #34	; 0x22
 80088a0:	f43f aed3 	beq.w	800864a <register_code+0xba>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
 80088a4:	f1a0 030b 	sub.w	r3, r0, #11
 80088a8:	2b2d      	cmp	r3, #45	; 0x2d
 80088aa:	f63f aede 	bhi.w	800866a <register_code+0xda>
 80088ae:	a101      	add	r1, pc, #4	; (adr r1, 80088b4 <register_code+0x324>)
 80088b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088b4:	08008653 	.word	0x08008653
 80088b8:	0800866b 	.word	0x0800866b
 80088bc:	0800866b 	.word	0x0800866b
 80088c0:	0800866b 	.word	0x0800866b
 80088c4:	0800866b 	.word	0x0800866b
 80088c8:	0800896d 	.word	0x0800896d
 80088cc:	0800866b 	.word	0x0800866b
 80088d0:	0800866b 	.word	0x0800866b
 80088d4:	0800866b 	.word	0x0800866b
 80088d8:	08008667 	.word	0x08008667
 80088dc:	0800866b 	.word	0x0800866b
 80088e0:	0800866b 	.word	0x0800866b
 80088e4:	0800866b 	.word	0x0800866b
 80088e8:	0800866b 	.word	0x0800866b
 80088ec:	0800866b 	.word	0x0800866b
 80088f0:	0800866b 	.word	0x0800866b
 80088f4:	0800866b 	.word	0x0800866b
 80088f8:	0800866b 	.word	0x0800866b
 80088fc:	0800866b 	.word	0x0800866b
 8008900:	0800866b 	.word	0x0800866b
 8008904:	0800866b 	.word	0x0800866b
 8008908:	0800866b 	.word	0x0800866b
 800890c:	0800866b 	.word	0x0800866b
 8008910:	0800866b 	.word	0x0800866b
 8008914:	0800866b 	.word	0x0800866b
 8008918:	0800866b 	.word	0x0800866b
 800891c:	0800866b 	.word	0x0800866b
 8008920:	0800866b 	.word	0x0800866b
 8008924:	0800866b 	.word	0x0800866b
 8008928:	0800866b 	.word	0x0800866b
 800892c:	08008667 	.word	0x08008667
 8008930:	0800866b 	.word	0x0800866b
 8008934:	0800866b 	.word	0x0800866b
 8008938:	0800866b 	.word	0x0800866b
 800893c:	0800866b 	.word	0x0800866b
 8008940:	0800866b 	.word	0x0800866b
 8008944:	0800866b 	.word	0x0800866b
 8008948:	0800866b 	.word	0x0800866b
 800894c:	0800866b 	.word	0x0800866b
 8008950:	0800866b 	.word	0x0800866b
 8008954:	0800866b 	.word	0x0800866b
 8008958:	0800866b 	.word	0x0800866b
 800895c:	0800866b 	.word	0x0800866b
 8008960:	0800866b 	.word	0x0800866b
 8008964:	0800866b 	.word	0x0800866b
 8008968:	08008653 	.word	0x08008653
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
            print("M> ");
            command_state = MOUSEKEY;
 800896c:	2302      	movs	r3, #2
 800896e:	7013      	strb	r3, [r2, #0]
 8008970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
 8008974:	2081      	movs	r0, #129	; 0x81
 8008976:	e697      	b.n	80086a8 <register_code+0x118>
 8008978:	4a0d      	ldr	r2, [pc, #52]	; (80089b0 <register_code+0x420>)

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
 800897a:	2300      	movs	r3, #0
 800897c:	6817      	ldr	r7, [r2, #0]
 800897e:	20ff      	movs	r0, #255	; 0xff
 8008980:	1c79      	adds	r1, r7, #1
 8008982:	e001      	b.n	8008988 <register_code+0x3f8>
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
 8008984:	2b0e      	cmp	r3, #14
 8008986:	d02b      	beq.n	80089e0 <register_code+0x450>
        if (keyboard_report->keys[i] == code) {
 8008988:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800898c:	b2de      	uxtb	r6, r3
 800898e:	4294      	cmp	r4, r2
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
 8008990:	b245      	sxtb	r5, r0
 8008992:	f103 0301 	add.w	r3, r3, #1
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
 8008996:	f43f ae92 	beq.w	80086be <register_code+0x12e>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
 800899a:	3501      	adds	r5, #1
 800899c:	d1f2      	bne.n	8008984 <register_code+0x3f4>
 800899e:	2a00      	cmp	r2, #0
 80089a0:	bf08      	it	eq
 80089a2:	4630      	moveq	r0, r6
 80089a4:	e7ee      	b.n	8008984 <register_code+0x3f4>
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
 80089a6:	20e2      	movs	r0, #226	; 0xe2
 80089a8:	e646      	b.n	8008638 <register_code+0xa8>
 80089aa:	20e9      	movs	r0, #233	; 0xe9
 80089ac:	e644      	b.n	8008638 <register_code+0xa8>
 80089ae:	bf00      	nop
 80089b0:	20001230 	.word	0x20001230
 80089b4:	20001534 	.word	0x20001534
 80089b8:	2000122d 	.word	0x2000122d
 80089bc:	20001239 	.word	0x20001239
 80089c0:	200012f4 	.word	0x200012f4
 80089c4:	08009600 	.word	0x08009600
 80089c8:	2000122e 	.word	0x2000122e
 80089cc:	20001235 	.word	0x20001235
 80089d0:	20001237 	.word	0x20001237
 80089d4:	20001236 	.word	0x20001236
 80089d8:	20001238 	.word	0x20001238
 80089dc:	20001234 	.word	0x20001234
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
 80089e0:	b240      	sxtb	r0, r0
 80089e2:	1c43      	adds	r3, r0, #1
 80089e4:	f43f ae6b 	beq.w	80086be <register_code+0x12e>
            keyboard_report->keys[empty] = code;
 80089e8:	4438      	add	r0, r7
 80089ea:	7084      	strb	r4, [r0, #2]
 80089ec:	e667      	b.n	80086be <register_code+0x12e>
 80089ee:	20b5      	movs	r0, #181	; 0xb5
 80089f0:	e622      	b.n	8008638 <register_code+0xa8>
 80089f2:	20b6      	movs	r0, #182	; 0xb6
 80089f4:	e620      	b.n	8008638 <register_code+0xa8>
 80089f6:	20b7      	movs	r0, #183	; 0xb7
 80089f8:	e61e      	b.n	8008638 <register_code+0xa8>
        case KC_ESC:
            if (mousekey_param) {
                mousekey_param = 0;
            } else {
                print("C> ");
                command_state = CONSOLE;
 80089fa:	2301      	movs	r3, #1
 80089fc:	7013      	strb	r3, [r2, #0]
 80089fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a02:	20cc      	movs	r0, #204	; 0xcc
 8008a04:	e618      	b.n	8008638 <register_code+0xa8>
 8008a06:	20cd      	movs	r0, #205	; 0xcd
 8008a08:	e616      	b.n	8008638 <register_code+0xa8>
 8008a0a:	f240 1083 	movw	r0, #387	; 0x183
 8008a0e:	e613      	b.n	8008638 <register_code+0xa8>
 8008a10:	f44f 70c5 	mov.w	r0, #394	; 0x18a
 8008a14:	e610      	b.n	8008638 <register_code+0xa8>
 8008a16:	f44f 70c9 	mov.w	r0, #402	; 0x192
 8008a1a:	e60d      	b.n	8008638 <register_code+0xa8>
 8008a1c:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8008a20:	e60a      	b.n	8008638 <register_code+0xa8>
 8008a22:	f240 2021 	movw	r0, #545	; 0x221
 8008a26:	e607      	b.n	8008638 <register_code+0xa8>
 8008a28:	f240 2023 	movw	r0, #547	; 0x223
 8008a2c:	e604      	b.n	8008638 <register_code+0xa8>
 8008a2e:	f240 2027 	movw	r0, #551	; 0x227
 8008a32:	e601      	b.n	8008638 <register_code+0xa8>
 8008a34:	f44f 7009 	mov.w	r0, #548	; 0x224
 8008a38:	e5fe      	b.n	8008638 <register_code+0xa8>
 8008a3a:	f240 2026 	movw	r0, #550	; 0x226
 8008a3e:	e5fb      	b.n	8008638 <register_code+0xa8>
 8008a40:	f240 2025 	movw	r0, #549	; 0x225
 8008a44:	e5f8      	b.n	8008638 <register_code+0xa8>
 8008a46:	bf00      	nop
 8008a48:	f3af 8000 	nop.w
 8008a4c:	f3af 8000 	nop.w

08008a50 <bootloader_jump>:
/* This code should be checked whether it runs correctly on platforms */
#define SYMVAL(sym) (uint32_t)(((uint8_t *)&(sym)) - ((uint8_t *)0))
extern uint32_t __ram0_end__;

void bootloader_jump(void) {
  *((unsigned long *)(SYMVAL(__ram0_end__) - 4)) = 0xDEADBEEF; // set magic flag => reset handler will jump into boot loader
 8008a50:	4b07      	ldr	r3, [pc, #28]	; (8008a70 <bootloader_jump+0x20>)
 8008a52:	4a08      	ldr	r2, [pc, #32]	; (8008a74 <bootloader_jump+0x24>)
 8008a54:	601a      	str	r2, [r3, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008a56:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008a5a:	4907      	ldr	r1, [pc, #28]	; (8008a78 <bootloader_jump+0x28>)
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008a5c:	4b07      	ldr	r3, [pc, #28]	; (8008a7c <bootloader_jump+0x2c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008a5e:	68ca      	ldr	r2, [r1, #12]
 8008a60:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008a64:	4313      	orrs	r3, r2
 8008a66:	60cb      	str	r3, [r1, #12]
 8008a68:	f3bf 8f4f 	dsb	sy

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8008a6c:	bf00      	nop
 8008a6e:	e7fd      	b.n	8008a6c <bootloader_jump+0x1c>
 8008a70:	20004ffc 	.word	0x20004ffc
 8008a74:	deadbeef 	.word	0xdeadbeef
 8008a78:	e000ed00 	.word	0xe000ed00
 8008a7c:	05fa0004 	.word	0x05fa0004

08008a80 <action_for_key>:
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    }
}
 8008a80:	f04f 0004 	mov.w	r0, #4
static action_t keycode_to_action(uint8_t keycode);


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
 8008a84:	b082      	sub	sp, #8
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    }
}
 8008a86:	b002      	add	sp, #8
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	f3af 8000 	nop.w

08008a90 <chTMStartMeasurementX.constprop.21>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8008a90:	4b01      	ldr	r3, [pc, #4]	; (8008a98 <chTMStartMeasurementX.constprop.21+0x8>)
 8008a92:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8008a94:	6083      	str	r3, [r0, #8]
 8008a96:	4770      	bx	lr
 8008a98:	e0001000 	.word	0xe0001000
 8008a9c:	f3af 8000 	nop.w

08008aa0 <chThdDequeueAllI.constprop.19>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8008aa0:	b430      	push	{r4, r5}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8008aa2:	6804      	ldr	r4, [r0, #0]

  while (queue_notempty(tqp)) {
 8008aa4:	4284      	cmp	r4, r0
 8008aa6:	d013      	beq.n	8008ad0 <chThdDequeueAllI.constprop.19+0x30>

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8008aa8:	2500      	movs	r5, #0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8008aaa:	6822      	ldr	r2, [r4, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
 8008aac:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <chThdDequeueAllI.constprop.19+0x34>)
 8008aae:	68a1      	ldr	r1, [r4, #8]
 8008ab0:	6002      	str	r2, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8008ab2:	6050      	str	r0, [r2, #4]
 8008ab4:	6225      	str	r5, [r4, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8008ab6:	7725      	strb	r5, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8008ab8:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8008aba:	689a      	ldr	r2, [r3, #8]
 8008abc:	428a      	cmp	r2, r1
 8008abe:	d2fb      	bcs.n	8008ab8 <chThdDequeueAllI.constprop.19+0x18>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8008ac0:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8008ac2:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8008ac4:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8008ac6:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8008ac8:	605c      	str	r4, [r3, #4]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8008aca:	6804      	ldr	r4, [r0, #0]
 8008acc:	4284      	cmp	r4, r0
 8008ace:	d1ec      	bne.n	8008aaa <chThdDequeueAllI.constprop.19+0xa>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8008ad0:	bc30      	pop	{r4, r5}
 8008ad2:	4770      	bx	lr
 8008ad4:	20001300 	.word	0x20001300
 8008ad8:	f3af 8000 	nop.w
 8008adc:	f3af 8000 	nop.w

08008ae0 <_usb_reset.constprop.15>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
 8008ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 8008ae4:	4c1c      	ldr	r4, [pc, #112]	; (8008b58 <_usb_reset.constprop.15+0x78>)

  /* Resetting internal state.*/
  usbp->status        = 0;
 8008ae6:	2300      	movs	r3, #0
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 8008ae8:	2202      	movs	r2, #2
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8008aea:	4619      	mov	r1, r3

  /* State transition.*/
  usbp->state         = USB_READY;

  /* Resetting internal state.*/
  usbp->status        = 0;
 8008aec:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
  usbp->address       = 0;
 8008af0:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
  usbp->configuration = 0;
 8008af4:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
  usbp->transmitting  = 0;
 8008af8:	8123      	strh	r3, [r4, #8]
  usbp->receiving     = 0;
 8008afa:	8163      	strh	r3, [r4, #10]
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 8008afc:	7022      	strb	r2, [r4, #0]
 8008afe:	f104 0308 	add.w	r3, r4, #8
 8008b02:	f104 0228 	add.w	r2, r4, #40	; 0x28
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8008b06:	f843 1f04 	str.w	r1, [r3, #4]!
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8008b0a:	4293      	cmp	r3, r2
    usbp->epc[i] = NULL;
 8008b0c:	f04f 0500 	mov.w	r5, #0
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8008b10:	d1f9      	bne.n	8008b06 <_usb_reset.constprop.15+0x26>
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8008b12:	6862      	ldr	r2, [r4, #4]
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 8008b14:	4b11      	ldr	r3, [pc, #68]	; (8008b5c <_usb_reset.constprop.15+0x7c>)
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8008b16:	68d2      	ldr	r2, [r2, #12]
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
  STM32_USB->DADDR  = DADDR_EF;
 8008b18:	2180      	movs	r1, #128	; 0x80
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
 8008b1a:	42aa      	cmp	r2, r5
 8008b1c:	bf0c      	ite	eq
 8008b1e:	f44f 471c 	moveq.w	r7, #39936	; 0x9c00
 8008b22:	f44f 471e 	movne.w	r7, #40448	; 0x9e00
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 8008b26:	2240      	movs	r2, #64	; 0x40

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 8008b28:	4e0d      	ldr	r6, [pc, #52]	; (8008b60 <_usb_reset.constprop.15+0x80>)
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 8008b2a:	651d      	str	r5, [r3, #80]	; 0x50
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 8008b2c:	480a      	ldr	r0, [pc, #40]	; (8008b58 <_usb_reset.constprop.15+0x78>)
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
 8008b2e:	645d      	str	r5, [r3, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 8008b30:	64d9      	str	r1, [r3, #76]	; 0x4c
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
  STM32_USB->CNTR = cntr;
 8008b32:	641f      	str	r7, [r3, #64]	; 0x40
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 8008b34:	4629      	mov	r1, r5
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 8008b36:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    usbp->epc[i] = NULL;
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8008b3a:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 8008b3e:	60e6      	str	r6, [r4, #12]
  usb_lld_init_endpoint(usbp, 0);
 8008b40:	f7fd fbce 	bl	80062e0 <usb_lld_init_endpoint>

  /* Low level reset.*/
  usb_lld_reset(usbp);

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8008b44:	6863      	ldr	r3, [r4, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	b123      	cbz	r3, 8008b54 <_usb_reset.constprop.15+0x74>
 8008b4a:	4629      	mov	r1, r5
}
 8008b4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  /* Low level reset.*/
  usb_lld_reset(usbp);

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8008b50:	4801      	ldr	r0, [pc, #4]	; (8008b58 <_usb_reset.constprop.15+0x78>)
 8008b52:	4718      	bx	r3
 8008b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b58:	20001454 	.word	0x20001454
 8008b5c:	40005c00 	.word	0x40005c00
 8008b60:	08009610 	.word	0x08009610
 8008b64:	f3af 8000 	nop.w
 8008b68:	f3af 8000 	nop.w
 8008b6c:	f3af 8000 	nop.w

08008b70 <usbStartReceiveI.constprop.10>:
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 8008b70:	8943      	ldrh	r3, [r0, #10]
 8008b72:	f013 0101 	ands.w	r1, r3, #1
 8008b76:	d001      	beq.n	8008b7c <usbStartReceiveI.constprop.10+0xc>
    return true;
 8008b78:	2001      	movs	r0, #1
 8008b7a:	4770      	bx	lr
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {
 8008b7c:	b410      	push	{r4}
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8008b7e:	4c0a      	ldr	r4, [pc, #40]	; (8008ba8 <usbStartReceiveI.constprop.10+0x38>)

  if (usbGetReceiveStatusI(usbp, ep)) {
    return true;
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8008b80:	f043 0201 	orr.w	r2, r3, #1
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	8142      	strh	r2, [r0, #10]
 8008b88:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b90:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  usb_lld_start_out(usbp, ep);
  return false;
 8008b9c:	4608      	mov	r0, r1
 8008b9e:	6023      	str	r3, [r4, #0]
}
 8008ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	40005c00 	.word	0x40005c00
 8008bac:	f3af 8000 	nop.w

08008bb0 <usb_lld_prepare_receive.constprop.7>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8008bb0:	68c1      	ldr	r1, [r0, #12]
 8008bb2:	698a      	ldr	r2, [r1, #24]

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 8008bb4:	6853      	ldr	r3, [r2, #4]
 8008bb6:	b133      	cbz	r3, 8008bc6 <usb_lld_prepare_receive.constprop.7+0x16>
    osp->rxpkts = 1;
  else
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 8008bb8:	8a49      	ldrh	r1, [r1, #18]
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	440b      	add	r3, r1
 8008bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bc2:	8213      	strh	r3, [r2, #16]
 8008bc4:	4770      	bx	lr
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
    osp->rxpkts = 1;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	8213      	strh	r3, [r2, #16]
 8008bca:	4770      	bx	lr
 8008bcc:	f3af 8000 	nop.w

08008bd0 <init_printf.constprop.0>:
    }


void init_printf(void* putp,void (*putf) (void*,char))
    {
    stdout_putf=putf;
 8008bd0:	4903      	ldr	r1, [pc, #12]	; (8008be0 <init_printf.constprop.0+0x10>)
 8008bd2:	4804      	ldr	r0, [pc, #16]	; (8008be4 <init_printf.constprop.0+0x14>)
    stdout_putp=putp;
 8008bd4:	4b04      	ldr	r3, [pc, #16]	; (8008be8 <init_printf.constprop.0+0x18>)
 8008bd6:	2200      	movs	r2, #0
    }


void init_printf(void* putp,void (*putf) (void*,char))
    {
    stdout_putf=putf;
 8008bd8:	6008      	str	r0, [r1, #0]
    stdout_putp=putp;
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	20001450 	.word	0x20001450
 8008be4:	08006c61 	.word	0x08006c61
 8008be8:	20001540 	.word	0x20001540
 8008bec:	f3af 8000 	nop.w

08008bf0 <mousekey_param_dec.lto_priv.37>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
 8008bf0:	3801      	subs	r0, #1
 8008bf2:	2805      	cmp	r0, #5
 8008bf4:	d80a      	bhi.n	8008c0c <mousekey_param_dec.lto_priv.37+0x1c>
 8008bf6:	e8df f000 	tbb	[pc, r0]
 8008bfa:	110a      	.short	0x110a
 8008bfc:	03201b16 	.word	0x03201b16
            else
                mk_wheel_max_speed = 0;
            PRINT_SET_VAL(mk_wheel_max_speed);
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
 8008c00:	4a10      	ldr	r2, [pc, #64]	; (8008c44 <mousekey_param_dec.lto_priv.37+0x54>)
 8008c02:	7813      	ldrb	r3, [r2, #0]
 8008c04:	4299      	cmp	r1, r3
 8008c06:	d306      	bcc.n	8008c16 <mousekey_param_dec.lto_priv.37+0x26>
                mk_wheel_time_to_max -= dec;
            else
                mk_wheel_time_to_max = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	7013      	strb	r3, [r2, #0]
 8008c0c:	4770      	bx	lr

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
        case 1:
            if (mk_delay > dec)
 8008c0e:	4a0e      	ldr	r2, [pc, #56]	; (8008c48 <mousekey_param_dec.lto_priv.37+0x58>)
 8008c10:	7813      	ldrb	r3, [r2, #0]
 8008c12:	428b      	cmp	r3, r1
 8008c14:	d9f8      	bls.n	8008c08 <mousekey_param_dec.lto_priv.37+0x18>
                mk_wheel_max_speed = 0;
            PRINT_SET_VAL(mk_wheel_max_speed);
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
                mk_wheel_time_to_max -= dec;
 8008c16:	1a59      	subs	r1, r3, r1
 8008c18:	7011      	strb	r1, [r2, #0]
 8008c1a:	4770      	bx	lr
            else
                mk_delay = 0;
            PRINT_SET_VAL(mk_delay);
            break;
        case 2:
            if (mk_interval > dec)
 8008c1c:	4a0b      	ldr	r2, [pc, #44]	; (8008c4c <mousekey_param_dec.lto_priv.37+0x5c>)
 8008c1e:	7813      	ldrb	r3, [r2, #0]
 8008c20:	4299      	cmp	r1, r3
 8008c22:	d2f1      	bcs.n	8008c08 <mousekey_param_dec.lto_priv.37+0x18>
 8008c24:	e7f7      	b.n	8008c16 <mousekey_param_dec.lto_priv.37+0x26>
            else
                mk_interval = 0;
            PRINT_SET_VAL(mk_interval);
            break;
        case 3:
            if (mk_max_speed > dec)
 8008c26:	4a0a      	ldr	r2, [pc, #40]	; (8008c50 <mousekey_param_dec.lto_priv.37+0x60>)
 8008c28:	7813      	ldrb	r3, [r2, #0]
 8008c2a:	4299      	cmp	r1, r3
 8008c2c:	d2ec      	bcs.n	8008c08 <mousekey_param_dec.lto_priv.37+0x18>
 8008c2e:	e7f2      	b.n	8008c16 <mousekey_param_dec.lto_priv.37+0x26>
            else
                mk_max_speed = 0;
            PRINT_SET_VAL(mk_max_speed);
            break;
        case 4:
            if (mk_time_to_max > dec)
 8008c30:	4a08      	ldr	r2, [pc, #32]	; (8008c54 <mousekey_param_dec.lto_priv.37+0x64>)
 8008c32:	7813      	ldrb	r3, [r2, #0]
 8008c34:	4299      	cmp	r1, r3
 8008c36:	d2e7      	bcs.n	8008c08 <mousekey_param_dec.lto_priv.37+0x18>
 8008c38:	e7ed      	b.n	8008c16 <mousekey_param_dec.lto_priv.37+0x26>
            else
                mk_time_to_max = 0;
            PRINT_SET_VAL(mk_time_to_max);
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
 8008c3a:	4a07      	ldr	r2, [pc, #28]	; (8008c58 <mousekey_param_dec.lto_priv.37+0x68>)
 8008c3c:	7813      	ldrb	r3, [r2, #0]
 8008c3e:	4299      	cmp	r1, r3
 8008c40:	d2e2      	bcs.n	8008c08 <mousekey_param_dec.lto_priv.37+0x18>
 8008c42:	e7e8      	b.n	8008c16 <mousekey_param_dec.lto_priv.37+0x26>
 8008c44:	20001236 	.word	0x20001236
 8008c48:	20001238 	.word	0x20001238
 8008c4c:	20001234 	.word	0x20001234
 8008c50:	2000122e 	.word	0x2000122e
 8008c54:	20001235 	.word	0x20001235
 8008c58:	20001237 	.word	0x20001237
 8008c5c:	f3af 8000 	nop.w

08008c60 <mousekey_param_inc.lto_priv.38>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
 8008c60:	3801      	subs	r0, #1
 8008c62:	2805      	cmp	r0, #5
 8008c64:	d80b      	bhi.n	8008c7e <mousekey_param_inc.lto_priv.38+0x1e>
 8008c66:	e8df f000 	tbb	[pc, r0]
 8008c6a:	120b      	.short	0x120b
 8008c6c:	03241e18 	.word	0x03241e18
            else
                mk_wheel_max_speed = UINT8_MAX;
            PRINT_SET_VAL(mk_wheel_max_speed);
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
 8008c70:	4b13      	ldr	r3, [pc, #76]	; (8008cc0 <mousekey_param_inc.lto_priv.38+0x60>)
 8008c72:	781a      	ldrb	r2, [r3, #0]
 8008c74:	4411      	add	r1, r2
 8008c76:	29fe      	cmp	r1, #254	; 0xfe
 8008c78:	dd07      	ble.n	8008c8a <mousekey_param_inc.lto_priv.38+0x2a>
                mk_wheel_time_to_max += inc;
            else
                mk_wheel_time_to_max = UINT8_MAX;
 8008c7a:	22ff      	movs	r2, #255	; 0xff
 8008c7c:	701a      	strb	r2, [r3, #0]
 8008c7e:	4770      	bx	lr
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
        case 1:
            if (mk_delay + inc < UINT8_MAX)
 8008c80:	4b10      	ldr	r3, [pc, #64]	; (8008cc4 <mousekey_param_inc.lto_priv.38+0x64>)
 8008c82:	781a      	ldrb	r2, [r3, #0]
 8008c84:	4411      	add	r1, r2
 8008c86:	29fe      	cmp	r1, #254	; 0xfe
 8008c88:	dcf7      	bgt.n	8008c7a <mousekey_param_inc.lto_priv.38+0x1a>
                mk_wheel_max_speed = UINT8_MAX;
            PRINT_SET_VAL(mk_wheel_max_speed);
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
                mk_wheel_time_to_max += inc;
 8008c8a:	7019      	strb	r1, [r3, #0]
 8008c8c:	4770      	bx	lr
            else
                mk_delay = UINT8_MAX;
            PRINT_SET_VAL(mk_delay);
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
 8008c8e:	4b0e      	ldr	r3, [pc, #56]	; (8008cc8 <mousekey_param_inc.lto_priv.38+0x68>)
 8008c90:	781a      	ldrb	r2, [r3, #0]
 8008c92:	4411      	add	r1, r2
 8008c94:	29fe      	cmp	r1, #254	; 0xfe
 8008c96:	dcf0      	bgt.n	8008c7a <mousekey_param_inc.lto_priv.38+0x1a>
 8008c98:	e7f7      	b.n	8008c8a <mousekey_param_inc.lto_priv.38+0x2a>
            else
                mk_interval = UINT8_MAX;
            PRINT_SET_VAL(mk_interval);
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
 8008c9a:	4b0c      	ldr	r3, [pc, #48]	; (8008ccc <mousekey_param_inc.lto_priv.38+0x6c>)
 8008c9c:	781a      	ldrb	r2, [r3, #0]
 8008c9e:	4411      	add	r1, r2
 8008ca0:	29fe      	cmp	r1, #254	; 0xfe
 8008ca2:	dcea      	bgt.n	8008c7a <mousekey_param_inc.lto_priv.38+0x1a>
 8008ca4:	e7f1      	b.n	8008c8a <mousekey_param_inc.lto_priv.38+0x2a>
            else
                mk_max_speed = UINT8_MAX;
            PRINT_SET_VAL(mk_max_speed);
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
 8008ca6:	4b0a      	ldr	r3, [pc, #40]	; (8008cd0 <mousekey_param_inc.lto_priv.38+0x70>)
 8008ca8:	781a      	ldrb	r2, [r3, #0]
 8008caa:	4411      	add	r1, r2
 8008cac:	29fe      	cmp	r1, #254	; 0xfe
 8008cae:	dce4      	bgt.n	8008c7a <mousekey_param_inc.lto_priv.38+0x1a>
 8008cb0:	e7eb      	b.n	8008c8a <mousekey_param_inc.lto_priv.38+0x2a>
            else
                mk_time_to_max = UINT8_MAX;
            PRINT_SET_VAL(mk_time_to_max);
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
 8008cb2:	4b08      	ldr	r3, [pc, #32]	; (8008cd4 <mousekey_param_inc.lto_priv.38+0x74>)
 8008cb4:	781a      	ldrb	r2, [r3, #0]
 8008cb6:	4411      	add	r1, r2
 8008cb8:	29fe      	cmp	r1, #254	; 0xfe
 8008cba:	dcde      	bgt.n	8008c7a <mousekey_param_inc.lto_priv.38+0x1a>
 8008cbc:	e7e5      	b.n	8008c8a <mousekey_param_inc.lto_priv.38+0x2a>
 8008cbe:	bf00      	nop
 8008cc0:	20001236 	.word	0x20001236
 8008cc4:	20001238 	.word	0x20001238
 8008cc8:	20001234 	.word	0x20001234
 8008ccc:	2000122e 	.word	0x2000122e
 8008cd0:	20001235 	.word	0x20001235
 8008cd4:	20001237 	.word	0x20001237
 8008cd8:	f3af 8000 	nop.w
 8008cdc:	f3af 8000 	nop.w

08008ce0 <command_common.lto_priv.36>:
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
 8008ce0:	1f83      	subs	r3, r0, #6
#endif
}
#endif

static bool command_common(uint8_t code)
{
 8008ce2:	b510      	push	{r4, lr}
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
 8008ce4:	2b42      	cmp	r3, #66	; 0x42
 8008ce6:	f200 808d 	bhi.w	8008e04 <command_common.lto_priv.36+0x124>
 8008cea:	e8df f003 	tbb	[pc, r3]
 8008cee:	776c      	.short	0x776c
 8008cf0:	2d8b8b8b 	.word	0x2d8b8b8b
 8008cf4:	8b468b8b 	.word	0x8b468b8b
 8008cf8:	8b8b6457 	.word	0x8b8b6457
 8008cfc:	8b2d8b8b 	.word	0x8b2d8b8b
 8008d00:	228b2d8b 	.word	0x228b2d8b
 8008d04:	37378b8b 	.word	0x37378b8b
 8008d08:	37373737 	.word	0x37373737
 8008d0c:	82373737 	.word	0x82373737
 8008d10:	8b8b828b 	.word	0x8b8b828b
 8008d14:	8b8b8b8b 	.word	0x8b8b8b8b
 8008d18:	8b8b8b8b 	.word	0x8b8b8b8b
 8008d1c:	8b8b828b 	.word	0x8b8b828b
 8008d20:	44448b2d 	.word	0x44448b2d
 8008d24:	44444444 	.word	0x44444444
 8008d28:	82444444 	.word	0x82444444
 8008d2c:	8b8b8b8b 	.word	0x8b8b8b8b
 8008d30:	2f          	.byte	0x2f
 8008d31:	00          	.byte	0x00
                print("\ndebug: on\n");
                debug_enable   = true;
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
 8008d32:	4b35      	ldr	r3, [pc, #212]	; (8008e08 <command_common.lto_priv.36+0x128>)
 8008d34:	781a      	ldrb	r2, [r3, #0]
 8008d36:	4611      	mov	r1, r2
 8008d38:	f082 0202 	eor.w	r2, r2, #2
 8008d3c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8008d40:	f362 0141 	bfi	r1, r2, #1, #1
 8008d44:	7019      	strb	r1, [r3, #0]
            if (debug_matrix) {
 8008d46:	bb22      	cbnz	r2, 8008d92 <command_common.lto_priv.36+0xb2>
            break;
        default:
            print("?");
            return false;
    }
    return true;
 8008d48:	2001      	movs	r0, #1
 8008d4a:	bd10      	pop	{r4, pc}
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
 8008d4c:	f7ff fbc0 	bl	80084d0 <clear_keyboard>
            print("\n\nbootloader... ");
            wait_ms(1000);
 8008d50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008d54:	f7fd ff3c 	bl	8006bd0 <chThdSleep>
            bootloader_jump(); // not return
 8008d58:	f7ff fe7a 	bl	8008a50 <bootloader_jump>
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
 8008d5c:	381d      	subs	r0, #29
}

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
 8008d5e:	b2c3      	uxtb	r3, r0

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
 8008d60:	4a2a      	ldr	r2, [pc, #168]	; (8008e0c <command_common.lto_priv.36+0x12c>)
 8008d62:	2401      	movs	r4, #1
 8008d64:	fa04 f303 	lsl.w	r3, r4, r3
 8008d68:	6013      	str	r3, [r2, #0]
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
 8008d6a:	f7ff fb81 	bl	8008470 <clear_keyboard_but_mods>
    clear_keyboard();
 8008d6e:	f7ff fbaf 	bl	80084d0 <clear_keyboard>
            break;
        default:
            print("?");
            return false;
    }
    return true;
 8008d72:	4620      	mov	r0, r4
 8008d74:	bd10      	pop	{r4, pc}
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
 8008d76:	3839      	subs	r0, #57	; 0x39
 8008d78:	e7f1      	b.n	8008d5e <command_common.lto_priv.36+0x7e>
            } else {
                print("\nmatrix: off\n");
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
 8008d7a:	4b23      	ldr	r3, [pc, #140]	; (8008e08 <command_common.lto_priv.36+0x128>)
 8008d7c:	781a      	ldrb	r2, [r3, #0]
 8008d7e:	4611      	mov	r1, r2
 8008d80:	f082 0204 	eor.w	r2, r2, #4
 8008d84:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8008d88:	f362 0182 	bfi	r1, r2, #2, #1
 8008d8c:	7019      	strb	r1, [r3, #0]
            if (debug_keyboard) {
 8008d8e:	2a00      	cmp	r2, #0
 8008d90:	d0da      	beq.n	8008d48 <command_common.lto_priv.36+0x68>
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
            } else {
                print("\ndebug: on\n");
                debug_enable   = true;
 8008d92:	781a      	ldrb	r2, [r3, #0]
            break;
        default:
            print("?");
            return false;
    }
    return true;
 8008d94:	2001      	movs	r0, #1
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
            } else {
                print("\ndebug: on\n");
                debug_enable   = true;
 8008d96:	4302      	orrs	r2, r0
 8008d98:	701a      	strb	r2, [r3, #0]
 8008d9a:	bd10      	pop	{r4, pc}
            } else {
                print("\nkeyboard: off\n");
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
 8008d9c:	4b1a      	ldr	r3, [pc, #104]	; (8008e08 <command_common.lto_priv.36+0x128>)
 8008d9e:	781a      	ldrb	r2, [r3, #0]
 8008da0:	4611      	mov	r1, r2
 8008da2:	f082 0208 	eor.w	r2, r2, #8
 8008da6:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8008daa:	f362 01c3 	bfi	r1, r2, #3, #1
 8008dae:	7019      	strb	r1, [r3, #0]
            if (debug_mouse) {
 8008db0:	2a00      	cmp	r2, #0
 8008db2:	d1ee      	bne.n	8008d92 <command_common.lto_priv.36+0xb2>
 8008db4:	e7c8      	b.n	8008d48 <command_common.lto_priv.36+0x68>
#   endif
#endif
            break;
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
 8008db6:	f7ff fb8b 	bl	80084d0 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
 8008dba:	4a15      	ldr	r2, [pc, #84]	; (8008e10 <command_common.lto_priv.36+0x130>)
            break;
        default:
            print("?");
            return false;
    }
    return true;
 8008dbc:	2001      	movs	r0, #1
#endif
            break;
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
            keyboard_nkro = !keyboard_nkro;
 8008dbe:	7813      	ldrb	r3, [r2, #0]
 8008dc0:	4043      	eors	r3, r0
 8008dc2:	7013      	strb	r3, [r2, #0]
 8008dc4:	bd10      	pop	{r4, pc}
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
 8008dc6:	4a10      	ldr	r2, [pc, #64]	; (8008e08 <command_common.lto_priv.36+0x128>)
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
 8008dc8:	4912      	ldr	r1, [pc, #72]	; (8008e14 <command_common.lto_priv.36+0x134>)
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
 8008dca:	7813      	ldrb	r3, [r2, #0]
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
 8008dcc:	2001      	movs	r0, #1
            break;
        case KC_C:
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
 8008dce:	f003 03f1 	and.w	r3, r3, #241	; 0xf1
 8008dd2:	f36f 0300 	bfc	r3, #0, #1
 8008dd6:	7013      	strb	r3, [r2, #0]
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
 8008dd8:	7008      	strb	r0, [r1, #0]
 8008dda:	bd10      	pop	{r4, pc}
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
 8008ddc:	4b0a      	ldr	r3, [pc, #40]	; (8008e08 <command_common.lto_priv.36+0x128>)
 8008dde:	781a      	ldrb	r2, [r3, #0]
 8008de0:	f012 0001 	ands.w	r0, r2, #1
 8008de4:	d0d5      	beq.n	8008d92 <command_common.lto_priv.36+0xb2>
                print("\ndebug: off\n");
                debug_matrix   = false;
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
 8008de6:	f002 02f1 	and.w	r2, r2, #241	; 0xf1
 8008dea:	f36f 0200 	bfc	r2, #0, #1
 8008dee:	701a      	strb	r2, [r3, #0]
 8008df0:	bd10      	pop	{r4, pc}

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
 8008df2:	4b06      	ldr	r3, [pc, #24]	; (8008e0c <command_common.lto_priv.36+0x12c>)
 8008df4:	2401      	movs	r4, #1
 8008df6:	601c      	str	r4, [r3, #0]
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
 8008df8:	f7ff fb3a 	bl	8008470 <clear_keyboard_but_mods>

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
 8008dfc:	f7ff fb68 	bl	80084d0 <clear_keyboard>
            break;
        default:
            print("?");
            return false;
    }
    return true;
 8008e00:	4620      	mov	r0, r4
 8008e02:	bd10      	pop	{r4, pc}
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
            break;
        default:
            print("?");
            return false;
 8008e04:	2000      	movs	r0, #0
    }
    return true;
}
 8008e06:	bd10      	pop	{r4, pc}
 8008e08:	200014e0 	.word	0x200014e0
 8008e0c:	20001570 	.word	0x20001570
 8008e10:	20001239 	.word	0x20001239
 8008e14:	20001534 	.word	0x20001534
 8008e18:	f3af 8000 	nop.w
 8008e1c:	f3af 8000 	nop.w

08008e20 <wheel_unit.lto_priv.41>:
}

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
 8008e20:	4b15      	ldr	r3, [pc, #84]	; (8008e78 <wheel_unit.lto_priv.41+0x58>)
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	07d9      	lsls	r1, r3, #31
 8008e26:	d505      	bpl.n	8008e34 <wheel_unit.lto_priv.41+0x14>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
 8008e28:	4b14      	ldr	r3, [pc, #80]	; (8008e7c <wheel_unit.lto_priv.41+0x5c>)
 8008e2a:	7818      	ldrb	r0, [r3, #0]
 8008e2c:	0880      	lsrs	r0, r0, #2
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
 8008e2e:	b180      	cbz	r0, 8008e52 <wheel_unit.lto_priv.41+0x32>
 8008e30:	b2c0      	uxtb	r0, r0
 8008e32:	4770      	bx	lr
static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    } else if (mousekey_accel & (1<<1)) {
 8008e34:	079a      	lsls	r2, r3, #30
 8008e36:	d504      	bpl.n	8008e42 <wheel_unit.lto_priv.41+0x22>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
 8008e38:	4b10      	ldr	r3, [pc, #64]	; (8008e7c <wheel_unit.lto_priv.41+0x5c>)
 8008e3a:	7818      	ldrb	r0, [r3, #0]
 8008e3c:	0840      	lsrs	r0, r0, #1
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
 8008e3e:	b140      	cbz	r0, 8008e52 <wheel_unit.lto_priv.41+0x32>
 8008e40:	e7f6      	b.n	8008e30 <wheel_unit.lto_priv.41+0x10>
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
 8008e42:	075b      	lsls	r3, r3, #29
 8008e44:	d507      	bpl.n	8008e56 <wheel_unit.lto_priv.41+0x36>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
 8008e46:	4b0d      	ldr	r3, [pc, #52]	; (8008e7c <wheel_unit.lto_priv.41+0x5c>)
 8008e48:	7818      	ldrb	r0, [r3, #0]
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
 8008e4a:	287f      	cmp	r0, #127	; 0x7f
 8008e4c:	d9ef      	bls.n	8008e2e <wheel_unit.lto_priv.41+0xe>
 8008e4e:	207f      	movs	r0, #127	; 0x7f
 8008e50:	4770      	bx	lr
 8008e52:	2001      	movs	r0, #1
 8008e54:	4770      	bx	lr
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
 8008e56:	4b0a      	ldr	r3, [pc, #40]	; (8008e80 <wheel_unit.lto_priv.41+0x60>)
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	b153      	cbz	r3, 8008e72 <wheel_unit.lto_priv.41+0x52>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
 8008e5c:	4a09      	ldr	r2, [pc, #36]	; (8008e84 <wheel_unit.lto_priv.41+0x64>)
 8008e5e:	7812      	ldrb	r2, [r2, #0]
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d2f0      	bcs.n	8008e46 <wheel_unit.lto_priv.41+0x26>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
 8008e64:	4905      	ldr	r1, [pc, #20]	; (8008e7c <wheel_unit.lto_priv.41+0x5c>)
 8008e66:	7808      	ldrb	r0, [r1, #0]
 8008e68:	fb03 f300 	mul.w	r3, r3, r0
 8008e6c:	fb93 f0f2 	sdiv	r0, r3, r2
 8008e70:	e7eb      	b.n	8008e4a <wheel_unit.lto_priv.41+0x2a>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
 8008e72:	2001      	movs	r0, #1
 8008e74:	e7dc      	b.n	8008e30 <wheel_unit.lto_priv.41+0x10>
 8008e76:	bf00      	nop
 8008e78:	200012fc 	.word	0x200012fc
 8008e7c:	20001237 	.word	0x20001237
 8008e80:	200014da 	.word	0x200014da
 8008e84:	20001236 	.word	0x20001236
 8008e88:	f3af 8000 	nop.w
 8008e8c:	f3af 8000 	nop.w

08008e90 <move_unit.lto_priv.42>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
 8008e90:	4b1b      	ldr	r3, [pc, #108]	; (8008f00 <move_unit.lto_priv.42+0x70>)
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	07d9      	lsls	r1, r3, #31
 8008e96:	d509      	bpl.n	8008eac <move_unit.lto_priv.42+0x1c>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
 8008e98:	4b1a      	ldr	r3, [pc, #104]	; (8008f04 <move_unit.lto_priv.42+0x74>)
 8008e9a:	7818      	ldrb	r0, [r3, #0]
 8008e9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008ea0:	f3c0 008f 	ubfx	r0, r0, #2, #16
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
 8008ea4:	287f      	cmp	r0, #127	; 0x7f
 8008ea6:	d90b      	bls.n	8008ec0 <move_unit.lto_priv.42+0x30>
 8008ea8:	207f      	movs	r0, #127	; 0x7f
 8008eaa:	4770      	bx	lr
static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    } else if (mousekey_accel & (1<<1)) {
 8008eac:	079a      	lsls	r2, r3, #30
 8008eae:	d50a      	bpl.n	8008ec6 <move_unit.lto_priv.42+0x36>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
 8008eb0:	4b14      	ldr	r3, [pc, #80]	; (8008f04 <move_unit.lto_priv.42+0x74>)
 8008eb2:	7818      	ldrb	r0, [r3, #0]
 8008eb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008eb8:	f3c0 004f 	ubfx	r0, r0, #1, #16
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
 8008ebc:	287f      	cmp	r0, #127	; 0x7f
 8008ebe:	d8f3      	bhi.n	8008ea8 <move_unit.lto_priv.42+0x18>
 8008ec0:	b978      	cbnz	r0, 8008ee2 <move_unit.lto_priv.42+0x52>
 8008ec2:	2001      	movs	r0, #1
}
 8008ec4:	4770      	bx	lr
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
 8008ec6:	075b      	lsls	r3, r3, #29
 8008ec8:	d406      	bmi.n	8008ed8 <move_unit.lto_priv.42+0x48>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
 8008eca:	4b0f      	ldr	r3, [pc, #60]	; (8008f08 <move_unit.lto_priv.42+0x78>)
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	b153      	cbz	r3, 8008ee6 <move_unit.lto_priv.42+0x56>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
 8008ed0:	4a0e      	ldr	r2, [pc, #56]	; (8008f0c <move_unit.lto_priv.42+0x7c>)
 8008ed2:	7810      	ldrb	r0, [r2, #0]
 8008ed4:	4283      	cmp	r3, r0
 8008ed6:	d308      	bcc.n	8008eea <move_unit.lto_priv.42+0x5a>
    if (mousekey_accel & (1<<0)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
 8008ed8:	4b0a      	ldr	r3, [pc, #40]	; (8008f04 <move_unit.lto_priv.42+0x74>)
 8008eda:	7818      	ldrb	r0, [r3, #0]
 8008edc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008ee0:	e7e0      	b.n	8008ea4 <move_unit.lto_priv.42+0x14>
 8008ee2:	b2c0      	uxtb	r0, r0
 8008ee4:	4770      	bx	lr
    } else if (mousekey_repeat == 0) {
 8008ee6:	2005      	movs	r0, #5
 8008ee8:	4770      	bx	lr
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
 8008eea:	4a06      	ldr	r2, [pc, #24]	; (8008f04 <move_unit.lto_priv.42+0x74>)
 8008eec:	7812      	ldrb	r2, [r2, #0]
 8008eee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008ef2:	fb03 f302 	mul.w	r3, r3, r2
 8008ef6:	fb93 f0f0 	sdiv	r0, r3, r0
 8008efa:	b280      	uxth	r0, r0
 8008efc:	e7d2      	b.n	8008ea4 <move_unit.lto_priv.42+0x14>
 8008efe:	bf00      	nop
 8008f00:	200012fc 	.word	0x200012fc
 8008f04:	2000122e 	.word	0x2000122e
 8008f08:	200014da 	.word	0x200014da
 8008f0c:	20001235 	.word	0x20001235

08008f10 <timer_read>:
 8008f10:	2320      	movs	r3, #32
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f1a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	f383 8811 	msr	BASEPRI, r3

void timer_clear(void) {}

uint16_t timer_read(void)
{
    return (uint16_t)ST2MS(chVTGetSystemTime());
 8008f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008f26:	b280      	uxth	r0, r0
 8008f28:	fb03 f000 	mul.w	r0, r3, r0
 8008f2c:	4b03      	ldr	r3, [pc, #12]	; (8008f3c <timer_read+0x2c>)
 8008f2e:	f200 70cf 	addw	r0, r0, #1999	; 0x7cf
 8008f32:	fba3 3000 	umull	r3, r0, r3, r0
}
 8008f36:	f3c0 10cf 	ubfx	r0, r0, #7, #16
 8008f3a:	4770      	bx	lr
 8008f3c:	10624dd3 	.word	0x10624dd3

08008f40 <mousekey_send>:
    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
        mousekey_repeat = 0;
}

void mousekey_send(void)
{
 8008f40:	b508      	push	{r3, lr}
    }
}

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
 8008f42:	4b05      	ldr	r3, [pc, #20]	; (8008f58 <mousekey_send+0x18>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	b113      	cbz	r3, 8008f4e <mousekey_send+0xe>
    (*driver->send_mouse)(report);
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	4804      	ldr	r0, [pc, #16]	; (8008f5c <mousekey_send+0x1c>)
 8008f4c:	4798      	blx	r3
    mousekey_debug();
    host_mouse_send(&mouse_report);
    last_timer = timer_read();
 8008f4e:	f7ff ffdf 	bl	8008f10 <timer_read>
 8008f52:	4b03      	ldr	r3, [pc, #12]	; (8008f60 <mousekey_send+0x20>)
 8008f54:	8018      	strh	r0, [r3, #0]
 8008f56:	bd08      	pop	{r3, pc}
 8008f58:	20001548 	.word	0x20001548
 8008f5c:	20001568 	.word	0x20001568
 8008f60:	20001574 	.word	0x20001574
 8008f64:	f3af 8000 	nop.w
 8008f68:	f3af 8000 	nop.w
 8008f6c:	f3af 8000 	nop.w

08008f70 <del_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
void del_mods(uint8_t mods) { real_mods &= ~mods; }
 8008f70:	4a02      	ldr	r2, [pc, #8]	; (8008f7c <del_mods+0xc>)
 8008f72:	7813      	ldrb	r3, [r2, #0]
 8008f74:	ea23 0000 	bic.w	r0, r3, r0
 8008f78:	7010      	strb	r0, [r2, #0]
 8008f7a:	4770      	bx	lr
 8008f7c:	200014dc 	.word	0x200014dc

08008f80 <add_mods>:
}


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
 8008f80:	4a02      	ldr	r2, [pc, #8]	; (8008f8c <add_mods+0xc>)
 8008f82:	7813      	ldrb	r3, [r2, #0]
 8008f84:	4318      	orrs	r0, r3
 8008f86:	7010      	strb	r0, [r2, #0]
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	200014dc 	.word	0x200014dc

08008f90 <send_keyboard_report>:
static int16_t oneshot_time = 0;
#endif
#endif


void send_keyboard_report(void) {
 8008f90:	b470      	push	{r4, r5, r6}
    keyboard_report->mods  = real_mods;
 8008f92:	4a12      	ldr	r2, [pc, #72]	; (8008fdc <send_keyboard_report+0x4c>)
 8008f94:	4b12      	ldr	r3, [pc, #72]	; (8008fe0 <send_keyboard_report+0x50>)
 8008f96:	6810      	ldr	r0, [r2, #0]
 8008f98:	781a      	ldrb	r2, [r3, #0]
    keyboard_report->mods |= weak_mods;
 8008f9a:	4b12      	ldr	r3, [pc, #72]	; (8008fe4 <send_keyboard_report+0x54>)
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
 8008f9c:	7002      	strb	r2, [r0, #0]
    keyboard_report->mods |= weak_mods;
 8008f9e:	781b      	ldrb	r3, [r3, #0]
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
 8008fa0:	4e11      	ldr	r6, [pc, #68]	; (8008fe8 <send_keyboard_report+0x58>)
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    keyboard_report->mods |= weak_mods;
 8008fa2:	431a      	orrs	r2, r3
 8008fa4:	7002      	strb	r2, [r0, #0]
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
 8008fa6:	7831      	ldrb	r1, [r6, #0]
 8008fa8:	b179      	cbz	r1, 8008fca <send_keyboard_report+0x3a>
 8008faa:	4603      	mov	r3, r0
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
 8008fac:	430a      	orrs	r2, r1
 8008fae:	7002      	strb	r2, [r0, #0]
 8008fb0:	f100 050f 	add.w	r5, r0, #15
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
 8008fb4:	2100      	movs	r1, #0
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
 8008fb6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
            cnt++;
 8008fba:	1c4c      	adds	r4, r1, #1
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
 8008fbc:	b102      	cbz	r2, 8008fc0 <send_keyboard_report+0x30>
            cnt++;
 8008fbe:	b2e1      	uxtb	r1, r4
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 8008fc0:	42ab      	cmp	r3, r5
 8008fc2:	d1f8      	bne.n	8008fb6 <send_keyboard_report+0x26>
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
        if (has_anykey()) {
 8008fc4:	b109      	cbz	r1, 8008fca <send_keyboard_report+0x3a>
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	7033      	strb	r3, [r6, #0]
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    if (!driver) return;
 8008fca:	4b08      	ldr	r3, [pc, #32]	; (8008fec <send_keyboard_report+0x5c>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	b113      	cbz	r3, 8008fd6 <send_keyboard_report+0x46>
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
}
 8008fd0:	bc70      	pop	{r4, r5, r6}
    (*driver->send_keyboard)(report);
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	4718      	bx	r3
 8008fd6:	bc70      	pop	{r4, r5, r6}
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	20001230 	.word	0x20001230
 8008fe0:	200014dc 	.word	0x200014dc
 8008fe4:	200014d8 	.word	0x200014d8
 8008fe8:	200014db 	.word	0x200014db
 8008fec:	20001548 	.word	0x20001548

08008ff0 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
 8008ff0:	b530      	push	{r4, r5, lr}
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
 8008ff2:	4a10      	ldr	r2, [pc, #64]	; (8009034 <layer_switch_get_action+0x44>)
 8008ff4:	4b10      	ldr	r3, [pc, #64]	; (8009038 <layer_switch_get_action+0x48>)
 8008ff6:	6815      	ldr	r5, [r2, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
#endif



action_t layer_switch_get_action(keypos_t key)
{
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	f8ad 0004 	strh.w	r0, [sp, #4]
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
 8009000:	431d      	orrs	r5, r3
 8009002:	241f      	movs	r4, #31
 8009004:	e002      	b.n	800900c <layer_switch_get_action+0x1c>
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
 8009006:	f114 34ff 	adds.w	r4, r4, #4294967295
 800900a:	d30c      	bcc.n	8009026 <layer_switch_get_action+0x36>
        if (layers & (1UL<<i)) {
 800900c:	fa25 f304 	lsr.w	r3, r5, r4
 8009010:	07db      	lsls	r3, r3, #31
 8009012:	d5f8      	bpl.n	8009006 <layer_switch_get_action+0x16>
            action = action_for_key(i, key);
 8009014:	b2e0      	uxtb	r0, r4
 8009016:	9901      	ldr	r1, [sp, #4]
 8009018:	f7ff fd32 	bl	8008a80 <action_for_key>
 800901c:	b280      	uxth	r0, r0
            if (action.code != ACTION_TRANSPARENT) {
 800901e:	2801      	cmp	r0, #1
 8009020:	d0f1      	beq.n	8009006 <layer_switch_get_action+0x16>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
 8009022:	b003      	add	sp, #12
 8009024:	bd30      	pop	{r4, r5, pc}
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
 8009026:	9901      	ldr	r1, [sp, #4]
 8009028:	2000      	movs	r0, #0
 800902a:	f7ff fd29 	bl	8008a80 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
 800902e:	b003      	add	sp, #12
 8009030:	bd30      	pop	{r4, r5, pc}
 8009032:	bf00      	nop
 8009034:	20001570 	.word	0x20001570
 8009038:	200012f8 	.word	0x200012f8
 800903c:	f3af 8000 	nop.w

08009040 <layer_off>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 8009040:	4904      	ldr	r1, [pc, #16]	; (8009054 <layer_off+0x14>)
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
 8009042:	2201      	movs	r2, #1
 8009044:	680b      	ldr	r3, [r1, #0]
 8009046:	4082      	lsls	r2, r0
 8009048:	ea23 0302 	bic.w	r3, r3, r2

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 800904c:	600b      	str	r3, [r1, #0]
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
 800904e:	f7ff ba0f 	b.w	8008470 <clear_keyboard_but_mods>
 8009052:	bf00      	nop
 8009054:	200012f8 	.word	0x200012f8
 8009058:	f3af 8000 	nop.w
 800905c:	f3af 8000 	nop.w

08009060 <layer_on>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 8009060:	4903      	ldr	r1, [pc, #12]	; (8009070 <layer_on+0x10>)
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
 8009062:	2201      	movs	r2, #1
 8009064:	680b      	ldr	r3, [r1, #0]
 8009066:	4082      	lsls	r2, r0
 8009068:	4313      	orrs	r3, r2

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 800906a:	600b      	str	r3, [r1, #0]
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
 800906c:	f7ff ba00 	b.w	8008470 <clear_keyboard_but_mods>
 8009070:	200012f8 	.word	0x200012f8
 8009074:	f3af 8000 	nop.w
 8009078:	f3af 8000 	nop.w
 800907c:	f3af 8000 	nop.w

08009080 <debug_waiting_buffer.lto_priv.44>:
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
 8009080:	4b05      	ldr	r3, [pc, #20]	; (8009098 <debug_waiting_buffer.lto_priv.44+0x18>)
 8009082:	4a06      	ldr	r2, [pc, #24]	; (800909c <debug_waiting_buffer.lto_priv.44+0x1c>)
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	7812      	ldrb	r2, [r2, #0]
 8009088:	4293      	cmp	r3, r2
 800908a:	d004      	beq.n	8009096 <debug_waiting_buffer.lto_priv.44+0x16>
 800908c:	3301      	adds	r3, #1
 800908e:	f003 0307 	and.w	r3, r3, #7
 8009092:	4293      	cmp	r3, r2
 8009094:	d1fa      	bne.n	800908c <debug_waiting_buffer.lto_priv.44+0xc>
 8009096:	4770      	bx	lr
 8009098:	200014d9 	.word	0x200014d9
 800909c:	20001544 	.word	0x20001544

080090a0 <waiting_buffer_scan_tap.lto_priv.35>:

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
 80090a0:	492e      	ldr	r1, [pc, #184]	; (800915c <waiting_buffer_scan_tap.lto_priv.35+0xbc>)
 80090a2:	798b      	ldrb	r3, [r1, #6]
 80090a4:	091b      	lsrs	r3, r3, #4
 80090a6:	d000      	beq.n	80090aa <waiting_buffer_scan_tap.lto_priv.35+0xa>
 80090a8:	4770      	bx	lr
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
 80090aa:	788b      	ldrb	r3, [r1, #2]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d0fb      	beq.n	80090a8 <waiting_buffer_scan_tap.lto_priv.35+0x8>
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
 80090b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
 80090b4:	4b2a      	ldr	r3, [pc, #168]	; (8009160 <waiting_buffer_scan_tap.lto_priv.35+0xc0>)
 80090b6:	4d2b      	ldr	r5, [pc, #172]	; (8009164 <waiting_buffer_scan_tap.lto_priv.35+0xc4>)
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	782a      	ldrb	r2, [r5, #0]
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
 80090bc:	b082      	sub	sp, #8
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
 80090be:	429a      	cmp	r2, r3
 80090c0:	d048      	beq.n	8009154 <waiting_buffer_scan_tap.lto_priv.35+0xb4>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
 80090c2:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8009168 <waiting_buffer_scan_tap.lto_priv.35+0xc8>
 80090c6:	f64f 7eff 	movw	lr, #65535	; 0xffff
 80090ca:	46e0      	mov	r8, ip
 80090cc:	e005      	b.n	80090da <waiting_buffer_scan_tap.lto_priv.35+0x3a>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
 80090ce:	3301      	adds	r3, #1
 80090d0:	782a      	ldrb	r2, [r5, #0]
 80090d2:	f003 0307 	and.w	r3, r3, #7
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d03c      	beq.n	8009154 <waiting_buffer_scan_tap.lto_priv.35+0xb4>
 80090da:	888a      	ldrh	r2, [r1, #4]
 80090dc:	780c      	ldrb	r4, [r1, #0]
 80090de:	7848      	ldrb	r0, [r1, #1]
 80090e0:	2a00      	cmp	r2, #0
 80090e2:	d0f4      	beq.n	80090ce <waiting_buffer_scan_tap.lto_priv.35+0x2e>
 80090e4:	f88d 4000 	strb.w	r4, [sp]
 80090e8:	f88d 0001 	strb.w	r0, [sp, #1]
 80090ec:	f8bd 6000 	ldrh.w	r6, [sp]
 80090f0:	4576      	cmp	r6, lr
 80090f2:	d0ec      	beq.n	80090ce <waiting_buffer_scan_tap.lto_priv.35+0x2e>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
 80090f4:	00df      	lsls	r7, r3, #3
 80090f6:	eb0c 0607 	add.w	r6, ip, r7
 80090fa:	f896 9001 	ldrb.w	r9, [r6, #1]
 80090fe:	f8df a068 	ldr.w	sl, [pc, #104]	; 8009168 <waiting_buffer_scan_tap.lto_priv.35+0xc8>
 8009102:	4581      	cmp	r9, r0
 8009104:	d1e3      	bne.n	80090ce <waiting_buffer_scan_tap.lto_priv.35+0x2e>
 8009106:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
 800910a:	42a0      	cmp	r0, r4
 800910c:	d1df      	bne.n	80090ce <waiting_buffer_scan_tap.lto_priv.35+0x2e>
 800910e:	78b0      	ldrb	r0, [r6, #2]
 8009110:	2800      	cmp	r0, #0
 8009112:	d1dc      	bne.n	80090ce <waiting_buffer_scan_tap.lto_priv.35+0x2e>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
 8009114:	88b0      	ldrh	r0, [r6, #4]
 8009116:	4282      	cmp	r2, r0
 8009118:	bf85      	ittet	hi
 800911a:	f5c2 427f 	rsbhi	r2, r2, #65280	; 0xff00
 800911e:	32ff      	addhi	r2, #255	; 0xff
 8009120:	1a82      	subls	r2, r0, r2
 8009122:	1812      	addhi	r2, r2, r0
 8009124:	2ac7      	cmp	r2, #199	; 0xc7
 8009126:	bfcc      	ite	gt
 8009128:	2200      	movgt	r2, #0
 800912a:	2201      	movle	r2, #1
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
                !waiting_buffer[i].event.pressed &&
 800912c:	2a00      	cmp	r2, #0
 800912e:	d0ce      	beq.n	80090ce <waiting_buffer_scan_tap.lto_priv.35+0x2e>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
 8009130:	4457      	add	r7, sl
 8009132:	79ba      	ldrb	r2, [r7, #6]

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
            tapping_key.tap.count = 1;
 8009134:	798b      	ldrb	r3, [r1, #6]
 8009136:	2001      	movs	r0, #1
            waiting_buffer[i].tap.count = 1;
 8009138:	f360 1207 	bfi	r2, r0, #4, #4

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
            tapping_key.tap.count = 1;
 800913c:	f360 1307 	bfi	r3, r0, #4, #4
            waiting_buffer[i].tap.count = 1;
 8009140:	71ba      	strb	r2, [r7, #6]
            process_action(&tapping_key);
 8009142:	4806      	ldr	r0, [pc, #24]	; (800915c <waiting_buffer_scan_tap.lto_priv.35+0xbc>)

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
            tapping_key.tap.count = 1;
 8009144:	718b      	strb	r3, [r1, #6]
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);
 8009146:	f7fe fc1b 	bl	8007980 <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
 800914a:	b002      	add	sp, #8
 800914c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
 8009150:	f7ff bf96 	b.w	8009080 <debug_waiting_buffer.lto_priv.44>
            return;
        }
    }
}
 8009154:	b002      	add	sp, #8
 8009156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800915a:	bf00      	nop
 800915c:	20001538 	.word	0x20001538
 8009160:	200014d9 	.word	0x200014d9
 8009164:	20001544 	.word	0x20001544
 8009168:	200014f4 	.word	0x200014f4
 800916c:	f3af 8000 	nop.w

08009170 <memset>:
 8009170:	b470      	push	{r4, r5, r6}
 8009172:	0784      	lsls	r4, r0, #30
 8009174:	d046      	beq.n	8009204 <memset+0x94>
 8009176:	1e54      	subs	r4, r2, #1
 8009178:	2a00      	cmp	r2, #0
 800917a:	d041      	beq.n	8009200 <memset+0x90>
 800917c:	b2cd      	uxtb	r5, r1
 800917e:	4603      	mov	r3, r0
 8009180:	e002      	b.n	8009188 <memset+0x18>
 8009182:	1e62      	subs	r2, r4, #1
 8009184:	b3e4      	cbz	r4, 8009200 <memset+0x90>
 8009186:	4614      	mov	r4, r2
 8009188:	f803 5b01 	strb.w	r5, [r3], #1
 800918c:	079a      	lsls	r2, r3, #30
 800918e:	d1f8      	bne.n	8009182 <memset+0x12>
 8009190:	2c03      	cmp	r4, #3
 8009192:	d92e      	bls.n	80091f2 <memset+0x82>
 8009194:	b2cd      	uxtb	r5, r1
 8009196:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800919a:	2c0f      	cmp	r4, #15
 800919c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80091a0:	d919      	bls.n	80091d6 <memset+0x66>
 80091a2:	4626      	mov	r6, r4
 80091a4:	f103 0210 	add.w	r2, r3, #16
 80091a8:	3e10      	subs	r6, #16
 80091aa:	2e0f      	cmp	r6, #15
 80091ac:	f842 5c10 	str.w	r5, [r2, #-16]
 80091b0:	f842 5c0c 	str.w	r5, [r2, #-12]
 80091b4:	f842 5c08 	str.w	r5, [r2, #-8]
 80091b8:	f842 5c04 	str.w	r5, [r2, #-4]
 80091bc:	f102 0210 	add.w	r2, r2, #16
 80091c0:	d8f2      	bhi.n	80091a8 <memset+0x38>
 80091c2:	f1a4 0210 	sub.w	r2, r4, #16
 80091c6:	f022 020f 	bic.w	r2, r2, #15
 80091ca:	f004 040f 	and.w	r4, r4, #15
 80091ce:	3210      	adds	r2, #16
 80091d0:	2c03      	cmp	r4, #3
 80091d2:	4413      	add	r3, r2
 80091d4:	d90d      	bls.n	80091f2 <memset+0x82>
 80091d6:	461e      	mov	r6, r3
 80091d8:	4622      	mov	r2, r4
 80091da:	3a04      	subs	r2, #4
 80091dc:	2a03      	cmp	r2, #3
 80091de:	f846 5b04 	str.w	r5, [r6], #4
 80091e2:	d8fa      	bhi.n	80091da <memset+0x6a>
 80091e4:	1f22      	subs	r2, r4, #4
 80091e6:	f022 0203 	bic.w	r2, r2, #3
 80091ea:	3204      	adds	r2, #4
 80091ec:	4413      	add	r3, r2
 80091ee:	f004 0403 	and.w	r4, r4, #3
 80091f2:	b12c      	cbz	r4, 8009200 <memset+0x90>
 80091f4:	b2c9      	uxtb	r1, r1
 80091f6:	441c      	add	r4, r3
 80091f8:	f803 1b01 	strb.w	r1, [r3], #1
 80091fc:	42a3      	cmp	r3, r4
 80091fe:	d1fb      	bne.n	80091f8 <memset+0x88>
 8009200:	bc70      	pop	{r4, r5, r6}
 8009202:	4770      	bx	lr
 8009204:	4614      	mov	r4, r2
 8009206:	4603      	mov	r3, r0
 8009208:	e7c2      	b.n	8009190 <memset+0x20>
 800920a:	bf00      	nop
 800920c:	0000      	movs	r0, r0
	...

08009210 <usb_strings>:
 8009210:	0004 0000 9360 0800 000c 0000 9350 0800     ....`.......P...
 8009220:	0028 0000 92e0 0800 0016 0000 1200 2000     (.............. 

08009230 <extra_hid_report_desc_data>:
 8009230:	0105 8009 01a1 0285 0115 b725 0119 b729     ..........%...).
 8009240:	1075 0195 0081 05c0 090c a101 8501 1503     u...............
 8009250:	2601 029c 0119 9c2a 7502 9510 8101 c000     .&....*..u......

08009260 <usb_device_descriptor_data>:
 8009260:	0112 0200 0000 4000 feed 6057 0001 0201     .......@..W`....
 8009270:	0103 0000 0000 0000 0000 0000 0000 0000     ................

08009280 <keyboard_hid_report_desc_data>:
 8009280:	0105 0609 01a1 0175 0895 0705 e019 e729     ......u.......).
 8009290:	0015 0125 0281 0195 0875 0381 0595 0175     ..%.....u.....u.
 80092a0:	0805 0119 0529 0291 0195 0375 0391 0695     ....).....u.....
 80092b0:	0875 0015 ff25 0705 0019 ff29 0081 00c0     u...%.....).....

080092c0 <mouse_hid_report_descriptor>:
 80092c0:	0051 0000 93d0 0800 0000 0000 0000 0000     Q...............

080092d0 <zero_status>:
	...

080092e0 <usb_string_description>:
 80092e0:	0328 0043 0068 0069 0062 0069 004f 0053     (.C.h.i.b.i.O.S.
 80092f0:	0020 0054 004d 004b 0020 0050 0068 0061      .T.M.K. .P.h.a.
 8009300:	006e 0074 006f 006d 0000 0000 0000 0000     n.t.o.m.........

08009310 <hid_configuration_descriptor>:
 8009310:	006d 0000 9460 0800 0000 0000 0000 0000     m...`...........

08009320 <active_status>:
	...

08009330 <extra_hid_descriptor>:
 8009330:	0009 0000 94a4 0800 0000 0000 0000 0000     ................

08009340 <nkro_hid_report_descriptor>:
 8009340:	0039 0000 9370 0800 0000 0000 0000 0000     9...p...........

08009350 <usb_string_vendor>:
 8009350:	030c 0054 004d 004b 0020 00c6 0000 0000     ..T.M.K. .......

08009360 <usb_string_langid>:
 8009360:	0304 0409 0000 0000 0000 0000 0000 0000     ................

08009370 <nkro_hid_report_desc_data>:
 8009370:	0105 0609 01a1 0175 0895 0705 e019 e729     ......u.......).
 8009380:	0015 0125 0281 0595 0175 0805 0119 0529     ..%.....u.....).
 8009390:	0291 0195 0375 0391 7895 0175 0015 0125     ....u....xu...%.
 80093a0:	0705 0019 7729 0281 00c0 0000 0000 0000     ....)w..........

080093b0 <extra_hid_report_descriptor>:
 80093b0:	0030 0000 9230 0800 0000 0000 0000 0000     0...0...........

080093c0 <mouse_hid_descriptor>:
 80093c0:	0009 0000 948b 0800 0000 0000 0000 0000     ................

080093d0 <mouse_hid_report_desc_data>:
 80093d0:	0105 0209 01a1 0109 00a1 0905 0119 0529     ..............).
 80093e0:	0015 0125 0175 0595 0281 0375 0195 0381     ..%.u.....u.....
 80093f0:	0105 3009 3109 8115 7f25 0875 0295 0681     ...0.1..%.u.....
 8009400:	3809 8115 7f25 0035 0045 0875 0195 0681     .8..%.5.E.u.....
 8009410:	0c05 380a 1502 2581 757f 9508 8101 c006     ...8...%.u......
 8009420:	00c0 0000 0000 0000 0000 0000 0000 0000     ................

08009430 <keyboard_hid_report_descriptor>:
 8009430:	003f 0000 9280 0800 0000 0000 0000 0000     ?...............

08009440 <CSWTCH.30>:
 8009440:	0400 0000 0600 0000 0000 0000 0000 0000     ................

08009450 <halted_status>:
 8009450:	0001 0000 0000 0000 0000 0000 0000 0000     ................

08009460 <hid_configuration_descriptor_data>:
 8009460:	0209 006d 0104 a000 0932 0004 0100 0103     ..m.....2.......
 8009470:	0001 2109 0111 0100 3f22 0700 8105 0803     ...!...."?......
 8009480:	0a00 0409 0001 0301 0000 0900 1121 0001     ............!...
 8009490:	2201 0051 0507 0382 0008 0901 0304 0100     ."Q.............
 80094a0:	0003 0000 2109 0111 0100 3022 0700 8405     .....!...."0....
 80094b0:	0803 0a00 0409 0004 0301 0000 0900 1121     ..............!.
 80094c0:	0001 2201 0039 0507 0385 0010 0001 0000     ..."9...........

080094d0 <nkro_hid_descriptor>:
 80094d0:	0009 0000 94a4 0800 0000 0000 0000 0000     ................

080094e0 <usb_device_descriptor>:
 80094e0:	0012 0000 9260 0800 0000 0000 0000 0000     ....`...........

080094f0 <keyboard_hid_descriptor>:
 80094f0:	0009 0000 9472 0800 0000 0000 0000 0000     ....r...........

08009500 <ch_debug>:
 8009500:	616d 6e69 1600 1840 0204 0844 100c 1814     main..@...D.....
 8009510:	1c00 1e1d 0000 0000 0000 0000 0000 0000     ................

08009520 <extra_ep_config>:
 8009520:	0003 0000 0000 0000 6c71 0800 0000 0000     ........ql......
 8009530:	0008 0000 1264 2000 0000 0000 0002 0000     ....d.. ........
	...

08009550 <nkro_ep_config>:
 8009550:	0003 0000 0000 0000 6ca1 0800 0000 0000     .........l......
 8009560:	0010 0000 12c4 2000 0000 0000 0002 0000     ....... ........
	...

08009580 <usbcfg>:
 8009580:	7081 0800 5a41 0800 6ed1 0800 6cc1 0800     .p..AZ...n...l..
 8009590:	6469 656c 0000 0000 0000 0000 0000 0000     idle............

080095a0 <mouse_ep_config>:
 80095a0:	0003 0000 0000 0000 6c81 0800 0000 0000     .........l......
 80095b0:	0008 0000 12d4 2000 0000 0000 0002 0000     ....... ........
	...

080095d0 <kbd_ep_config>:
 80095d0:	0003 0000 0000 0000 6cb1 0800 0000 0000     .........l......
 80095e0:	0008 0000 1254 2000 0000 0000 0002 0000     ....T.. ........
	...

08009600 <CSWTCH.41>:
 8009600:	0201 0403 0605 0807 0009 0000 0000 0000     ................

08009610 <ep0config>:
 8009610:	0000 0000 65c1 0800 64d1 0800 6421 0800     .....e...d..!d..
 8009620:	0040 0040 1554 2000 1554 2000 0001 0000     @.@.T.. T.. ....
 8009630:	154c 2000                                   L.. 
