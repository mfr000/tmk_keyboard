
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

08005160 <Reset_Handler>:
 8005160:	b672      	cpsid	i
 8005162:	4821      	ldr	r0, [pc, #132]	; (80051e8 <endfiniloop+0x4>)
 8005164:	f380 8809 	msr	PSP, r0
 8005168:	2002      	movs	r0, #2
 800516a:	f380 8814 	msr	CONTROL, r0
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f001 fa9d 	bl	80066b0 <__core_init>
 8005176:	f000 fa1b 	bl	80055b0 <__early_init>
 800517a:	481c      	ldr	r0, [pc, #112]	; (80051ec <endfiniloop+0x8>)
 800517c:	491c      	ldr	r1, [pc, #112]	; (80051f0 <endfiniloop+0xc>)
 800517e:	4a1d      	ldr	r2, [pc, #116]	; (80051f4 <endfiniloop+0x10>)

08005180 <msloop>:
 8005180:	4291      	cmp	r1, r2
 8005182:	bf3c      	itt	cc
 8005184:	f841 0b04 	strcc.w	r0, [r1], #4
 8005188:	e7fa      	bcc.n	8005180 <msloop>
 800518a:	491b      	ldr	r1, [pc, #108]	; (80051f8 <endfiniloop+0x14>)
 800518c:	4a16      	ldr	r2, [pc, #88]	; (80051e8 <endfiniloop+0x4>)

0800518e <psloop>:
 800518e:	4291      	cmp	r1, r2
 8005190:	bf3c      	itt	cc
 8005192:	f841 0b04 	strcc.w	r0, [r1], #4
 8005196:	e7fa      	bcc.n	800518e <psloop>
 8005198:	4918      	ldr	r1, [pc, #96]	; (80051fc <endfiniloop+0x18>)
 800519a:	4a19      	ldr	r2, [pc, #100]	; (8005200 <endfiniloop+0x1c>)
 800519c:	4b19      	ldr	r3, [pc, #100]	; (8005204 <endfiniloop+0x20>)

0800519e <dloop>:
 800519e:	429a      	cmp	r2, r3
 80051a0:	bf3e      	ittt	cc
 80051a2:	f851 0b04 	ldrcc.w	r0, [r1], #4
 80051a6:	f842 0b04 	strcc.w	r0, [r2], #4
 80051aa:	e7f8      	bcc.n	800519e <dloop>
 80051ac:	2000      	movs	r0, #0
 80051ae:	4916      	ldr	r1, [pc, #88]	; (8005208 <endfiniloop+0x24>)
 80051b0:	4a16      	ldr	r2, [pc, #88]	; (800520c <endfiniloop+0x28>)

080051b2 <bloop>:
 80051b2:	4291      	cmp	r1, r2
 80051b4:	bf3c      	itt	cc
 80051b6:	f841 0b04 	strcc.w	r0, [r1], #4
 80051ba:	e7fa      	bcc.n	80051b2 <bloop>
 80051bc:	f001 fa70 	bl	80066a0 <__late_init>
 80051c0:	4c13      	ldr	r4, [pc, #76]	; (8005210 <endfiniloop+0x2c>)
 80051c2:	4d14      	ldr	r5, [pc, #80]	; (8005214 <endfiniloop+0x30>)

080051c4 <initloop>:
 80051c4:	42ac      	cmp	r4, r5
 80051c6:	da03      	bge.n	80051d0 <endinitloop>
 80051c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80051cc:	4788      	blx	r1
 80051ce:	e7f9      	b.n	80051c4 <initloop>

080051d0 <endinitloop>:
 80051d0:	f001 fc5e 	bl	8006a90 <main>
 80051d4:	4c10      	ldr	r4, [pc, #64]	; (8005218 <endfiniloop+0x34>)
 80051d6:	4d11      	ldr	r5, [pc, #68]	; (800521c <endfiniloop+0x38>)

080051d8 <finiloop>:
 80051d8:	42ac      	cmp	r4, r5
 80051da:	da03      	bge.n	80051e4 <endfiniloop>
 80051dc:	f854 1b04 	ldr.w	r1, [r4], #4
 80051e0:	4788      	blx	r1
 80051e2:	e7f9      	b.n	80051d8 <finiloop>

080051e4 <endfiniloop>:
 80051e4:	f001 ba54 	b.w	8006690 <__default_exit>
 80051e8:	20001200 	.word	0x20001200
 80051ec:	55555555 	.word	0x55555555
 80051f0:	20000c00 	.word	0x20000c00
 80051f4:	20001000 	.word	0x20001000
 80051f8:	20001000 	.word	0x20001000
 80051fc:	08008930 	.word	0x08008930
 8005200:	20001200 	.word	0x20001200
 8005204:	20001234 	.word	0x20001234
 8005208:	20001238 	.word	0x20001238
 800520c:	200015a0 	.word	0x200015a0
 8005210:	08005160 	.word	0x08005160
 8005214:	08005160 	.word	0x08005160
 8005218:	08005160 	.word	0x08005160
 800521c:	08005160 	.word	0x08005160

08005220 <_port_switch>:
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	f8c1 d00c 	str.w	sp, [r1, #12]
 8005228:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800522c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005230 <_port_thread_start>:
 8005230:	2300      	movs	r3, #0
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	4628      	mov	r0, r5
 8005238:	47a0      	blx	r4
 800523a:	2000      	movs	r0, #0
 800523c:	f001 f888 	bl	8006350 <chThdExit>

08005240 <_port_switch_from_isr>:
 8005240:	f000 fb16 	bl	8005870 <chSchDoReschedule>

08005244 <_port_exit_from_isr>:
 8005244:	df00      	svc	0
 8005246:	e7fe      	b.n	8005246 <_port_exit_from_isr+0x2>
	...

08005250 <usb_sof_cb.lto_priv.50>:

  return FALSE;
}

/* Start-of-frame callback */
static void usb_sof_cb(USBDriver *usbp) {
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	f3af 8000 	nop.w
 8005258:	f3af 8000 	nop.w
 800525c:	f3af 8000 	nop.w

08005260 <usb_get_descriptor_cb.lto_priv.48>:
 * Returns the proper descriptor
 */
static const USBDescriptor *usb_get_descriptor_cb(USBDriver *usbp, uint8_t dtype, uint8_t dindex, uint16_t lang) {
  (void)usbp;
  (void)lang;
  switch(dtype) {
 8005260:	3901      	subs	r1, #1
 8005262:	2921      	cmp	r1, #33	; 0x21
 8005264:	d82a      	bhi.n	80052bc <usb_get_descriptor_cb.lto_priv.48+0x5c>
 8005266:	e8df f001 	tbb	[pc, r1]
 800526a:	211f      	.short	0x211f
 800526c:	29292923 	.word	0x29292923
 8005270:	29292929 	.word	0x29292929
 8005274:	29292929 	.word	0x29292929
 8005278:	29292929 	.word	0x29292929
 800527c:	29292929 	.word	0x29292929
 8005280:	29292929 	.word	0x29292929
 8005284:	29292929 	.word	0x29292929
 8005288:	16112929 	.word	0x16112929
      return &usb_strings[dindex];
    break;

  /* HID specific descriptors */
  case USB_DESCRIPTOR_HID:      /* HID Descriptors */
    switch(lang) {    /* yea, poor label, it's actually wIndex from the setup packet */
 800528c:	2b02      	cmp	r3, #2
 800528e:	d01f      	beq.n	80052d0 <usb_get_descriptor_cb.lto_priv.48+0x70>
 8005290:	2b04      	cmp	r3, #4
 8005292:	d01b      	beq.n	80052cc <usb_get_descriptor_cb.lto_priv.48+0x6c>
 8005294:	b1c3      	cbz	r3, 80052c8 <usb_get_descriptor_cb.lto_priv.48+0x68>
      return &nkro_hid_descriptor;
#endif /* NKRO_ENABLE */
    }

  case USB_DESCRIPTOR_HID_REPORT:       /* HID Report Descriptor */
    switch(lang) {
 8005296:	2b02      	cmp	r3, #2
 8005298:	d012      	beq.n	80052c0 <usb_get_descriptor_cb.lto_priv.48+0x60>
 800529a:	2b04      	cmp	r3, #4
 800529c:	d012      	beq.n	80052c4 <usb_get_descriptor_cb.lto_priv.48+0x64>
 800529e:	2b00      	cmp	r3, #0
    case NKRO_INTERFACE:
      return &nkro_hid_report_descriptor;
#endif /* NKRO_ENABLE */
    }
  }
  return NULL;
 80052a0:	480c      	ldr	r0, [pc, #48]	; (80052d4 <usb_get_descriptor_cb.lto_priv.48+0x74>)
 80052a2:	bf18      	it	ne
 80052a4:	2000      	movne	r0, #0
 80052a6:	4770      	bx	lr
  (void)usbp;
  (void)lang;
  switch(dtype) {
  /* Generic descriptors */
  case USB_DESCRIPTOR_DEVICE:   /* Device Descriptor */
    return &usb_device_descriptor;
 80052a8:	480b      	ldr	r0, [pc, #44]	; (80052d8 <usb_get_descriptor_cb.lto_priv.48+0x78>)
 80052aa:	4770      	bx	lr

  case USB_DESCRIPTOR_CONFIGURATION:    /* Configuration Descriptor */
    return &hid_configuration_descriptor;
 80052ac:	480b      	ldr	r0, [pc, #44]	; (80052dc <usb_get_descriptor_cb.lto_priv.48+0x7c>)
 80052ae:	4770      	bx	lr

  case USB_DESCRIPTOR_STRING:   /* Strings */
    if(dindex < 4)
 80052b0:	2a03      	cmp	r2, #3
 80052b2:	d803      	bhi.n	80052bc <usb_get_descriptor_cb.lto_priv.48+0x5c>
      return &usb_strings[dindex];
 80052b4:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <usb_get_descriptor_cb.lto_priv.48+0x80>)
 80052b6:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
 80052ba:	4770      	bx	lr
    case NKRO_INTERFACE:
      return &nkro_hid_report_descriptor;
#endif /* NKRO_ENABLE */
    }
  }
  return NULL;
 80052bc:	2000      	movs	r0, #0
 80052be:	4770      	bx	lr
    case MOUSE_INTERFACE:
      return &mouse_hid_report_descriptor;
#endif /* MOUSE_ENABLE */
#ifdef CONSOLE_ENABLE
    case CONSOLE_INTERFACE:
      return &console_hid_report_descriptor;
 80052c0:	4808      	ldr	r0, [pc, #32]	; (80052e4 <usb_get_descriptor_cb.lto_priv.48+0x84>)
 80052c2:	4770      	bx	lr
    case EXTRA_INTERFACE:
      return &extra_hid_report_descriptor;
#endif /* EXTRAKEY_ENABLE */
#ifdef NKRO_ENABLE
    case NKRO_INTERFACE:
      return &nkro_hid_report_descriptor;
 80052c4:	4808      	ldr	r0, [pc, #32]	; (80052e8 <usb_get_descriptor_cb.lto_priv.48+0x88>)
 80052c6:	4770      	bx	lr

  /* HID specific descriptors */
  case USB_DESCRIPTOR_HID:      /* HID Descriptors */
    switch(lang) {    /* yea, poor label, it's actually wIndex from the setup packet */
    case KBD_INTERFACE:
      return &keyboard_hid_descriptor;
 80052c8:	4808      	ldr	r0, [pc, #32]	; (80052ec <usb_get_descriptor_cb.lto_priv.48+0x8c>)
      return &nkro_hid_report_descriptor;
#endif /* NKRO_ENABLE */
    }
  }
  return NULL;
}
 80052ca:	4770      	bx	lr
    case EXTRA_INTERFACE:
      return &extra_hid_descriptor;
#endif /* EXTRAKEY_ENABLE */
#ifdef NKRO_ENABLE
    case NKRO_INTERFACE:
      return &nkro_hid_descriptor;
 80052cc:	4808      	ldr	r0, [pc, #32]	; (80052f0 <usb_get_descriptor_cb.lto_priv.48+0x90>)
 80052ce:	4770      	bx	lr
    case MOUSE_INTERFACE:
      return &mouse_hid_descriptor;
#endif /* MOUSE_ENABLE */
#ifdef CONSOLE_ENABLE
    case CONSOLE_INTERFACE:
      return &console_hid_descriptor;
 80052d0:	4808      	ldr	r0, [pc, #32]	; (80052f4 <usb_get_descriptor_cb.lto_priv.48+0x94>)
 80052d2:	4770      	bx	lr
 80052d4:	080086a0 	.word	0x080086a0
 80052d8:	080087a0 	.word	0x080087a0
 80052dc:	080085c0 	.word	0x080085c0
 80052e0:	08008610 	.word	0x08008610
 80052e4:	08008780 	.word	0x08008780
 80052e8:	080087b0 	.word	0x080087b0
 80052ec:	08008690 	.word	0x08008690
 80052f0:	08008770 	.word	0x08008770
 80052f4:	080085d0 	.word	0x080085d0
 80052f8:	f3af 8000 	nop.w
 80052fc:	f3af 8000 	nop.w

08005300 <usb_packet_write_from_buffer>:
 *
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
 8005300:	b470      	push	{r4, r5, r6}
  uint32_t w;
  size_t i;
  stm32_usb_pma_t *pmap;

  pmap = USB_ADDR2PTR(udp->TXADDR0);
 8005302:	6805      	ldr	r5, [r0, #0]
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8005304:	6042      	str	r2, [r0, #4]
                                         size_t n) {
  uint32_t w;
  size_t i;
  stm32_usb_pma_t *pmap;

  pmap = USB_ADDR2PTR(udp->TXADDR0);
 8005306:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
 800530a:	f505 5540 	add.w	r5, r5, #12288	; 0x3000
 800530e:	006d      	lsls	r5, r5, #1
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;

  /* Pushing all complete words.*/
  i = 0;
  w = 0; /* Useless but silences a warning.*/
  while (i < n) {
 8005310:	b19a      	cbz	r2, 800533a <usb_packet_write_from_buffer+0x3a>
 8005312:	460b      	mov	r3, r1
 8005314:	188e      	adds	r6, r1, r2
 8005316:	2000      	movs	r0, #0
 8005318:	1a5c      	subs	r4, r3, r1
    if ((i & 1) == 0) {
 800531a:	07e4      	lsls	r4, r4, #31
      w = (uint32_t)*buf;
    }
    else {
      w |= (uint32_t)*buf << 8;
 800531c:	bf4a      	itet	mi
 800531e:	781c      	ldrbmi	r4, [r3, #0]
  /* Pushing all complete words.*/
  i = 0;
  w = 0; /* Useless but silences a warning.*/
  while (i < n) {
    if ((i & 1) == 0) {
      w = (uint32_t)*buf;
 8005320:	7818      	ldrbpl	r0, [r3, #0]
    }
    else {
      w |= (uint32_t)*buf << 8;
 8005322:	ea40 2004 	orrmi.w	r0, r0, r4, lsl #8
      *pmap = (stm32_usb_pma_t)w;
      pmap++;
    }
    i++;
    buf++;
 8005326:	f103 0301 	add.w	r3, r3, #1
    if ((i & 1) == 0) {
      w = (uint32_t)*buf;
    }
    else {
      w |= (uint32_t)*buf << 8;
      *pmap = (stm32_usb_pma_t)w;
 800532a:	bf48      	it	mi
 800532c:	f845 0b04 	strmi.w	r0, [r5], #4
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;

  /* Pushing all complete words.*/
  i = 0;
  w = 0; /* Useless but silences a warning.*/
  while (i < n) {
 8005330:	42b3      	cmp	r3, r6
 8005332:	d1f1      	bne.n	8005318 <usb_packet_write_from_buffer+0x18>
    i++;
    buf++;
  }

  /* Remaining byte.*/
  if ((i & 1) != 0) {
 8005334:	07d3      	lsls	r3, r2, #31
    *pmap = (stm32_usb_pma_t)w;
 8005336:	bf48      	it	mi
 8005338:	6028      	strmi	r0, [r5, #0]
  }
}
 800533a:	bc70      	pop	{r4, r5, r6}
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop

08005340 <set_address>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8005340:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8005344:	6842      	ldr	r2, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8005346:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {

  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 800534a:	4906      	ldr	r1, [pc, #24]	; (8005364 <set_address+0x24>)
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800534c:	6812      	ldr	r2, [r2, #0]
 800534e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 8005352:	b510      	push	{r4, lr}
 8005354:	4604      	mov	r4, r0
 8005356:	64cb      	str	r3, [r1, #76]	; 0x4c

  usbp->address = usbp->setup[2];
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8005358:	b10a      	cbz	r2, 800535e <set_address+0x1e>
 800535a:	2101      	movs	r1, #1
 800535c:	4790      	blx	r2
  usbp->state = USB_SELECTED;
 800535e:	2303      	movs	r3, #3
 8005360:	7023      	strb	r3, [r4, #0]
 8005362:	bd10      	pop	{r4, pc}
 8005364:	40005c00 	.word	0x40005c00
 8005368:	f3af 8000 	nop.w
 800536c:	f3af 8000 	nop.w

08005370 <_port_irq_epilogue>:

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005370:	2320      	movs	r3, #32
 8005372:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8005376:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <_port_irq_epilogue+0x44>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800537e:	d102      	bne.n	8005386 <_port_irq_epilogue+0x16>
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8005386:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800538a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800538e:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8005392:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8005396:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800539a:	4a07      	ldr	r2, [pc, #28]	; (80053b8 <_port_irq_epilogue+0x48>)
 800539c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 800539e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80053a0:	6889      	ldr	r1, [r1, #8]
 80053a2:	6892      	ldr	r2, [r2, #8]
 80053a4:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80053a6:	bf8c      	ite	hi
 80053a8:	4a04      	ldrhi	r2, [pc, #16]	; (80053bc <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80053aa:	4a05      	ldrls	r2, [pc, #20]	; (80053c0 <_port_irq_epilogue+0x50>)
 80053ac:	f843 2c08 	str.w	r2, [r3, #-8]
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	e000ed00 	.word	0xe000ed00
 80053b8:	20001270 	.word	0x20001270
 80053bc:	08005241 	.word	0x08005241
 80053c0:	08005244 	.word	0x08005244
 80053c4:	f3af 8000 	nop.w
 80053c8:	f3af 8000 	nop.w
 80053cc:	f3af 8000 	nop.w

080053d0 <Vector8C>:
 */
OSAL_IRQ_HANDLER(STM32_USB1_HP_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  OSAL_IRQ_EPILOGUE();
 80053d0:	f7ff bfce 	b.w	8005370 <_port_irq_epilogue>
 80053d4:	f3af 8000 	nop.w
 80053d8:	f3af 8000 	nop.w
 80053dc:	f3af 8000 	nop.w

080053e0 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80053e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80053e4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80053e8:	6923      	ldr	r3, [r4, #16]
 80053ea:	079b      	lsls	r3, r3, #30
 80053ec:	d403      	bmi.n	80053f6 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 80053ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80053f2:	f7ff bfbd 	b.w	8005370 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 80053f6:	2700      	movs	r7, #0
 80053f8:	6127      	str	r7, [r4, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80053fa:	2520      	movs	r5, #32
 80053fc:	f385 8811 	msr	BASEPRI, r5
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8005400:	4e1e      	ldr	r6, [pc, #120]	; (800547c <VectorB0+0x9c>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8005402:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8005404:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8005408:	69f3      	ldr	r3, [r6, #28]
 800540a:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 800540c:	ebce 0100 	rsb	r1, lr, r0
 8005410:	891a      	ldrh	r2, [r3, #8]
 8005412:	b289      	uxth	r1, r1
 8005414:	4291      	cmp	r1, r2
 8005416:	f106 081c 	add.w	r8, r6, #28
 800541a:	d31b      	bcc.n	8005454 <VectorB0+0x74>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800541c:	6819      	ldr	r1, [r3, #0]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 800541e:	4472      	add	r2, lr
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8005420:	4541      	cmp	r1, r8
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8005422:	84f2      	strh	r2, [r6, #38]	; 0x26

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8005424:	68da      	ldr	r2, [r3, #12]
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8005426:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 800542a:	61f1      	str	r1, [r6, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 800542c:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 800542e:	bf08      	it	eq
 8005430:	60e7      	streq	r7, [r4, #12]
 8005432:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8005436:	6918      	ldr	r0, [r3, #16]
 8005438:	4790      	blx	r2
 800543a:	f385 8811 	msr	BASEPRI, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800543e:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8005440:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8005444:	69f3      	ldr	r3, [r6, #28]
 8005446:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8005448:	ebce 0100 	rsb	r1, lr, r0
 800544c:	891a      	ldrh	r2, [r3, #8]
 800544e:	b289      	uxth	r1, r1
 8005450:	428a      	cmp	r2, r1
 8005452:	d9e3      	bls.n	800541c <VectorB0+0x3c>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8005454:	4543      	cmp	r3, r8
 8005456:	d00a      	beq.n	800546e <VectorB0+0x8e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8005458:	4472      	add	r2, lr
 800545a:	1a12      	subs	r2, r2, r0
 800545c:	b292      	uxth	r2, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800545e:	2a01      	cmp	r2, #1
 8005460:	bf98      	it	ls
 8005462:	2202      	movls	r2, #2
  }
  port_timer_set_alarm(now + delta);
 8005464:	4402      	add	r2, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8005466:	b292      	uxth	r2, r2
 8005468:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800546c:	635a      	str	r2, [r3, #52]	; 0x34
 800546e:	2300      	movs	r3, #0
 8005470:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8005474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8005478:	f7ff bf7a 	b.w	8005370 <_port_irq_epilogue>
 800547c:	20001270 	.word	0x20001270

08005480 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8005480:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8005484:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8005486:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800548a:	2300      	movs	r3, #0
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	f3af 8000 	nop.w
 8005498:	f3af 8000 	nop.w
 800549c:	f3af 8000 	nop.w

080054a0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 80054a0:	b410      	push	{r4}
 80054a2:	2320      	movs	r3, #32
 80054a4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 80054a8:	4c09      	ldr	r4, [pc, #36]	; (80054d0 <chCoreAlloc+0x30>)
 80054aa:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <chCoreAlloc+0x34>)
 80054ac:	6822      	ldr	r2, [r4, #0]
 80054ae:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 80054b0:	1dc3      	adds	r3, r0, #7
 80054b2:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 80054b6:	1a89      	subs	r1, r1, r2
 80054b8:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 80054ba:	bf9d      	ittte	ls
 80054bc:	189b      	addls	r3, r3, r2
 80054be:	6023      	strls	r3, [r4, #0]

  return p;
 80054c0:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 80054c2:	2000      	movhi	r0, #0
 80054c4:	2300      	movs	r3, #0
 80054c6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 80054ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	2000144c 	.word	0x2000144c
 80054d4:	200013f8 	.word	0x200013f8
 80054d8:	f3af 8000 	nop.w
 80054dc:	f3af 8000 	nop.w

080054e0 <wakeup.lto_priv.46>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 80054e0:	b410      	push	{r4}
 80054e2:	2320      	movs	r3, #32
 80054e4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 80054e8:	7f03      	ldrb	r3, [r0, #28]
 80054ea:	2b07      	cmp	r3, #7
 80054ec:	d80e      	bhi.n	800550c <wakeup.lto_priv.46+0x2c>
 80054ee:	e8df f003 	tbb	[pc, r3]
 80054f2:	0d27      	.short	0x0d27
 80054f4:	0408230d 	.word	0x0408230d
 80054f8:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 80054fa:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 80054fc:	6893      	ldr	r3, [r2, #8]
 80054fe:	3301      	adds	r3, #1
 8005500:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8005502:	e890 000c 	ldmia.w	r0, {r2, r3}
 8005506:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8005508:	6802      	ldr	r2, [r0, #0]
 800550a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800550c:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8005510:	2200      	movs	r2, #0
 8005512:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8005514:	4b0d      	ldr	r3, [pc, #52]	; (800554c <wakeup.lto_priv.46+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8005516:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8005518:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800551a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	428a      	cmp	r2, r1
 8005520:	d2fb      	bcs.n	800551a <wakeup.lto_priv.46+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8005526:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 8005528:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 800552a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 800552c:	6058      	str	r0, [r3, #4]
 800552e:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8005532:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005536:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8005538:	6a03      	ldr	r3, [r0, #32]
 800553a:	2200      	movs	r2, #0
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	e7e5      	b.n	800550c <wakeup.lto_priv.46+0x2c>
 8005540:	2300      	movs	r3, #0
 8005542:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8005546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	20001270 	.word	0x20001270

08005550 <_idle_thread.lto_priv.45>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8005550:	e7fe      	b.n	8005550 <_idle_thread.lto_priv.45>
 8005552:	bf00      	nop
 8005554:	f3af 8000 	nop.w
 8005558:	f3af 8000 	nop.w
 800555c:	f3af 8000 	nop.w

08005560 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8005560:	e7fe      	b.n	8005560 <BusFault_Handler>
 8005562:	bf00      	nop
 8005564:	f3af 8000 	nop.w
 8005568:	f3af 8000 	nop.w
 800556c:	f3af 8000 	nop.w

08005570 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8005570:	4a0d      	ldr	r2, [pc, #52]	; (80055a8 <chSchDoRescheduleAhead+0x38>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8005572:	b4f0      	push	{r4, r5, r6, r7}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8005574:	6810      	ldr	r0, [r2, #0]
  thread_t *otp, *cp;

  otp = currp;
 8005576:	6994      	ldr	r4, [r2, #24]

  tqp->p_next = tp->p_next;
 8005578:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800557a:	2701      	movs	r7, #1

  otp->p_state = CH_STATE_READY;
 800557c:	2600      	movs	r6, #0
 800557e:	68a1      	ldr	r1, [r4, #8]
 8005580:	462b      	mov	r3, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 8005582:	606a      	str	r2, [r5, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8005584:	6015      	str	r5, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8005586:	7707      	strb	r7, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8005588:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800558a:	7726      	strb	r6, [r4, #28]
 800558c:	e000      	b.n	8005590 <chSchDoRescheduleAhead+0x20>
 800558e:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8005590:	689a      	ldr	r2, [r3, #8]
 8005592:	428a      	cmp	r2, r1
 8005594:	d8fb      	bhi.n	800558e <chSchDoRescheduleAhead+0x1e>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8005596:	685a      	ldr	r2, [r3, #4]
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8005598:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 800559a:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
 800559c:	6062      	str	r2, [r4, #4]
  otp->p_prev->p_next = otp;
 800559e:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 80055a0:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 80055a2:	bcf0      	pop	{r4, r5, r6, r7}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80055a4:	f7ff be3c 	b.w	8005220 <_port_switch>
 80055a8:	20001270 	.word	0x20001270
 80055ac:	f3af 8000 	nop.w

080055b0 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80055b0:	4b1f      	ldr	r3, [pc, #124]	; (8005630 <__early_init+0x80>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80055b2:	4619      	mov	r1, r3
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	f042 0201 	orr.w	r2, r2, #1
 80055ba:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80055bc:	680b      	ldr	r3, [r1, #0]
 80055be:	4a1c      	ldr	r2, [pc, #112]	; (8005630 <__early_init+0x80>)
 80055c0:	079b      	lsls	r3, r3, #30
 80055c2:	d5fb      	bpl.n	80055bc <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80055c4:	4611      	mov	r1, r2
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80055c6:	6813      	ldr	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80055c8:	2000      	movs	r0, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80055ca:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 80055ce:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80055d0:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80055d2:	684b      	ldr	r3, [r1, #4]
 80055d4:	4a16      	ldr	r2, [pc, #88]	; (8005630 <__early_init+0x80>)
 80055d6:	f013 0f0c 	tst.w	r3, #12
 80055da:	d1fa      	bne.n	80055d2 <__early_init+0x22>
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
  while (!(RCC->CR & RCC_CR_HSERDY))
 80055dc:	4611      	mov	r1, r2
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 80055de:	6813      	ldr	r3, [r2, #0]
 80055e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055e4:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 80055e6:	680b      	ldr	r3, [r1, #0]
 80055e8:	4a11      	ldr	r2, [pc, #68]	; (8005630 <__early_init+0x80>)
 80055ea:	0398      	lsls	r0, r3, #14
 80055ec:	d5fb      	bpl.n	80055e6 <__early_init+0x36>

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80055ee:	4611      	mov	r1, r2
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 80055f0:	6853      	ldr	r3, [r2, #4]
 80055f2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80055f6:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 80055f8:	6813      	ldr	r3, [r2, #0]
 80055fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055fe:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8005600:	680b      	ldr	r3, [r1, #0]
 8005602:	4a0b      	ldr	r2, [pc, #44]	; (8005630 <__early_init+0x80>)
 8005604:	019b      	lsls	r3, r3, #6
 8005606:	d5fb      	bpl.n	8005600 <__early_init+0x50>

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8005608:	4611      	mov	r1, r2
/*
 * Early initialization code.
 * This initialization must be performed just after stack setup and before
 * any other initialization.
 */
void __early_init(void) {
 800560a:	b410      	push	{r4}
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800560c:	4b09      	ldr	r3, [pc, #36]	; (8005634 <__early_init+0x84>)
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 800560e:	4c0a      	ldr	r4, [pc, #40]	; (8005638 <__early_init+0x88>)
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8005610:	2012      	movs	r0, #18
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8005612:	6054      	str	r4, [r2, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8005614:	6018      	str	r0, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8005616:	6853      	ldr	r3, [r2, #4]
 8005618:	f043 0302 	orr.w	r3, r3, #2
 800561c:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800561e:	684b      	ldr	r3, [r1, #4]
 8005620:	f003 030c 	and.w	r3, r3, #12
 8005624:	2b08      	cmp	r3, #8
 8005626:	d1fa      	bne.n	800561e <__early_init+0x6e>

  stm32_clock_init();
}
 8005628:	f85d 4b04 	ldr.w	r4, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40021000 	.word	0x40021000
 8005634:	40022000 	.word	0x40022000
 8005638:	001d6400 	.word	0x001d6400
 800563c:	f3af 8000 	nop.w

08005640 <usb_lld_init_endpoint>:
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8005640:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8005644:	b470      	push	{r4, r5, r6}
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8005646:	68dc      	ldr	r4, [r3, #12]

  /* Setting the endpoint type.*/
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	3b01      	subs	r3, #1
 8005650:	2b02      	cmp	r3, #2
 8005652:	bf96      	itet	ls
 8005654:	4a31      	ldrls	r2, [pc, #196]	; (800571c <usb_lld_init_endpoint+0xdc>)
 8005656:	f44f 7600 	movhi.w	r6, #512	; 0x200
 800565a:	f832 6013 	ldrhls.w	r6, [r2, r3, lsl #1]
  default:
    epr = EPR_EP_TYPE_CONTROL;
  }

  /* IN endpoint initially in NAK mode.*/
  if (epcp->in_cb != NULL)
 800565e:	68a3      	ldr	r3, [r4, #8]
 8005660:	b10b      	cbz	r3, 8005666 <usb_lld_init_endpoint+0x26>
    epr |= EPR_STAT_TX_NAK;
 8005662:	f046 0620 	orr.w	r6, r6, #32

  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
 8005666:	68e3      	ldr	r3, [r4, #12]
 8005668:	b10b      	cbz	r3, 800566e <usb_lld_init_endpoint+0x2e>
    epr |= EPR_STAT_RX_NAK;
 800566a:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 800566e:	f647 0570 	movw	r5, #30832	; 0x7870
  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
 8005672:	ea46 0201 	orr.w	r2, r6, r1
 8005676:	f422 4278 	bic.w	r2, r2, #63488	; 0xf800
 800567a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800567e:	008b      	lsls	r3, r1, #2
 8005680:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005684:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005688:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800568c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005690:	601a      	str	r2, [r3, #0]
  EPR_TOGGLE(ep, epr);
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	4035      	ands	r5, r6
 8005696:	4055      	eors	r5, r2

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 8005698:	8a62      	ldrh	r2, [r4, #18]
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 800569a:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 800569e:	f045 0580 	orr.w	r5, r5, #128	; 0x80

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 80056a2:	2a3e      	cmp	r2, #62	; 0x3e
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 80056a4:	601d      	str	r5, [r3, #0]

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 80056a6:	f102 33ff 	add.w	r3, r2, #4294967295
  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 80056aa:	d82c      	bhi.n	8005706 <usb_lld_init_endpoint+0xc6>
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
 80056ac:	f043 0301 	orr.w	r3, r3, #1
 80056b0:	3301      	adds	r3, #1
 80056b2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80056b6:	025b      	lsls	r3, r3, #9
 80056b8:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
  dp = USB_GET_DESCRIPTOR(ep);
 80056bc:	4d18      	ldr	r5, [pc, #96]	; (8005720 <usb_lld_init_endpoint+0xe0>)
  dp->TXCOUNT0 = 0;
 80056be:	2600      	movs	r6, #0
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 80056c0:	6d2d      	ldr	r5, [r5, #80]	; 0x50
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 80056c2:	8a24      	ldrh	r4, [r4, #16]
 80056c4:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
 80056c8:	f505 5540 	add.w	r5, r5, #12288	; 0x3000
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 80056cc:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80056d0:	0049      	lsls	r1, r1, #1
  dp->TXCOUNT0 = 0;
 80056d2:	684d      	ldr	r5, [r1, #4]
 80056d4:	604e      	str	r6, [r1, #4]
  dp->RXCOUNT0 = nblocks;
 80056d6:	68cd      	ldr	r5, [r1, #12]
 80056d8:	60cb      	str	r3, [r1, #12]
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += (size + 1) & ~1;
 80056da:	1c63      	adds	r3, r4, #1
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 80056dc:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
  usbp->pmnext += (size + 1) & ~1;
 80056e0:	f023 0301 	bic.w	r3, r3, #1
 80056e4:	4423      	add	r3, r4
 80056e6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 80056ea:	680b      	ldr	r3, [r1, #0]
 80056ec:	600c      	str	r4, [r1, #0]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 80056ee:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
  usbp->pmnext += (size + 1) & ~1;
 80056f2:	3201      	adds	r2, #1
 80056f4:	f022 0201 	bic.w	r2, r2, #1
 80056f8:	441a      	add	r2, r3
 80056fa:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 80056fe:	688a      	ldr	r2, [r1, #8]
}
 8005700:	bc70      	pop	{r4, r5, r6}
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8005702:	608b      	str	r3, [r1, #8]
}
 8005704:	4770      	bx	lr
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8005706:	f043 031f 	orr.w	r3, r3, #31
 800570a:	3301      	adds	r3, #1
 800570c:	115b      	asrs	r3, r3, #5
 800570e:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8005712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005716:	b29b      	uxth	r3, r3
 8005718:	e7d0      	b.n	80056bc <usb_lld_init_endpoint+0x7c>
 800571a:	bf00      	nop
 800571c:	08008650 	.word	0x08008650
 8005720:	40005c00 	.word	0x40005c00
 8005724:	f3af 8000 	nop.w
 8005728:	f3af 8000 	nop.w
 800572c:	f3af 8000 	nop.w

08005730 <usbInitEndpointI>:
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 8005730:	6953      	ldr	r3, [r2, #20]
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 8005732:	b570      	push	{r4, r5, r6, lr}
 8005734:	4614      	mov	r4, r2
 8005736:	4606      	mov	r6, r0
 8005738:	460d      	mov	r5, r1
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 800573a:	b123      	cbz	r3, 8005746 <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 800573c:	4618      	mov	r0, r3
 800573e:	2100      	movs	r1, #0
 8005740:	2210      	movs	r2, #16
 8005742:	f002 fe95 	bl	8008470 <memset>
  }
  if (epcp->out_state != NULL) {
 8005746:	69a0      	ldr	r0, [r4, #24]
 8005748:	b118      	cbz	r0, 8005752 <usbInitEndpointI+0x22>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 800574a:	2100      	movs	r1, #0
 800574c:	2214      	movs	r2, #20
 800574e:	f002 fe8f 	bl	8008470 <memset>
  }

  usbp->epc[ep] = epcp;
 8005752:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8005756:	60dc      	str	r4, [r3, #12]

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8005758:	4630      	mov	r0, r6
 800575a:	4629      	mov	r1, r5
}
 800575c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  usbp->epc[ep] = epcp;

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8005760:	f7ff bf6e 	b.w	8005640 <usb_lld_init_endpoint>
 8005764:	f3af 8000 	nop.w
 8005768:	f3af 8000 	nop.w
 800576c:	f3af 8000 	nop.w

08005770 <usb_event_cb.lto_priv.47>:
 */

/* Handles the USB driver global events
 * TODO: maybe disable some things when connection is lost? */
static void usb_event_cb(USBDriver *usbp, usbevent_t event) {
  switch(event) {
 8005770:	2902      	cmp	r1, #2
 8005772:	d009      	beq.n	8005788 <usb_event_cb.lto_priv.47+0x18>
 8005774:	2904      	cmp	r1, #4
 8005776:	d106      	bne.n	8005786 <usb_event_cb.lto_priv.47+0x16>
/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
void del_mods(uint8_t mods) { real_mods &= ~mods; }
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
 8005778:	490f      	ldr	r1, [pc, #60]	; (80057b8 <usb_event_cb.lto_priv.47+0x48>)
/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
 800577a:	4a10      	ldr	r2, [pc, #64]	; (80057bc <usb_event_cb.lto_priv.47+0x4c>)
/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
void del_mods(uint8_t mods) { real_mods &= ~mods; }
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
 800577c:	2300      	movs	r3, #0
 800577e:	700b      	strb	r3, [r1, #0]
/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
 8005780:	7013      	strb	r3, [r2, #0]
    // so only clear the variables in memory
    // the reports will be sent from main.c afterwards
    // or if the PC asks for GET_REPORT
    clear_mods();
    clear_weak_mods();
    clear_keys();
 8005782:	f001 bf2d 	b.w	80075e0 <clear_keys>
 8005786:	4770      	bx	lr
 * ---------------------------------------------------------
 */

/* Handles the USB driver global events
 * TODO: maybe disable some things when connection is lost? */
static void usb_event_cb(USBDriver *usbp, usbevent_t event) {
 8005788:	b510      	push	{r4, lr}
 800578a:	2320      	movs	r3, #32
 800578c:	4604      	mov	r4, r0
 800578e:	f383 8811 	msr	BASEPRI, r3
    return;

  case USB_EVENT_CONFIGURED:
    osalSysLockFromISR();
    /* Enable the endpoints specified into the configuration. */
    usbInitEndpointI(usbp, KBD_ENDPOINT, &kbd_ep_config);
 8005792:	2101      	movs	r1, #1
 8005794:	4a0a      	ldr	r2, [pc, #40]	; (80057c0 <usb_event_cb.lto_priv.47+0x50>)
 8005796:	f7ff ffcb 	bl	8005730 <usbInitEndpointI>
#ifdef MOUSE_ENABLE
    usbInitEndpointI(usbp, MOUSE_ENDPOINT, &mouse_ep_config);
#endif /* MOUSE_ENABLE */
#ifdef CONSOLE_ENABLE
    usbInitEndpointI(usbp, CONSOLE_ENDPOINT, &console_ep_config);
 800579a:	4620      	mov	r0, r4
 800579c:	2103      	movs	r1, #3
 800579e:	4a09      	ldr	r2, [pc, #36]	; (80057c4 <usb_event_cb.lto_priv.47+0x54>)
 80057a0:	f7ff ffc6 	bl	8005730 <usbInitEndpointI>
#endif /* CONSOLE_ENABLE */
#ifdef EXTRAKEY_ENABLE
    usbInitEndpointI(usbp, EXTRA_ENDPOINT, &extra_ep_config);
#endif /* EXTRAKEY_ENABLE */
#ifdef NKRO_ENABLE
    usbInitEndpointI(usbp, NKRO_ENDPOINT, &nkro_ep_config);
 80057a4:	4620      	mov	r0, r4
 80057a6:	2105      	movs	r1, #5
 80057a8:	4a07      	ldr	r2, [pc, #28]	; (80057c8 <usb_event_cb.lto_priv.47+0x58>)
 80057aa:	f7ff ffc1 	bl	8005730 <usbInitEndpointI>
 80057ae:	2300      	movs	r3, #0
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	bd10      	pop	{r4, pc}
 80057b6:	bf00      	nop
 80057b8:	20001519 	.word	0x20001519
 80057bc:	20001518 	.word	0x20001518
 80057c0:	080085e0 	.word	0x080085e0
 80057c4:	08008660 	.word	0x08008660
 80057c8:	080087c0 	.word	0x080087c0
 80057cc:	f3af 8000 	nop.w

080057d0 <usbStartTransmitI>:
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 80057d0:	2201      	movs	r2, #1
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {
 80057d2:	b430      	push	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 80057d4:	fa02 f301 	lsl.w	r3, r2, r1
 80057d8:	8904      	ldrh	r4, [r0, #8]
 80057da:	b29b      	uxth	r3, r3
 80057dc:	ea13 0504 	ands.w	r5, r3, r4
 80057e0:	d002      	beq.n	80057e8 <usbStartTransmitI+0x18>
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_in(usbp, ep);
  return false;
}
 80057e2:	bc30      	pop	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
    return true;
 80057e4:	4610      	mov	r0, r2
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_in(usbp, ep);
  return false;
}
 80057e6:	4770      	bx	lr
 80057e8:	0089      	lsls	r1, r1, #2
 80057ea:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80057ee:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 80057f2:	680a      	ldr	r2, [r1, #0]

  if (usbGetTransmitStatusI(usbp, ep)) {
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80057f4:	4323      	orrs	r3, r4
 80057f6:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80057fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057fe:	f082 0230 	eor.w	r2, r2, #48	; 0x30
 8005802:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005806:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800580a:	8103      	strh	r3, [r0, #8]
  usb_lld_start_in(usbp, ep);
  return false;
 800580c:	4628      	mov	r0, r5
}
 800580e:	bc30      	pop	{r4, r5}
 8005810:	600a      	str	r2, [r1, #0]
 8005812:	4770      	bx	lr
 8005814:	f3af 8000 	nop.w
 8005818:	f3af 8000 	nop.w
 800581c:	f3af 8000 	nop.w

08005820 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8005820:	4b0e      	ldr	r3, [pc, #56]	; (800585c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8005822:	490f      	ldr	r1, [pc, #60]	; (8005860 <chTMStopMeasurementX+0x40>)
 8005824:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8005826:	6883      	ldr	r3, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8005828:	6f09      	ldr	r1, [r1, #112]	; 0x70
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	1a5b      	subs	r3, r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800582e:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8005830:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8005832:	b430      	push	{r4, r5}
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8005834:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8005838:	18e4      	adds	r4, r4, r3
 800583a:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800583e:	3201      	adds	r2, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8005840:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8005842:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8005844:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8005846:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800584a:	d805      	bhi.n	8005858 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 800584c:	6802      	ldr	r2, [r0, #0]
 800584e:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8005850:	bf38      	it	cc
 8005852:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8005854:	bc30      	pop	{r4, r5}
 8005856:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8005858:	6043      	str	r3, [r0, #4]
 800585a:	e7fb      	b.n	8005854 <chTMStopMeasurementX+0x34>
 800585c:	e0001000 	.word	0xe0001000
 8005860:	20001270 	.word	0x20001270
 8005864:	f3af 8000 	nop.w
 8005868:	f3af 8000 	nop.w
 800586c:	f3af 8000 	nop.w

08005870 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8005870:	f7ff be7e 	b.w	8005570 <chSchDoRescheduleAhead>
 8005874:	f3af 8000 	nop.w
 8005878:	f3af 8000 	nop.w
 800587c:	f3af 8000 	nop.w

08005880 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8005880:	4b07      	ldr	r3, [pc, #28]	; (80058a0 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8005882:	b430      	push	{r4, r5}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8005884:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8005886:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 8005888:	6814      	ldr	r4, [r2, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800588a:	2501      	movs	r5, #1
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 800588c:	7708      	strb	r0, [r1, #28]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800588e:	6063      	str	r3, [r4, #4]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8005890:	7715      	strb	r5, [r2, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8005892:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 8005894:	4610      	mov	r0, r2
}
 8005896:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8005898:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800589a:	f7ff bcc1 	b.w	8005220 <_port_switch>
 800589e:	bf00      	nop
 80058a0:	20001270 	.word	0x20001270
 80058a4:	f3af 8000 	nop.w
 80058a8:	f3af 8000 	nop.w
 80058ac:	f3af 8000 	nop.w

080058b0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80058b0:	b410      	push	{r4}
 80058b2:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80058b4:	2200      	movs	r2, #0
 80058b6:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80058b8:	4b07      	ldr	r3, [pc, #28]	; (80058d8 <chSchReadyI+0x28>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80058ba:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80058bc:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	428a      	cmp	r2, r1
 80058c2:	d2fb      	bcs.n	80058bc <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80058c4:	685a      	ldr	r2, [r3, #4]
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 80058c6:	4620      	mov	r0, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80058c8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80058ca:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80058cc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80058ce:	605c      	str	r4, [r3, #4]

  return tp;
}
 80058d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	20001270 	.word	0x20001270
 80058dc:	f3af 8000 	nop.w

080058e0 <usb_packet_write_from_queue>:
 *                      not exceed the maximum packet size for this endpoint.
 *
 * @notapi
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
 80058e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80058e2:	6803      	ldr	r3, [r0, #0]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 80058e4:	ea5f 0c52 	movs.w	ip, r2, lsr #1
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80058e8:	f103 5e00 	add.w	lr, r3, #536870912	; 0x20000000
 80058ec:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000
 *                      not exceed the maximum packet size for this endpoint.
 *
 * @notapi
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
 80058f0:	460c      	mov	r4, r1
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80058f2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 80058f6:	6042      	str	r2, [r0, #4]
  nhw = n / 2;
  while (nhw > 0) {
 80058f8:	d018      	beq.n	800592c <usb_packet_write_from_queue+0x4c>
 80058fa:	4677      	mov	r7, lr
 80058fc:	4660      	mov	r0, ip
 80058fe:	690e      	ldr	r6, [r1, #16]
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8005900:	69a1      	ldr	r1, [r4, #24]
 8005902:	1c4b      	adds	r3, r1, #1
    if (oqp->q_rdptr >= oqp->q_top)
 8005904:	42b3      	cmp	r3, r6
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8005906:	61a3      	str	r3, [r4, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8005908:	bf28      	it	cs
 800590a:	68e3      	ldrcs	r3, [r4, #12]
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 800590c:	7809      	ldrb	r1, [r1, #0]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 800590e:	1c5d      	adds	r5, r3, #1
 8005910:	61a5      	str	r5, [r4, #24]
 8005912:	781b      	ldrb	r3, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top)
 8005914:	42b5      	cmp	r5, r6
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8005916:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 800591a:	bf24      	itt	cs
 800591c:	68e1      	ldrcs	r1, [r4, #12]
 800591e:	61a1      	strcs	r1, [r4, #24]
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8005920:	3801      	subs	r0, #1
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
 8005922:	f847 3b04 	str.w	r3, [r7], #4
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8005926:	d1eb      	bne.n	8005900 <usb_packet_write_from_queue+0x20>
 8005928:	eb0e 0e8c 	add.w	lr, lr, ip, lsl #2
    *pmap++ = w;
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 800592c:	07d3      	lsls	r3, r2, #31
 800592e:	d50b      	bpl.n	8005948 <usb_packet_write_from_queue+0x68>
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8005930:	69a1      	ldr	r1, [r4, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 8005932:	6920      	ldr	r0, [r4, #16]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8005934:	1c4b      	adds	r3, r1, #1
 8005936:	61a3      	str	r3, [r4, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 8005938:	4283      	cmp	r3, r0
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 800593a:	7809      	ldrb	r1, [r1, #0]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 800593c:	bf28      	it	cs
 800593e:	68e3      	ldrcs	r3, [r4, #12]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8005940:	f8ce 1000 	str.w	r1, [lr]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8005944:	bf28      	it	cs
 8005946:	61a3      	strcs	r3, [r4, #24]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005948:	f3ef 8611 	mrs	r6, BASEPRI
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 800594c:	bb56      	cbnz	r6, 80059a4 <usb_packet_write_from_queue+0xc4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800594e:	f3ef 8305 	mrs	r3, IPSR

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005952:	2320      	movs	r3, #32
 8005954:	f383 8811 	msr	BASEPRI, r3
  }

  /* Updating queue.*/
  sts = osalSysGetStatusAndLockX();

  oqp->q_counter += n;
 8005958:	68a1      	ldr	r1, [r4, #8]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	440a      	add	r2, r1
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  while (queue_notempty(tqp)) {
 800595e:	429c      	cmp	r4, r3
 8005960:	60a2      	str	r2, [r4, #8]
 8005962:	d00b      	beq.n	800597c <usb_packet_write_from_queue+0x9c>

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8005964:	2500      	movs	r5, #0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8005966:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 8005968:	4618      	mov	r0, r3
 800596a:	6022      	str	r2, [r4, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800596c:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800596e:	621d      	str	r5, [r3, #32]
  (void) chSchReadyI(tp);
 8005970:	f7ff ff9e 	bl	80058b0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	429c      	cmp	r4, r3
 8005978:	d1f5      	bne.n	8005966 <usb_packet_write_from_queue+0x86>
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
 800597a:	b946      	cbnz	r6, 800598e <usb_packet_write_from_queue+0xae>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800597c:	f3ef 8305 	mrs	r3, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8005980:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (port_is_isr_context()) {
 8005984:	b123      	cbz	r3, 8005990 <usb_packet_write_from_queue+0xb0>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005986:	2300      	movs	r3, #0
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800598e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8005990:	4b08      	ldr	r3, [pc, #32]	; (80059b4 <usb_packet_write_from_queue+0xd4>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 8005996:	6892      	ldr	r2, [r2, #8]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	429a      	cmp	r2, r3
 800599c:	d9f3      	bls.n	8005986 <usb_packet_write_from_queue+0xa6>
    chSchDoRescheduleAhead();
 800599e:	f7ff fde7 	bl	8005570 <chSchDoRescheduleAhead>
 80059a2:	e7f0      	b.n	8005986 <usb_packet_write_from_queue+0xa6>
 80059a4:	68a1      	ldr	r1, [r4, #8]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	440a      	add	r2, r1
 80059aa:	429c      	cmp	r4, r3
 80059ac:	60a2      	str	r2, [r4, #8]
 80059ae:	d1d9      	bne.n	8005964 <usb_packet_write_from_queue+0x84>
 80059b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20001270 	.word	0x20001270
 80059b8:	f3af 8000 	nop.w
 80059bc:	f3af 8000 	nop.w

080059c0 <usb_lld_prepare_transmit>:
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80059c0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80059c4:	68c3      	ldr	r3, [r0, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 80059c6:	b410      	push	{r4}
 80059c8:	460c      	mov	r4, r1
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80059ca:	6959      	ldr	r1, [r3, #20]

  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 80059cc:	8a1a      	ldrh	r2, [r3, #16]
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  /* Transfer initialization.*/
  n = isp->txsize;
 80059ce:	684b      	ldr	r3, [r1, #4]
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
 80059d0:	7808      	ldrb	r0, [r1, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	bf28      	it	cs
 80059d6:	461a      	movcs	r2, r3
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 80059d8:	68c9      	ldr	r1, [r1, #12]
 80059da:	4b0d      	ldr	r3, [pc, #52]	; (8005a10 <usb_lld_prepare_transmit+0x50>)
  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
 80059dc:	b958      	cbnz	r0, 80059f6 <usb_lld_prepare_transmit+0x36>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80059de:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80059e0:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 80059e4:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 80059e8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80059ec:	0040      	lsls	r0, r0, #1
                                 isp->mode.linear.txbuf, n);
}
 80059ee:	f85d 4b04 	ldr.w	r4, [sp], #4

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80059f2:	f7ff bc85 	b.w	8005300 <usb_packet_write_from_buffer>
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 80059f6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80059f8:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 80059fc:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8005a00:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005a04:	0040      	lsls	r0, r0, #1
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 8005a06:	f85d 4b04 	ldr.w	r4, [sp], #4
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8005a0a:	f7ff bf69 	b.w	80058e0 <usb_packet_write_from_queue>
 8005a0e:	bf00      	nop
 8005a10:	40005c00 	.word	0x40005c00
 8005a14:	f3af 8000 	nop.w
 8005a18:	f3af 8000 	nop.w
 8005a1c:	f3af 8000 	nop.w

08005a20 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 8005a20:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8005a24:	b538      	push	{r3, r4, r5, lr}
 8005a26:	2a06      	cmp	r2, #6
 8005a28:	d80a      	bhi.n	8005a40 <_usb_ep0out+0x20>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	4093      	lsls	r3, r2
 8005a2e:	f013 0f67 	tst.w	r3, #103	; 0x67
 8005a32:	4604      	mov	r4, r0
 8005a34:	d111      	bne.n	8005a5a <_usb_ep0out+0x3a>
 8005a36:	f013 0508 	ands.w	r5, r3, #8
 8005a3a:	d102      	bne.n	8005a42 <_usb_ep0out+0x22>
 8005a3c:	06db      	lsls	r3, r3, #27
 8005a3e:	d42e      	bmi.n	8005a9e <_usb_ep0out+0x7e>
 8005a40:	bd38      	pop	{r3, r4, r5, pc}
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0U) {
 8005a42:	68c3      	ldr	r3, [r0, #12]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1f9      	bne.n	8005a40 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 8005a4c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8005a4e:	b103      	cbz	r3, 8005a52 <_usb_ep0out+0x32>
      usbp->ep0endcb(usbp);
 8005a50:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8005a52:	2300      	movs	r3, #0
 8005a54:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8005a58:	bd38      	pop	{r3, r4, r5, pc}
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8005a5a:	4a1c      	ldr	r2, [pc, #112]	; (8005acc <_usb_ep0out+0xac>)
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8005a5c:	6841      	ldr	r1, [r0, #4]
 8005a5e:	6813      	ldr	r3, [r2, #0]
 8005a60:	680d      	ldr	r5, [r1, #0]
 8005a62:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8005a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a6a:	f083 0310 	eor.w	r3, r3, #16
 8005a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a76:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8005a78:	6813      	ldr	r3, [r2, #0]
 8005a7a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a82:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	b10d      	cbz	r5, 8005a96 <_usb_ep0out+0x76>
 8005a92:	2105      	movs	r1, #5
 8005a94:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8005a96:	2306      	movs	r3, #6
 8005a98:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8005a9c:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8005a9e:	68c3      	ldr	r3, [r0, #12]

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8005aa0:	2205      	movs	r2, #5
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8005aa2:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8005aa4:	4629      	mov	r1, r5

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8005aa6:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8005aaa:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 8005aac:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8005aae:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8005ab0:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8005ab2:	f7ff ff85 	bl	80059c0 <usb_lld_prepare_transmit>
 8005ab6:	2320      	movs	r3, #32
 8005ab8:	f383 8811 	msr	BASEPRI, r3
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareTransmit(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, 0);
 8005abc:	4620      	mov	r0, r4
 8005abe:	4629      	mov	r1, r5
 8005ac0:	f7ff fe86 	bl	80057d0 <usbStartTransmitI>
 8005ac4:	f385 8811 	msr	BASEPRI, r5
 8005ac8:	bd38      	pop	{r3, r4, r5, pc}
 8005aca:	bf00      	nop
 8005acc:	40005c00 	.word	0x40005c00

08005ad0 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8005ad0:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8005ad2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8005ad6:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8005ad8:	2b06      	cmp	r3, #6
 8005ada:	d826      	bhi.n	8005b2a <_usb_ep0in+0x5a>
 8005adc:	e8df f003 	tbb	[pc, r3]
 8005ae0:	042d4304 	.word	0x042d4304
 8005ae4:	2604      	.short	0x2604
 8005ae6:	04          	.byte	0x04
 8005ae7:	00          	.byte	0x00
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8005ae8:	4a32      	ldr	r2, [pc, #200]	; (8005bb4 <_usb_ep0in+0xe4>)
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8005aea:	6841      	ldr	r1, [r0, #4]
 8005aec:	6813      	ldr	r3, [r2, #0]
 8005aee:	680d      	ldr	r5, [r1, #0]
 8005af0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8005af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005af8:	f083 0310 	eor.w	r3, r3, #16
 8005afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b04:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8005b06:	6813      	ldr	r3, [r2, #0]
 8005b08:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1c:	6013      	str	r3, [r2, #0]
 8005b1e:	b10d      	cbz	r5, 8005b24 <_usb_ep0in+0x54>
 8005b20:	2105      	movs	r1, #5
 8005b22:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8005b24:	2306      	movs	r3, #6
 8005b26:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8005b2a:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 8005b2c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8005b2e:	b103      	cbz	r3, 8005b32 <_usb_ep0in+0x62>
      usbp->ep0endcb(usbp);
 8005b30:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8005b32:	2300      	movs	r3, #0
 8005b34:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8005b38:	bd38      	pop	{r3, r4, r5, pc}
 8005b3a:	68c3      	ldr	r3, [r0, #12]
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8005b3c:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = false;
 8005b3e:	2500      	movs	r5, #0
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 8005b40:	2203      	movs	r2, #3
 8005b42:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8005b46:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8005b48:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 8005b4a:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 8005b4c:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 8005b4e:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8005b50:	f001 fc26 	bl	80073a0 <usb_lld_prepare_receive.constprop.6>
 8005b54:	2320      	movs	r3, #32
 8005b56:	f383 8811 	msr	BASEPRI, r3
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareReceive(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    (void) usbStartReceiveI(usbp, 0);
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f001 fc00 	bl	8007360 <usbStartReceiveI.constprop.9>
 8005b60:	f385 8811 	msr	BASEPRI, r5
 8005b64:	bd38      	pop	{r3, r4, r5, pc}

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 8005b66:	f890 207b 	ldrb.w	r2, [r0, #123]	; 0x7b
 8005b6a:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8005b6e:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
 8005b70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8005b74:	428b      	cmp	r3, r1
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8005b76:	68c3      	ldr	r3, [r0, #12]
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8005b78:	d9e0      	bls.n	8005b3c <_usb_ep0in+0x6c>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8005b7a:	8a1d      	ldrh	r5, [r3, #16]
 8005b7c:	fbb1 f2f5 	udiv	r2, r1, r5
 8005b80:	fb05 1512 	mls	r5, r5, r2, r1
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8005b84:	2d00      	cmp	r5, #0
 8005b86:	d1d9      	bne.n	8005b3c <_usb_ep0in+0x6c>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8005b88:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8005b8a:	4629      	mov	r1, r5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8005b8c:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 8005b8e:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8005b90:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8005b92:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8005b94:	f7ff ff14 	bl	80059c0 <usb_lld_prepare_transmit>
 8005b98:	2320      	movs	r3, #32
 8005b9a:	f383 8811 	msr	BASEPRI, r3
       transmitted.*/
    if ((usbp->ep0n < max) &&
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	f7ff fe15 	bl	80057d0 <usbStartTransmitI>
 8005ba6:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 8005baa:	2302      	movs	r3, #2
 8005bac:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8005bb0:	bd38      	pop	{r3, r4, r5, pc}
 8005bb2:	bf00      	nop
 8005bb4:	40005c00 	.word	0x40005c00
 8005bb8:	f3af 8000 	nop.w
 8005bbc:	f3af 8000 	nop.w

08005bc0 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8005bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc2:	4604      	mov	r4, r0
  stm32_usb_pma_t *pmap;
  stm32_usb_descriptor_t *udp;
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
 8005bc4:	4bba      	ldr	r3, [pc, #744]	; (8005eb0 <_usb_ep0setup+0x2f0>)
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bca:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 8005bce:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005bd2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005bd6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005bda:	0049      	lsls	r1, r1, #1
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 8005bdc:	688b      	ldr	r3, [r1, #8]
  usbReadSetup(usbp, ep, usbp->setup);
 8005bde:	f100 0274 	add.w	r2, r0, #116	; 0x74
 8005be2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005be6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	f100 067c 	add.w	r6, r0, #124	; 0x7c
  for (n = 0; n < 4; n++) {
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8005bf0:	f853 1b04 	ldr.w	r1, [r3], #4
 8005bf4:	f822 1b02 	strh.w	r1, [r2], #2
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
  pmap = USB_ADDR2PTR(udp->RXADDR0);
  for (n = 0; n < 4; n++) {
 8005bf8:	42b2      	cmp	r2, r6
 8005bfa:	d1f9      	bne.n	8005bf0 <_usb_ep0setup+0x30>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 8005bfc:	6863      	ldr	r3, [r4, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	b36b      	cbz	r3, 8005c5e <_usb_ep0setup+0x9e>
      !(usbp->config->requests_hook_cb(usbp))) {
 8005c02:	4620      	mov	r0, r4
 8005c04:	4798      	blx	r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 8005c06:	b350      	cbz	r0, 8005c5e <_usb_ep0setup+0x9e>
 8005c08:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8005c0a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 8005c0e:	f894 107b 	ldrb.w	r1, [r4, #123]	; 0x7b
 8005c12:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 8005c16:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 8005c1a:	42aa      	cmp	r2, r5
    usbp->ep0n = max;
 8005c1c:	bf3c      	itt	cc
 8005c1e:	4615      	movcc	r5, r2
 8005c20:	66e2      	strcc	r2, [r4, #108]	; 0x6c
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8005c22:	f013 0f80 	tst.w	r3, #128	; 0x80
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8005c26:	68e3      	ldr	r3, [r4, #12]
  max = (size_t)get_hword(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8005c28:	f040 80b0 	bne.w	8005d8c <_usb_ep0setup+0x1cc>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 8005c2c:	2d00      	cmp	r5, #0
 8005c2e:	f040 8097 	bne.w	8005d60 <_usb_ep0setup+0x1a0>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8005c32:	695b      	ldr	r3, [r3, #20]
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 8005c34:	2205      	movs	r2, #5
 8005c36:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8005c3a:	4620      	mov	r0, r4
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8005c3c:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 8005c3e:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8005c40:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8005c42:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8005c44:	4629      	mov	r1, r5
 8005c46:	f7ff febb 	bl	80059c0 <usb_lld_prepare_transmit>
 8005c4a:	2320      	movs	r3, #32
 8005c4c:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 8005c50:	4620      	mov	r0, r4
 8005c52:	4629      	mov	r1, r5
 8005c54:	f7ff fdbc 	bl	80057d0 <usbStartTransmitI>
 8005c58:	f385 8811 	msr	BASEPRI, r5
 8005c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8005c5e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8005c62:	f013 0760 	ands.w	r7, r3, #96	; 0x60
 8005c66:	d022      	beq.n	8005cae <_usb_ep0setup+0xee>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8005c68:	4a91      	ldr	r2, [pc, #580]	; (8005eb0 <_usb_ep0setup+0x2f0>)
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
      usb_lld_stall_out(usbp, 0);
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8005c6a:	6861      	ldr	r1, [r4, #4]
 8005c6c:	6813      	ldr	r3, [r2, #0]
 8005c6e:	680d      	ldr	r5, [r1, #0]
 8005c70:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8005c74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c78:	f083 0310 	eor.w	r3, r3, #16
 8005c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c84:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8005c86:	6813      	ldr	r3, [r2, #0]
 8005c88:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c90:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	b115      	cbz	r5, 8005ca6 <_usb_ep0setup+0xe6>
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	2105      	movs	r1, #5
 8005ca4:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8005ca6:	2306      	movs	r3, #6
 8005ca8:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8005cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
 8005cae:	f894 5075 	ldrb.w	r5, [r4, #117]	; 0x75
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8005cb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8005cb6:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8005cba:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 8005cbe:	f000 8116 	beq.w	8005eee <_usb_ep0setup+0x32e>
 8005cc2:	d918      	bls.n	8005cf6 <_usb_ep0setup+0x136>
 8005cc4:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8005cc8:	f000 80f8 	beq.w	8005ebc <_usb_ep0setup+0x2fc>
 8005ccc:	f240 808b 	bls.w	8005de6 <_usb_ep0setup+0x226>
 8005cd0:	f5b5 6f10 	cmp.w	r5, #2304	; 0x900
 8005cd4:	f000 8095 	beq.w	8005e02 <_usb_ep0setup+0x242>
 8005cd8:	f640 4202 	movw	r2, #3074	; 0xc02
 8005cdc:	4295      	cmp	r5, r2
 8005cde:	f000 80df 	beq.w	8005ea0 <_usb_ep0setup+0x2e0>
 8005ce2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8005ce6:	d1bf      	bne.n	8005c68 <_usb_ep0setup+0xa8>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8005ce8:	f104 027f 	add.w	r2, r4, #127	; 0x7f
 8005cec:	2501      	movs	r5, #1
 8005cee:	6727      	str	r7, [r4, #112]	; 0x70
 8005cf0:	66a2      	str	r2, [r4, #104]	; 0x68
 8005cf2:	66e5      	str	r5, [r4, #108]	; 0x6c
 8005cf4:	e78b      	b.n	8005c0e <_usb_ep0setup+0x4e>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8005cf6:	2d02      	cmp	r5, #2
 8005cf8:	f000 8109 	beq.w	8005f0e <_usb_ep0setup+0x34e>
 8005cfc:	f240 80c6 	bls.w	8005e8c <_usb_ep0setup+0x2cc>
 8005d00:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8005d04:	f000 8090 	beq.w	8005e28 <_usb_ep0setup+0x268>
 8005d08:	f5b5 7f81 	cmp.w	r5, #258	; 0x102
 8005d0c:	d1ac      	bne.n	8005c68 <_usb_ep0setup+0xa8>
        return false;
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8005d0e:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8005d12:	2a00      	cmp	r2, #0
 8005d14:	d1a8      	bne.n	8005c68 <_usb_ep0setup+0xa8>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8005d16:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8005d1a:	f011 020f 	ands.w	r2, r1, #15
 8005d1e:	d01a      	beq.n	8005d56 <_usb_ep0setup+0x196>
 8005d20:	0092      	lsls	r2, r2, #2
 8005d22:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005d26:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8005d2a:	f011 0f80 	tst.w	r1, #128	; 0x80

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8005d2e:	6811      	ldr	r1, [r2, #0]
 8005d30:	f040 8111 	bne.w	8005f56 <_usb_ep0setup+0x396>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 8005d34:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
 8005d38:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8005d3c:	d00b      	beq.n	8005d56 <_usb_ep0setup+0x196>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 8005d3e:	6813      	ldr	r3, [r2, #0]
 8005d40:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8005d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d48:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8005d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8005d56:	2500      	movs	r5, #0
 8005d58:	66a5      	str	r5, [r4, #104]	; 0x68
 8005d5a:	66e5      	str	r5, [r4, #108]	; 0x6c
 8005d5c:	6725      	str	r5, [r4, #112]	; 0x70
 8005d5e:	e756      	b.n	8005c0e <_usb_ep0setup+0x4e>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8005d60:	699b      	ldr	r3, [r3, #24]
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 8005d62:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 8005d64:	2104      	movs	r1, #4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8005d66:	2600      	movs	r6, #0
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 8005d68:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8005d6c:	4620      	mov	r0, r4
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
 8005d6e:	60da      	str	r2, [r3, #12]
  osp->rxsize             = n;
 8005d70:	605d      	str	r5, [r3, #4]
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8005d72:	701e      	strb	r6, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8005d74:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8005d76:	f001 fb13 	bl	80073a0 <usb_lld_prepare_receive.constprop.6>
 8005d7a:	2320      	movs	r3, #32
 8005d7c:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      (void) usbStartReceiveI(usbp, 0);
 8005d80:	4620      	mov	r0, r4
 8005d82:	f001 faed 	bl	8007360 <usbStartReceiveI.constprop.9>
 8005d86:	f386 8811 	msr	BASEPRI, r6
 8005d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 8005d8c:	b1bd      	cbz	r5, 8005dbe <_usb_ep0setup+0x1fe>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8005d8e:	695b      	ldr	r3, [r3, #20]
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 8005d90:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8005d92:	2600      	movs	r6, #0
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 8005d94:	2101      	movs	r1, #1
 8005d96:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8005d9a:	4620      	mov	r0, r4
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
 8005d9c:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 8005d9e:	605d      	str	r5, [r3, #4]
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8005da0:	701e      	strb	r6, [r3, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;
 8005da2:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8005da4:	4631      	mov	r1, r6
 8005da6:	f7ff fe0b 	bl	80059c0 <usb_lld_prepare_transmit>
 8005daa:	2320      	movs	r3, #32
 8005dac:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 8005db0:	4620      	mov	r0, r4
 8005db2:	4631      	mov	r1, r6
 8005db4:	f7ff fd0c 	bl	80057d0 <usbStartTransmitI>
 8005db8:	f386 8811 	msr	BASEPRI, r6
 8005dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8005dbe:	699b      	ldr	r3, [r3, #24]
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 8005dc0:	2203      	movs	r2, #3
 8005dc2:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8005dc6:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8005dc8:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 8005dca:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 8005dcc:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 8005dce:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8005dd0:	f001 fae6 	bl	80073a0 <usb_lld_prepare_receive.constprop.6>
 8005dd4:	2320      	movs	r3, #32
 8005dd6:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareReceive(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartReceiveI(usbp, 0);
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f001 fac0 	bl	8007360 <usbStartReceiveI.constprop.9>
 8005de0:	f385 8811 	msr	BASEPRI, r5
 8005de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8005de6:	f240 3202 	movw	r2, #770	; 0x302
 8005dea:	4295      	cmp	r5, r2
 8005dec:	d02c      	beq.n	8005e48 <_usb_ep0setup+0x288>
 8005dee:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 8005df2:	f47f af39 	bne.w	8005c68 <_usb_ep0setup+0xa8>
        (usbp->setup[1] == USB_REQ_SET_ADDRESS)) {
      set_address(usbp);
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
#else
    usbSetupTransfer(usbp, NULL, 0, set_address);
 8005df6:	4a2f      	ldr	r2, [pc, #188]	; (8005eb4 <_usb_ep0setup+0x2f4>)
 8005df8:	66a7      	str	r7, [r4, #104]	; 0x68
 8005dfa:	66e7      	str	r7, [r4, #108]	; 0x6c
 8005dfc:	463d      	mov	r5, r7
 8005dfe:	6722      	str	r2, [r4, #112]	; 0x70
 8005e00:	e705      	b.n	8005c0e <_usb_ep0setup+0x4e>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 8005e02:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8005e06:	f884 207f 	strb.w	r2, [r4, #127]	; 0x7f
    if (usbp->configuration == 0U) {
 8005e0a:	2a00      	cmp	r2, #0
 8005e0c:	f040 8095 	bne.w	8005f3a <_usb_ep0setup+0x37a>
      usbp->state = USB_SELECTED;
 8005e10:	2203      	movs	r2, #3
 8005e12:	7022      	strb	r2, [r4, #0]
    }
    else {
      usbp->state = USB_ACTIVE;
    }
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8005e14:	6862      	ldr	r2, [r4, #4]
 8005e16:	6812      	ldr	r2, [r2, #0]
 8005e18:	2a00      	cmp	r2, #0
 8005e1a:	d09c      	beq.n	8005d56 <_usb_ep0setup+0x196>
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	2102      	movs	r1, #2
 8005e20:	4790      	blx	r2
 8005e22:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8005e26:	e796      	b.n	8005d56 <_usb_ep0setup+0x196>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8005e28:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8005e2c:	2a01      	cmp	r2, #1
 8005e2e:	f47f af1b 	bne.w	8005c68 <_usb_ep0setup+0xa8>
      usbp->status &= ~2U;
 8005e32:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8005e36:	66a7      	str	r7, [r4, #104]	; 0x68
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 8005e38:	f022 0202 	bic.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8005e3c:	66e7      	str	r7, [r4, #108]	; 0x6c
 8005e3e:	6727      	str	r7, [r4, #112]	; 0x70
 8005e40:	463d      	mov	r5, r7
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 8005e42:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 8005e46:	e6e2      	b.n	8005c0e <_usb_ep0setup+0x4e>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8005e48:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8005e4c:	2a00      	cmp	r2, #0
 8005e4e:	f47f af0b 	bne.w	8005c68 <_usb_ep0setup+0xa8>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8005e52:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8005e56:	f011 020f 	ands.w	r2, r1, #15
 8005e5a:	f43f af7c 	beq.w	8005d56 <_usb_ep0setup+0x196>
 8005e5e:	0093      	lsls	r3, r2, #2
 8005e60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e64:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8005e68:	0609      	lsls	r1, r1, #24
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	f100 8087 	bmi.w	8005f7e <_usb_ep0setup+0x3be>
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8005e70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e74:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005e78:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8005e7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8005e8a:	e764      	b.n	8005d56 <_usb_ep0setup+0x196>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8005e8c:	b92d      	cbnz	r5, 8005e9a <_usb_ep0setup+0x2da>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8005e8e:	2202      	movs	r2, #2
 8005e90:	6725      	str	r5, [r4, #112]	; 0x70
 8005e92:	66a6      	str	r6, [r4, #104]	; 0x68
 8005e94:	66e2      	str	r2, [r4, #108]	; 0x6c
 8005e96:	4615      	mov	r5, r2
 8005e98:	e6b9      	b.n	8005c0e <_usb_ep0setup+0x4e>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8005e9a:	2d01      	cmp	r5, #1
 8005e9c:	f47f aee4 	bne.w	8005c68 <_usb_ep0setup+0xa8>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8005ea0:	4905      	ldr	r1, [pc, #20]	; (8005eb8 <_usb_ep0setup+0x2f8>)
 8005ea2:	2502      	movs	r5, #2
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	66a1      	str	r1, [r4, #104]	; 0x68
 8005ea8:	66e5      	str	r5, [r4, #108]	; 0x6c
 8005eaa:	6722      	str	r2, [r4, #112]	; 0x70
 8005eac:	e6af      	b.n	8005c0e <_usb_ep0setup+0x4e>
 8005eae:	bf00      	nop
 8005eb0:	40005c00 	.word	0x40005c00
 8005eb4:	08005341 	.word	0x08005341
 8005eb8:	08008580 	.word	0x08008580
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8005ebc:	6861      	ldr	r1, [r4, #4]

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 8005ebe:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
 8005ec2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8005ec6:	684d      	ldr	r5, [r1, #4]
 8005ec8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 8005ed2:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8005ed6:	47a8      	blx	r5
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	f43f aec5 	beq.w	8005c68 <_usb_ep0setup+0xa8>
      return false;
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8005ede:	6843      	ldr	r3, [r0, #4]
 8005ee0:	6805      	ldr	r5, [r0, #0]
 8005ee2:	66a3      	str	r3, [r4, #104]	; 0x68
 8005ee4:	66e5      	str	r5, [r4, #108]	; 0x6c
 8005ee6:	6727      	str	r7, [r4, #112]	; 0x70
 8005ee8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8005eec:	e68f      	b.n	8005c0e <_usb_ep0setup+0x4e>
    }
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8005eee:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8005ef2:	2a01      	cmp	r2, #1
 8005ef4:	f47f aeb8 	bne.w	8005c68 <_usb_ep0setup+0xa8>
      usbp->status |= 2U;
 8005ef8:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8005efc:	66a7      	str	r7, [r4, #104]	; 0x68
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8005efe:	f042 0202 	orr.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8005f02:	66e7      	str	r7, [r4, #108]	; 0x6c
 8005f04:	6727      	str	r7, [r4, #112]	; 0x70
 8005f06:	463d      	mov	r5, r7
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8005f08:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 8005f0c:	e67f      	b.n	8005c0e <_usb_ep0setup+0x4e>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8005f0e:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8005f12:	4922      	ldr	r1, [pc, #136]	; (8005f9c <_usb_ep0setup+0x3dc>)
 8005f14:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005f18:	f002 020f 	and.w	r2, r2, #15
 8005f1c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005f20:	d10e      	bne.n	8005f40 <_usb_ep0setup+0x380>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 8005f22:	f412 5240 	ands.w	r2, r2, #12288	; 0x3000
 8005f26:	f43f ae9f 	beq.w	8005c68 <_usb_ep0setup+0xa8>
 8005f2a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005f2e:	d10d      	bne.n	8005f4c <_usb_ep0setup+0x38c>
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8005f30:	4a1b      	ldr	r2, [pc, #108]	; (8005fa0 <_usb_ep0setup+0x3e0>)
 8005f32:	66e5      	str	r5, [r4, #108]	; 0x6c
 8005f34:	6727      	str	r7, [r4, #112]	; 0x70
 8005f36:	66a2      	str	r2, [r4, #104]	; 0x68
 8005f38:	e669      	b.n	8005c0e <_usb_ep0setup+0x4e>
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0U) {
      usbp->state = USB_SELECTED;
    }
    else {
      usbp->state = USB_ACTIVE;
 8005f3a:	2204      	movs	r2, #4
 8005f3c:	7022      	strb	r2, [r4, #0]
 8005f3e:	e769      	b.n	8005e14 <_usb_ep0setup+0x254>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8005f40:	f012 0230 	ands.w	r2, r2, #48	; 0x30
 8005f44:	f43f ae90 	beq.w	8005c68 <_usb_ep0setup+0xa8>
 8005f48:	2a10      	cmp	r2, #16
 8005f4a:	d0f1      	beq.n	8005f30 <_usb_ep0setup+0x370>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        /*lint -restore*/
        return true;
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8005f4c:	4a15      	ldr	r2, [pc, #84]	; (8005fa4 <_usb_ep0setup+0x3e4>)
 8005f4e:	66e5      	str	r5, [r4, #108]	; 0x6c
 8005f50:	6727      	str	r7, [r4, #112]	; 0x70
 8005f52:	66a2      	str	r2, [r4, #104]	; 0x68
 8005f54:	e65b      	b.n	8005c0e <_usb_ep0setup+0x4e>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8005f56:	f001 0130 	and.w	r1, r1, #48	; 0x30
 8005f5a:	2930      	cmp	r1, #48	; 0x30
 8005f5c:	f43f aefb 	beq.w	8005d56 <_usb_ep0setup+0x196>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 8005f60:	6813      	ldr	r3, [r2, #0]
 8005f62:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8005f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f6a:	f083 0320 	eor.w	r3, r3, #32
 8005f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f76:	6013      	str	r3, [r2, #0]
 8005f78:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8005f7c:	e6eb      	b.n	8005d56 <_usb_ep0setup+0x196>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8005f7e:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8005f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f86:	f082 0210 	eor.w	r2, r2, #16
 8005f8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8005f98:	e6dd      	b.n	8005d56 <_usb_ep0setup+0x196>
 8005f9a:	bf00      	nop
 8005f9c:	40005c00 	.word	0x40005c00
 8005fa0:	08008790 	.word	0x08008790
 8005fa4:	08008630 	.word	0x08008630
 8005fa8:	f3af 8000 	nop.w
 8005fac:	f3af 8000 	nop.w

08005fb0 <usbPrepareTransmit>:
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
 8005fb0:	b430      	push	{r4, r5}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8005fb2:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 8005fb6:	68e4      	ldr	r4, [r4, #12]

  isp->txqueued           = false;
 8005fb8:	2500      	movs	r5, #0
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8005fba:	6964      	ldr	r4, [r4, #20]

  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
 8005fbc:	60e2      	str	r2, [r4, #12]
  isp->txsize             = n;
 8005fbe:	6063      	str	r3, [r4, #4]
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8005fc0:	7025      	strb	r5, [r4, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;
 8005fc2:	60a5      	str	r5, [r4, #8]

  usb_lld_prepare_transmit(usbp, ep);
}
 8005fc4:	bc30      	pop	{r4, r5}
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8005fc6:	f7ff bcfb 	b.w	80059c0 <usb_lld_prepare_transmit>
 8005fca:	bf00      	nop
 8005fcc:	f3af 8000 	nop.w

08005fd0 <Vector90>:
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8005fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  OSAL_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 8005fd4:	4bc1      	ldr	r3, [pc, #772]	; (80062dc <Vector90+0x30c>)
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8005fd6:	b083      	sub	sp, #12
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  OSAL_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 8005fd8:	6c5d      	ldr	r5, [r3, #68]	; 0x44

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
 8005fda:	056a      	lsls	r2, r5, #21
 8005fdc:	f100 8199 	bmi.w	8006312 <Vector90+0x342>

    _usb_reset(usbp);
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
 8005fe0:	052f      	lsls	r7, r5, #20
 8005fe2:	f100 817f 	bmi.w	80062e4 <Vector90+0x314>

    _usb_suspend(usbp);
  }

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
 8005fe6:	04ee      	lsls	r6, r5, #19
 8005fe8:	d508      	bpl.n	8005ffc <Vector90+0x2c>
    uint32_t fnr = STM32_USB->FNR;
 8005fea:	4bbc      	ldr	r3, [pc, #752]	; (80062dc <Vector90+0x30c>)
 8005fec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 8005fee:	0414      	lsls	r4, r2, #16
 8005ff0:	f140 8195 	bpl.w	800631e <Vector90+0x34e>
      /* Just noise, going back in SUSPEND mode, reference manual 22.4.5,
         table 169.*/
      STM32_USB->CNTR |= CNTR_LP_MODE;
    }
#endif
    STM32_USB->ISTR = ~ISTR_WKUP;
 8005ff4:	4bb9      	ldr	r3, [pc, #740]	; (80062dc <Vector90+0x30c>)
 8005ff6:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 8005ffa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* SOF handling.*/
  if (istr & ISTR_SOF) {
 8005ffc:	05a8      	lsls	r0, r5, #22
 8005ffe:	d50b      	bpl.n	8006018 <Vector90+0x48>
    _usb_isr_invoke_sof_cb(usbp);
 8006000:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 80062e0 <Vector90+0x310>
 8006004:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	b10b      	cbz	r3, 8006010 <Vector90+0x40>
 800600c:	4658      	mov	r0, fp
 800600e:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 8006010:	4bb2      	ldr	r3, [pc, #712]	; (80062dc <Vector90+0x30c>)
 8006012:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006016:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 8006018:	0429      	lsls	r1, r5, #16
 800601a:	f140 80c8 	bpl.w	80061ae <Vector90+0x1de>
 800601e:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 80062e0 <Vector90+0x310>
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
 8006022:	f005 050f 	and.w	r5, r5, #15
 8006026:	00ac      	lsls	r4, r5, #2
 8006028:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
 800602c:	f506 46b8 	add.w	r6, r6, #23552	; 0x5c00
 8006030:	f8d6 9000 	ldr.w	r9, [r6]
    const USBEndpointConfig *epcp = usbp->epc[ep];
 8006034:	1caf      	adds	r7, r5, #2
 8006036:	eb0b 0387 	add.w	r3, fp, r7, lsl #2

    if (epr & EPR_CTR_TX) {
 800603a:	f019 0f80 	tst.w	r9, #128	; 0x80
  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
    const USBEndpointConfig *epcp = usbp->epc[ep];
 800603e:	f8d3 8004 	ldr.w	r8, [r3, #4]

    if (epr & EPR_CTR_TX) {
 8006042:	d04a      	beq.n	80060da <Vector90+0x10a>
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 8006044:	6833      	ldr	r3, [r6, #0]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8006046:	00e8      	lsls	r0, r5, #3
    const USBEndpointConfig *epcp = usbp->epc[ep];

    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 8006048:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 800604c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006054:	6033      	str	r3, [r6, #0]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8006056:	4ba1      	ldr	r3, [pc, #644]	; (80062dc <Vector90+0x30c>)
      epcp->in_state->txcnt  += transmitted;
 8006058:	f8d8 e014 	ldr.w	lr, [r8, #20]
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 800605c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
      epcp->in_state->txcnt  += transmitted;
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
 800605e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8006062:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006066:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 800606a:	4403      	add	r3, r0
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	f8d3 c004 	ldr.w	ip, [r3, #4]
      epcp->in_state->txcnt  += transmitted;
 8006072:	f8de 3008 	ldr.w	r3, [lr, #8]
 8006076:	4463      	add	r3, ip
 8006078:	f8ce 3008 	str.w	r3, [lr, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
      if (n > 0) {
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	f000 80bb 	beq.w	80061f8 <Vector90+0x228>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
 8006082:	f8b8 2010 	ldrh.w	r2, [r8, #16]
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
 8006086:	f89e 1000 	ldrb.w	r1, [lr]
 800608a:	429a      	cmp	r2, r3
 800608c:	bf28      	it	cs
 800608e:	461a      	movcs	r2, r3
 8006090:	2900      	cmp	r1, #0
 8006092:	f000 80a1 	beq.w	80061d8 <Vector90+0x208>
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8006096:	4b91      	ldr	r3, [pc, #580]	; (80062dc <Vector90+0x30c>)
 8006098:	f8de 100c 	ldr.w	r1, [lr, #12]
 800609c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800609e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80060a2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80060a6:	4418      	add	r0, r3
 80060a8:	0040      	lsls	r0, r0, #1
 80060aa:	f7ff fc19 	bl	80058e0 <usb_packet_write_from_queue>
 80060ae:	2320      	movs	r3, #32
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80060b8:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 80060bc:	6823      	ldr	r3, [r4, #0]
 80060be:	2200      	movs	r2, #0
 80060c0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80060c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060c8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80060cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d4:	6023      	str	r3, [r4, #0]
 80060d6:	f382 8811 	msr	BASEPRI, r2
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
 80060da:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 80060de:	d061      	beq.n	80061a4 <Vector90+0x1d4>
      EPR_CLEAR_CTR_RX(ep);
 80060e0:	6833      	ldr	r3, [r6, #0]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 80060e2:	f419 6f00 	tst.w	r9, #2048	; 0x800
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
      EPR_CLEAR_CTR_RX(ep);
 80060e6:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 80060ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f2:	6033      	str	r3, [r6, #0]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 80060f4:	f040 808e 	bne.w	8006214 <Vector90+0x244>
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80060f8:	4b78      	ldr	r3, [pc, #480]	; (80062dc <Vector90+0x30c>)
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 80060fa:	f8d8 c018 	ldr.w	ip, [r8, #24]
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80060fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 8006100:	f89c 1000 	ldrb.w	r1, [ip]
 8006104:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006108:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800610c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006110:	005b      	lsls	r3, r3, #1
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8006112:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8006116:	f3ce 0909 	ubfx	r9, lr, #0, #10

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 800611a:	2900      	cmp	r1, #0
 800611c:	f040 8082 	bne.w	8006224 <Vector90+0x254>
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap;
  uint32_t w;
  size_t i;

  pmap = USB_ADDR2PTR(udp->RXADDR0);
 8006120:	6898      	ldr	r0, [r3, #8]
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
                                   epcp->out_state->mode.queue.rxqueue,
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
 8006122:	f8dc 400c 	ldr.w	r4, [ip, #12]
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap;
  uint32_t w;
  size_t i;

  pmap = USB_ADDR2PTR(udp->RXADDR0);
 8006126:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800612a:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800612e:	0040      	lsls	r0, r0, #1

  i = 0;
  w = 0; /* Useless but silences a warning.*/
  while (i < n) {
 8006130:	f1b9 0f00 	cmp.w	r9, #0
 8006134:	d011      	beq.n	800615a <Vector90+0x18a>
 8006136:	4623      	mov	r3, r4
 8006138:	eb04 0e09 	add.w	lr, r4, r9
 800613c:	1b1a      	subs	r2, r3, r4
    if ((i & 1) == 0){
 800613e:	07d2      	lsls	r2, r2, #31
      w = *pmap;
 8006140:	bf55      	itete	pl
 8006142:	f850 1b04 	ldrpl.w	r1, [r0], #4
      *buf = (uint8_t)w;
      pmap++;
    }
    else {
      *buf = (uint8_t)(w >> 8);
 8006146:	0a0a      	lsrmi	r2, r1, #8
  i = 0;
  w = 0; /* Useless but silences a warning.*/
  while (i < n) {
    if ((i & 1) == 0){
      w = *pmap;
      *buf = (uint8_t)w;
 8006148:	7019      	strbpl	r1, [r3, #0]
      pmap++;
    }
    else {
      *buf = (uint8_t)(w >> 8);
 800614a:	701a      	strbmi	r2, [r3, #0]
    }
    i++;
    buf++;
 800614c:	3301      	adds	r3, #1

  pmap = USB_ADDR2PTR(udp->RXADDR0);

  i = 0;
  w = 0; /* Useless but silences a warning.*/
  while (i < n) {
 800614e:	4573      	cmp	r3, lr
 8006150:	d1f4      	bne.n	800613c <Vector90+0x16c>
 8006152:	f8d8 c018 	ldr.w	ip, [r8, #24]
 8006156:	f8dc 400c 	ldr.w	r4, [ip, #12]
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
 800615a:	444c      	add	r4, r9
 800615c:	f8cc 400c 	str.w	r4, [ip, #12]
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 8006160:	f8bc 1010 	ldrh.w	r1, [ip, #16]

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8006164:	f8b8 0012 	ldrh.w	r0, [r8, #18]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8006168:	f8dc 2008 	ldr.w	r2, [ip, #8]
        epcp->out_state->rxsize             -= n;
 800616c:	f8dc 3004 	ldr.w	r3, [ip, #4]
        epcp->out_state->rxpkts             -= 1;
 8006170:	3901      	subs	r1, #1
 8006172:	b289      	uxth	r1, r1
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8006174:	444a      	add	r2, r9
        epcp->out_state->rxsize             -= n;
 8006176:	ebc9 0303 	rsb	r3, r9, r3
        epcp->out_state->rxpkts             -= 1;

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 800617a:	4581      	cmp	r9, r0
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 800617c:	f8ac 1010 	strh.w	r1, [ip, #16]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8006180:	f8cc 2008 	str.w	r2, [ip, #8]
        epcp->out_state->rxsize             -= n;
 8006184:	f8cc 3004 	str.w	r3, [ip, #4]
        epcp->out_state->rxpkts             -= 1;

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8006188:	d316      	bcc.n	80061b8 <Vector90+0x1e8>
 800618a:	b1a9      	cbz	r1, 80061b8 <Vector90+0x1e8>
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
        }
        else {
          /* Transfer not complete, there are more packets to receive.*/
          EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 800618c:	6833      	ldr	r3, [r6, #0]
 800618e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006196:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800619a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800619e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a2:	6033      	str	r3, [r6, #0]
        }
      }
    }
    istr = STM32_USB->ISTR;
 80061a4:	4b4d      	ldr	r3, [pc, #308]	; (80062dc <Vector90+0x30c>)
 80061a6:	6c5d      	ldr	r5, [r3, #68]	; 0x44
    _usb_isr_invoke_sof_cb(usbp);
    STM32_USB->ISTR = ~ISTR_SOF;
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 80061a8:	042b      	lsls	r3, r5, #16
 80061aa:	f53f af3a 	bmi.w	8006022 <Vector90+0x52>
    }
    istr = STM32_USB->ISTR;
  }

  OSAL_IRQ_EPILOGUE();
}
 80061ae:	b003      	add	sp, #12
 80061b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      }
    }
    istr = STM32_USB->ISTR;
  }

  OSAL_IRQ_EPILOGUE();
 80061b4:	f7ff b8dc 	b.w	8005370 <_port_irq_epilogue>

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
 80061b8:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 80061bc:	eb0b 0787 	add.w	r7, fp, r7, lsl #2
 80061c0:	2101      	movs	r1, #1
 80061c2:	40a9      	lsls	r1, r5
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	ea23 0301 	bic.w	r3, r3, r1
 80061ca:	68d2      	ldr	r2, [r2, #12]
 80061cc:	f8ab 300a 	strh.w	r3, [fp, #10]
 80061d0:	4629      	mov	r1, r5
 80061d2:	4843      	ldr	r0, [pc, #268]	; (80062e0 <Vector90+0x310>)
 80061d4:	4790      	blx	r2
 80061d6:	e7e5      	b.n	80061a4 <Vector90+0x1d4>
        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
 80061d8:	f8de 100c 	ldr.w	r1, [lr, #12]
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80061dc:	4b3f      	ldr	r3, [pc, #252]	; (80062dc <Vector90+0x30c>)
        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
 80061de:	4461      	add	r1, ip
 80061e0:	f8ce 100c 	str.w	r1, [lr, #12]
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80061e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80061ea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80061ee:	4418      	add	r0, r3
 80061f0:	0040      	lsls	r0, r0, #1
 80061f2:	f7ff f885 	bl	8005300 <usb_packet_write_from_buffer>
 80061f6:	e75a      	b.n	80060ae <Vector90+0xde>
        usb_lld_start_in(usbp, ep);
        osalSysUnlockFromISR();
      }
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
 80061f8:	4b39      	ldr	r3, [pc, #228]	; (80062e0 <Vector90+0x310>)
 80061fa:	2201      	movs	r2, #1
 80061fc:	891b      	ldrh	r3, [r3, #8]
 80061fe:	40aa      	lsls	r2, r5
 8006200:	ea23 0302 	bic.w	r3, r3, r2
 8006204:	4a36      	ldr	r2, [pc, #216]	; (80062e0 <Vector90+0x310>)
 8006206:	4629      	mov	r1, r5
 8006208:	8113      	strh	r3, [r2, #8]
 800620a:	4610      	mov	r0, r2
 800620c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006210:	4798      	blx	r3
 8006212:	e762      	b.n	80060da <Vector90+0x10a>
      EPR_CLEAR_CTR_RX(ep);
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
 8006214:	eb0b 0787 	add.w	r7, fp, r7, lsl #2
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4629      	mov	r1, r5
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	4830      	ldr	r0, [pc, #192]	; (80062e0 <Vector90+0x310>)
 8006220:	4798      	blx	r3
 8006222:	e7bf      	b.n	80061a4 <Vector90+0x1d4>
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8006224:	689b      	ldr	r3, [r3, #8]

  nhw = n / 2;
  while (nhw > 0) {
 8006226:	ea5f 0259 	movs.w	r2, r9, lsr #1
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 800622a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800622e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006232:	ea4f 0343 	mov.w	r3, r3, lsl #1
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
 8006236:	f8dc 400c 	ldr.w	r4, [ip, #12]
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 800623a:	9300      	str	r3, [sp, #0]

  nhw = n / 2;
  while (nhw > 0) {
 800623c:	9201      	str	r2, [sp, #4]
 800623e:	d021      	beq.n	8006284 <Vector90+0x2b4>
 8006240:	4611      	mov	r1, r2
 8006242:	4618      	mov	r0, r3
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8006244:	6963      	ldr	r3, [r4, #20]

  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
 8006246:	f850 2b04 	ldr.w	r2, [r0], #4
    *iqp->q_wrptr++ = (uint8_t)w;
 800624a:	f103 0a01 	add.w	sl, r3, #1
 800624e:	f8c4 a014 	str.w	sl, [r4, #20]
 8006252:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top)
 8006254:	6923      	ldr	r3, [r4, #16]
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8006256:	ea4f 2c12 	mov.w	ip, r2, lsr #8
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
 800625a:	6962      	ldr	r2, [r4, #20]
 800625c:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 800625e:	bf28      	it	cs
 8006260:	68e2      	ldrcs	r2, [r4, #12]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8006262:	1c53      	adds	r3, r2, #1
 8006264:	6163      	str	r3, [r4, #20]
 8006266:	f882 c000 	strb.w	ip, [r2]
    if (iqp->q_wrptr >= iqp->q_top)
 800626a:	6923      	ldr	r3, [r4, #16]
 800626c:	6962      	ldr	r2, [r4, #20]
 800626e:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 8006270:	bf24      	itt	cs
 8006272:	68e3      	ldrcs	r3, [r4, #12]
 8006274:	6163      	strcs	r3, [r4, #20]
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  nhw = n / 2;
  while (nhw > 0) {
 8006276:	3901      	subs	r1, #1
 8006278:	d1e4      	bne.n	8006244 <Vector90+0x274>
 800627a:	9b00      	ldr	r3, [sp, #0]
 800627c:	9a01      	ldr	r2, [sp, #4]
 800627e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006282:	9300      	str	r3, [sp, #0]
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    nhw--;
  }
  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 8006284:	f01e 0f01 	tst.w	lr, #1
 8006288:	d00b      	beq.n	80062a2 <Vector90+0x2d2>
    *iqp->q_wrptr++ = (uint8_t)*pmap;
 800628a:	9a00      	ldr	r2, [sp, #0]
 800628c:	6963      	ldr	r3, [r4, #20]
 800628e:	6812      	ldr	r2, [r2, #0]
 8006290:	1c59      	adds	r1, r3, #1
 8006292:	6161      	str	r1, [r4, #20]
 8006294:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top)
 8006296:	6923      	ldr	r3, [r4, #16]
 8006298:	6962      	ldr	r2, [r4, #20]
 800629a:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 800629c:	bf24      	itt	cs
 800629e:	68e3      	ldrcs	r3, [r4, #12]
 80062a0:	6163      	strcs	r3, [r4, #20]
 80062a2:	2320      	movs	r3, #32
 80062a4:	f383 8811 	msr	BASEPRI, r3
  }

  /* Updating queue.*/
  osalSysLockFromISR();

  iqp->q_counter += n;
 80062a8:	68a2      	ldr	r2, [r4, #8]
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	444a      	add	r2, r9
 80062ae:	42a3      	cmp	r3, r4
 80062b0:	60a2      	str	r2, [r4, #8]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80062b2:	bf18      	it	ne
 80062b4:	f04f 0a00 	movne.w	sl, #0
 80062b8:	d00a      	beq.n	80062d0 <Vector90+0x300>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80062ba:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 80062bc:	4618      	mov	r0, r3
 80062be:	6022      	str	r2, [r4, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80062c0:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80062c2:	f8c3 a020 	str.w	sl, [r3, #32]
  (void) chSchReadyI(tp);
 80062c6:	f7ff faf3 	bl	80058b0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	42a3      	cmp	r3, r4
 80062ce:	d1f4      	bne.n	80062ba <Vector90+0x2ea>
 80062d0:	2300      	movs	r3, #0
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f8d8 c018 	ldr.w	ip, [r8, #24]
 80062da:	e741      	b.n	8006160 <Vector90+0x190>
 80062dc:	40005c00 	.word	0x40005c00
 80062e0:	20001478 	.word	0x20001478
 * @notapi
 */
void _usb_suspend(USBDriver *usbp) {

  /* State transition.*/
  usbp->state         = USB_SUSPENDED;
 80062e4:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006348 <Vector90+0x378>
    _usb_reset(usbp);
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 80062e8:	4b16      	ldr	r3, [pc, #88]	; (8006344 <Vector90+0x374>)

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80062ea:	f8db 1004 	ldr.w	r1, [fp, #4]
 80062ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062f0:	680c      	ldr	r4, [r1, #0]
 80062f2:	f042 0208 	orr.w	r2, r2, #8
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 80062f6:	f46f 6000 	mvn.w	r0, #2048	; 0x800
 * @notapi
 */
void _usb_suspend(USBDriver *usbp) {

  /* State transition.*/
  usbp->state         = USB_SUSPENDED;
 80062fa:	2105      	movs	r1, #5
    _usb_reset(usbp);
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 80062fc:	641a      	str	r2, [r3, #64]	; 0x40
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 80062fe:	6458      	str	r0, [r3, #68]	; 0x44
 8006300:	f88b 1000 	strb.w	r1, [fp]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8006304:	2c00      	cmp	r4, #0
 8006306:	f43f ae6e 	beq.w	8005fe6 <Vector90+0x16>
 800630a:	4658      	mov	r0, fp
 800630c:	2103      	movs	r1, #3
 800630e:	47a0      	blx	r4
 8006310:	e669      	b.n	8005fe6 <Vector90+0x16>

  istr = STM32_USB->ISTR;

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
    STM32_USB->ISTR = ~ISTR_RESET;
 8006312:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006316:	645a      	str	r2, [r3, #68]	; 0x44

    _usb_reset(usbp);
 8006318:	f000 ffda 	bl	80072d0 <_usb_reset.constprop.15>
 800631c:	e660      	b.n	8005fe0 <Vector90+0x10>
 * @notapi
 */
void _usb_wakeup(USBDriver *usbp) {

  /* State transition.*/
  usbp->state         = USB_ACTIVE;
 800631e:	f8df b028 	ldr.w	fp, [pc, #40]	; 8006348 <Vector90+0x378>

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8006322:	6c1a      	ldr	r2, [r3, #64]	; 0x40

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8006324:	f8db 1004 	ldr.w	r1, [fp, #4]
 8006328:	f022 0208 	bic.w	r2, r2, #8
 800632c:	680c      	ldr	r4, [r1, #0]
 * @notapi
 */
void _usb_wakeup(USBDriver *usbp) {

  /* State transition.*/
  usbp->state         = USB_ACTIVE;
 800632e:	2104      	movs	r1, #4
 8006330:	641a      	str	r2, [r3, #64]	; 0x40
 8006332:	f88b 1000 	strb.w	r1, [fp]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8006336:	2c00      	cmp	r4, #0
 8006338:	f43f ae5c 	beq.w	8005ff4 <Vector90+0x24>
 800633c:	4658      	mov	r0, fp
 800633e:	47a0      	blx	r4
 8006340:	e658      	b.n	8005ff4 <Vector90+0x24>
 8006342:	bf00      	nop
 8006344:	40005c00 	.word	0x40005c00
 8006348:	20001478 	.word	0x20001478
 800634c:	f3af 8000 	nop.w

08006350 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8006350:	b538      	push	{r3, r4, r5, lr}
 8006352:	2220      	movs	r2, #32
 8006354:	4603      	mov	r3, r0
 8006356:	f382 8811 	msr	BASEPRI, r2
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 800635a:	4a0e      	ldr	r2, [pc, #56]	; (8006394 <chThdExit+0x44>)
 800635c:	6994      	ldr	r4, [r2, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800635e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8006360:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8006364:	42a8      	cmp	r0, r5
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 8006366:	6223      	str	r3, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8006368:	d006      	beq.n	8006378 <chThdExit+0x28>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 800636a:	6803      	ldr	r3, [r0, #0]
 800636c:	6263      	str	r3, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 800636e:	f7ff fa9f 	bl	80058b0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8006372:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8006374:	42a8      	cmp	r0, r5
 8006376:	d1f8      	bne.n	800636a <chThdExit+0x1a>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8006378:	7f63      	ldrb	r3, [r4, #29]
 800637a:	079b      	lsls	r3, r3, #30
 800637c:	d104      	bne.n	8006388 <chThdExit+0x38>
    REG_REMOVE(tp);
 800637e:	6922      	ldr	r2, [r4, #16]
 8006380:	6963      	ldr	r3, [r4, #20]
 8006382:	611a      	str	r2, [r3, #16]
 8006384:	6922      	ldr	r2, [r4, #16]
 8006386:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8006388:	200f      	movs	r0, #15
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
  /* The thread never returns here.*/
}
 800638a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 800638e:	f7ff ba77 	b.w	8005880 <chSchGoSleepS>
 8006392:	bf00      	nop
 8006394:	20001270 	.word	0x20001270
 8006398:	f3af 8000 	nop.w
 800639c:	f3af 8000 	nop.w

080063a0 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 80063a0:	4b1c      	ldr	r3, [pc, #112]	; (8006414 <chVTDoResetI+0x74>)
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 80063a2:	b470      	push	{r4, r5, r6}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 80063a4:	69da      	ldr	r2, [r3, #28]
 80063a6:	4282      	cmp	r2, r0
 80063a8:	d00f      	beq.n	80063ca <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 80063aa:	6802      	ldr	r2, [r0, #0]
 80063ac:	6841      	ldr	r1, [r0, #4]
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 80063ae:	331c      	adds	r3, #28

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 80063b0:	600a      	str	r2, [r1, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 80063b2:	6802      	ldr	r2, [r0, #0]
    vtp->vt_func = NULL;
 80063b4:	2400      	movs	r4, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 80063b6:	429a      	cmp	r2, r3
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 80063b8:	6051      	str	r1, [r2, #4]
    vtp->vt_func = NULL;
 80063ba:	60c4      	str	r4, [r0, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 80063bc:	d003      	beq.n	80063c6 <chVTDoResetI+0x26>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 80063be:	8901      	ldrh	r1, [r0, #8]
 80063c0:	8913      	ldrh	r3, [r2, #8]
 80063c2:	440b      	add	r3, r1
 80063c4:	8113      	strh	r3, [r2, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80063c6:	bc70      	pop	{r4, r5, r6}
 80063c8:	4770      	bx	lr

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 80063ca:	4619      	mov	r1, r3
 80063cc:	6815      	ldr	r5, [r2, #0]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 80063ce:	2000      	movs	r0, #0

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 80063d0:	f841 5f1c 	str.w	r5, [r1, #28]!
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80063d4:	428d      	cmp	r5, r1
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80063d6:	6069      	str	r1, [r5, #4]
  vtp->vt_func = NULL;
 80063d8:	60d0      	str	r0, [r2, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80063da:	d016      	beq.n	800640a <chVTDoResetI+0x6a>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80063dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80063e0:	6a41      	ldr	r1, [r0, #36]	; 0x24

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 80063e2:	8916      	ldrh	r6, [r2, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 80063e4:	8cdc      	ldrh	r4, [r3, #38]	; 0x26

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 80063e6:	892a      	ldrh	r2, [r5, #8]
 80063e8:	b289      	uxth	r1, r1
 80063ea:	18b3      	adds	r3, r6, r2
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 80063ec:	1b0a      	subs	r2, r1, r4

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 80063ee:	b29b      	uxth	r3, r3
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 80063f0:	b292      	uxth	r2, r2

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 80063f2:	4293      	cmp	r3, r2

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 80063f4:	812b      	strh	r3, [r5, #8]
  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 80063f6:	d9e6      	bls.n	80063c6 <chVTDoResetI+0x26>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 80063f8:	1a9b      	subs	r3, r3, r2
 80063fa:	b29b      	uxth	r3, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 80063fc:	2b01      	cmp	r3, #1
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 80063fe:	bf98      	it	ls
 8006400:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8006402:	440b      	add	r3, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8006404:	b29b      	uxth	r3, r3
 8006406:	6343      	str	r3, [r0, #52]	; 0x34
 8006408:	e7dd      	b.n	80063c6 <chVTDoResetI+0x26>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 800640a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800640e:	60d8      	str	r0, [r3, #12]
 8006410:	e7d9      	b.n	80063c6 <chVTDoResetI+0x26>
 8006412:	bf00      	nop
 8006414:	20001270 	.word	0x20001270
 8006418:	f3af 8000 	nop.w
 800641c:	f3af 8000 	nop.w

08006420 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8006420:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8006422:	4e1e      	ldr	r6, [pc, #120]	; (800649c <chVTDoSetI+0x7c>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8006424:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8006428:	46b6      	mov	lr, r6
 800642a:	f85e 4f1c 	ldr.w	r4, [lr, #28]!
 800642e:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8006430:	2901      	cmp	r1, #1
 8006432:	bf98      	it	ls
 8006434:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8006436:	4574      	cmp	r4, lr
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8006438:	6103      	str	r3, [r0, #16]
  vtp->vt_func = vtfunc;
 800643a:	60c2      	str	r2, [r0, #12]
 800643c:	b2ab      	uxth	r3, r5
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800643e:	d01d      	beq.n	800647c <chVTDoSetI+0x5c>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8006440:	4419      	add	r1, r3
 8006442:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8006444:	b289      	uxth	r1, r1
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8006446:	8922      	ldrh	r2, [r4, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8006448:	1acb      	subs	r3, r1, r3
 800644a:	b29b      	uxth	r3, r3
    if (delta < ch.vtlist.vt_next->vt_delta) {
 800644c:	4293      	cmp	r3, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800644e:	bf38      	it	cc
 8006450:	6379      	strcc	r1, [r7, #52]	; 0x34
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8006452:	4293      	cmp	r3, r2
 8006454:	d905      	bls.n	8006462 <chVTDoSetI+0x42>
    delta -= p->vt_delta;
    p = p->vt_next;
 8006456:	6824      	ldr	r4, [r4, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8006458:	1a9b      	subs	r3, r3, r2
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800645a:	8922      	ldrh	r2, [r4, #8]
    delta -= p->vt_delta;
 800645c:	b29b      	uxth	r3, r3
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800645e:	429a      	cmp	r2, r3
 8006460:	d3f9      	bcc.n	8006456 <chVTDoSetI+0x36>
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
 8006462:	f64f 71ff 	movw	r1, #65535	; 0xffff
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8006466:	6862      	ldr	r2, [r4, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8006468:	6004      	str	r4, [r0, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800646a:	6042      	str	r2, [r0, #4]
  vtp->vt_prev->vt_next = vtp;
 800646c:	6010      	str	r0, [r2, #0]
  p->vt_prev = vtp;
 800646e:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 8006470:	8103      	strh	r3, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8006472:	8922      	ldrh	r2, [r4, #8]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	8123      	strh	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8006478:	84b1      	strh	r1, [r6, #36]	; 0x24
 800647a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 800647c:	18ca      	adds	r2, r1, r3
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800647e:	b292      	uxth	r2, r2
  STM32_ST_TIM->SR     = 0;
 8006480:	f04f 0e00 	mov.w	lr, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8006484:	2502      	movs	r5, #2
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 8006486:	84f3      	strh	r3, [r6, #38]	; 0x26
      ch.vtlist.vt_next = vtp;
 8006488:	61f0      	str	r0, [r6, #28]
      ch.vtlist.vt_prev = vtp;
 800648a:	6230      	str	r0, [r6, #32]
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 800648c:	6004      	str	r4, [r0, #0]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800648e:	6044      	str	r4, [r0, #4]
      vtp->vt_delta = delay;
 8006490:	8101      	strh	r1, [r0, #8]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8006492:	637a      	str	r2, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8006494:	f8c7 e010 	str.w	lr, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8006498:	60fd      	str	r5, [r7, #12]
 800649a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800649c:	20001270 	.word	0x20001270

080064a0 <usb_request_hook_cb.lto_priv.49>:
 * Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 * Other Device    Required    Optional    Optional    Optional    Optional    Optional
 */

/* Callback for SETUP request on the endpoint 0 (control) */
static bool usb_request_hook_cb(USBDriver *usbp) {
 80064a0:	b538      	push	{r3, r4, r5, lr}
   *  2,3: (LSB,MSB) wValue
   *  4,5: (LSB,MSB) wIndex
   *  6,7: (LSB,MSB) wLength (number of bytes to transfer if there is a data phase) */

  /* Handle HID class specific requests */
  if(((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) &&
 80064a2:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 * Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 * Other Device    Required    Optional    Optional    Optional    Optional    Optional
 */

/* Callback for SETUP request on the endpoint 0 (control) */
static bool usb_request_hook_cb(USBDriver *usbp) {
 80064a6:	4604      	mov	r4, r0
   *  2,3: (LSB,MSB) wValue
   *  4,5: (LSB,MSB) wIndex
   *  6,7: (LSB,MSB) wLength (number of bytes to transfer if there is a data phase) */

  /* Handle HID class specific requests */
  if(((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) &&
 80064a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064ac:	2a21      	cmp	r2, #33	; 0x21
 80064ae:	d007      	beq.n	80064c0 <usb_request_hook_cb.lto_priv.49+0x20>
      break;
    }
  }

  /* Handle the Get_Descriptor Request for HID class (not handled by the default hook) */
  if((usbp->setup[0] == 0x81) && (usbp->setup[1] == USB_REQ_GET_DESCRIPTOR)) {
 80064b0:	f240 6381 	movw	r3, #1665	; 0x681
 80064b4:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d032      	beq.n	8006522 <usb_request_hook_cb.lto_priv.49+0x82>
      return FALSE;
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    return TRUE;
  }

  return FALSE;
 80064bc:	2000      	movs	r0, #0
 80064be:	bd38      	pop	{r3, r4, r5, pc}
   *  6,7: (LSB,MSB) wLength (number of bytes to transfer if there is a data phase) */

  /* Handle HID class specific requests */
  if(((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) &&
     ((usbp->setup[0] & USB_RTYPE_RECIPIENT_MASK) == USB_RTYPE_RECIPIENT_INTERFACE)) {
    switch(usbp->setup[0] & USB_RTYPE_DIR_MASK) {
 80064c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80064c8:	b1bb      	cbz	r3, 80064fa <usb_request_hook_cb.lto_priv.49+0x5a>
 80064ca:	2a00      	cmp	r2, #0
 80064cc:	d0f0      	beq.n	80064b0 <usb_request_hook_cb.lto_priv.49+0x10>
    case USB_RTYPE_DIR_DEV2HOST:
      switch(usbp->setup[1]) {   /* bRequest */
 80064ce:	f890 0075 	ldrb.w	r0, [r0, #117]	; 0x75
 80064d2:	2802      	cmp	r0, #2
 80064d4:	d05e      	beq.n	8006594 <usb_request_hook_cb.lto_priv.49+0xf4>
 80064d6:	2803      	cmp	r0, #3
 80064d8:	d052      	beq.n	8006580 <usb_request_hook_cb.lto_priv.49+0xe0>
 80064da:	2801      	cmp	r0, #1
 80064dc:	d1e8      	bne.n	80064b0 <usb_request_hook_cb.lto_priv.49+0x10>
      case HID_GET_REPORT:
        switch(usbp->setup[4]) {     /* LSB(wIndex) (check MSB==0?) */
 80064de:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	f000 8084 	beq.w	80065f0 <usb_request_hook_cb.lto_priv.49+0x150>
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d07e      	beq.n	80065ea <usb_request_hook_cb.lto_priv.49+0x14a>
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d07c      	beq.n	80065ea <usb_request_hook_cb.lto_priv.49+0x14a>
          }
          break;
#endif /* EXTRAKEY_ENABLE */

        default:
          usbSetupTransfer(usbp, NULL, 0, NULL);
 80064f0:	2300      	movs	r3, #0
 80064f2:	66a3      	str	r3, [r4, #104]	; 0x68
 80064f4:	66e3      	str	r3, [r4, #108]	; 0x6c
 80064f6:	6723      	str	r3, [r4, #112]	; 0x70
 80064f8:	bd38      	pop	{r3, r4, r5, pc}
        break;
      }
      break;

    case USB_RTYPE_DIR_HOST2DEV:
      switch(usbp->setup[1]) {   /* bRequest */
 80064fa:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
 80064fe:	2b0a      	cmp	r3, #10
 8006500:	d04a      	beq.n	8006598 <usb_request_hook_cb.lto_priv.49+0xf8>
 8006502:	2b0b      	cmp	r3, #11
 8006504:	d025      	beq.n	8006552 <usb_request_hook_cb.lto_priv.49+0xb2>
 8006506:	2b09      	cmp	r3, #9
 8006508:	d1d2      	bne.n	80064b0 <usb_request_hook_cb.lto_priv.49+0x10>
      case HID_SET_REPORT:
        switch(usbp->setup[4]) {       /* LSB(wIndex) (check MSB==0 and wLength==1?) */
 800650a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800650e:	b10b      	cbz	r3, 8006514 <usb_request_hook_cb.lto_priv.49+0x74>
 8006510:	2b04      	cmp	r3, #4
 8006512:	d1cd      	bne.n	80064b0 <usb_request_hook_cb.lto_priv.49+0x10>
#ifdef NKRO_ENABLE
        case NKRO_INTERFACE:
#endif  /* NKRO_ENABLE */
        /* keyboard_led_stats = <read byte from next OUT report>
         * keyboard_led_stats needs be word (or dword), otherwise we get an exception on F0 */
          usbSetupTransfer(usbp, (uint8_t *)&keyboard_led_stats, 1, NULL);
 8006514:	4a3c      	ldr	r2, [pc, #240]	; (8006608 <usb_request_hook_cb.lto_priv.49+0x168>)
 8006516:	2001      	movs	r0, #1
 8006518:	2300      	movs	r3, #0
 800651a:	66a2      	str	r2, [r4, #104]	; 0x68
 800651c:	66e0      	str	r0, [r4, #108]	; 0x6c
 800651e:	6723      	str	r3, [r4, #112]	; 0x70
 8006520:	bd38      	pop	{r3, r4, r5, pc}
    }
  }

  /* Handle the Get_Descriptor Request for HID class (not handled by the default hook) */
  if((usbp->setup[0] == 0x81) && (usbp->setup[1] == USB_REQ_GET_DESCRIPTOR)) {
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3], usbp->setup[2], get_hword(&usbp->setup[4]));
 8006522:	6861      	ldr	r1, [r4, #4]
 * need it here for HID descriptor */
static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 8006524:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
 8006528:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    }
  }

  /* Handle the Get_Descriptor Request for HID class (not handled by the default hook) */
  if((usbp->setup[0] == 0x81) && (usbp->setup[1] == USB_REQ_GET_DESCRIPTOR)) {
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3], usbp->setup[2], get_hword(&usbp->setup[4]));
 800652c:	684d      	ldr	r5, [r1, #4]
 800652e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006532:	4620      	mov	r0, r4
 8006534:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 8006538:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 800653c:	47a8      	blx	r5
    if(dp == NULL)
 800653e:	2800      	cmp	r0, #0
 8006540:	d0bc      	beq.n	80064bc <usb_request_hook_cb.lto_priv.49+0x1c>
      return FALSE;
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8006542:	6841      	ldr	r1, [r0, #4]
 8006544:	6802      	ldr	r2, [r0, #0]
 8006546:	2300      	movs	r3, #0
 8006548:	66a1      	str	r1, [r4, #104]	; 0x68
 800654a:	66e2      	str	r2, [r4, #108]	; 0x6c
 800654c:	6723      	str	r3, [r4, #112]	; 0x70
    return TRUE;
 800654e:	2001      	movs	r0, #1
  }

  return FALSE;
}
 8006550:	bd38      	pop	{r3, r4, r5, pc}
          break;
        }
        break;

      case HID_SET_PROTOCOL:
        if((usbp->setup[4] == KBD_INTERFACE) && (usbp->setup[5] == 0)) {   /* wIndex */
 8006552:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
 8006556:	b96b      	cbnz	r3, 8006574 <usb_request_hook_cb.lto_priv.49+0xd4>
          keyboard_protocol = ((usbp->setup[2]) != 0x00);   /* LSB(wValue) */
 8006558:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
 800655c:	492b      	ldr	r1, [pc, #172]	; (800660c <usb_request_hook_cb.lto_priv.49+0x16c>)
 800655e:	3300      	adds	r3, #0
#ifdef NKRO_ENABLE
          keyboard_nkro = !!keyboard_protocol;
 8006560:	4a2b      	ldr	r2, [pc, #172]	; (8006610 <usb_request_hook_cb.lto_priv.49+0x170>)
        }
        break;

      case HID_SET_PROTOCOL:
        if((usbp->setup[4] == KBD_INTERFACE) && (usbp->setup[5] == 0)) {   /* wIndex */
          keyboard_protocol = ((usbp->setup[2]) != 0x00);   /* LSB(wValue) */
 8006562:	bf18      	it	ne
 8006564:	2301      	movne	r3, #1
 8006566:	700b      	strb	r3, [r1, #0]
#ifdef NKRO_ENABLE
          keyboard_nkro = !!keyboard_protocol;
 8006568:	7013      	strb	r3, [r2, #0]
          if(!keyboard_nkro && keyboard_idle) {
 800656a:	b91b      	cbnz	r3, 8006574 <usb_request_hook_cb.lto_priv.49+0xd4>
 800656c:	4b29      	ldr	r3, [pc, #164]	; (8006614 <usb_request_hook_cb.lto_priv.49+0x174>)
 800656e:	781a      	ldrb	r2, [r3, #0]
 8006570:	2a00      	cmp	r2, #0
 8006572:	d144      	bne.n	80065fe <usb_request_hook_cb.lto_priv.49+0x15e>
            osalSysLockFromISR();
            chVTSetI(&keyboard_idle_timer, 4*MS2ST(keyboard_idle), keyboard_idle_timer_cb, (void *)usbp);
            osalSysUnlockFromISR();
          }
        }
        usbSetupTransfer(usbp, NULL, 0, NULL);
 8006574:	2300      	movs	r3, #0
 8006576:	66a3      	str	r3, [r4, #104]	; 0x68
 8006578:	66e3      	str	r3, [r4, #108]	; 0x6c
 800657a:	6723      	str	r3, [r4, #112]	; 0x70
        return TRUE;
 800657c:	2001      	movs	r0, #1
 800657e:	bd38      	pop	{r3, r4, r5, pc}
          break;
        }
        break;

      case HID_GET_PROTOCOL:
        if((usbp->setup[4] == KBD_INTERFACE) && (usbp->setup[5] == 0)) {   /* wIndex */
 8006580:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
 8006584:	2b00      	cmp	r3, #0
 8006586:	d193      	bne.n	80064b0 <usb_request_hook_cb.lto_priv.49+0x10>
          usbSetupTransfer(usbp, &keyboard_protocol, 1, NULL);
 8006588:	4a20      	ldr	r2, [pc, #128]	; (800660c <usb_request_hook_cb.lto_priv.49+0x16c>)
 800658a:	2001      	movs	r0, #1
 800658c:	6723      	str	r3, [r4, #112]	; 0x70
 800658e:	66a2      	str	r2, [r4, #104]	; 0x68
 8006590:	66e0      	str	r0, [r4, #108]	; 0x6c
 8006592:	bd38      	pop	{r3, r4, r5, pc}
          return TRUE;
        }
        break;

      case HID_GET_IDLE:
        usbSetupTransfer(usbp, &keyboard_idle, 1, NULL);
 8006594:	4a1f      	ldr	r2, [pc, #124]	; (8006614 <usb_request_hook_cb.lto_priv.49+0x174>)
 8006596:	e7be      	b.n	8006516 <usb_request_hook_cb.lto_priv.49+0x76>

      case HID_SET_IDLE:
        keyboard_idle = usbp->setup[3];     /* MSB(wValue) */
        /* arm the timer */
#ifdef NKRO_ENABLE
        if(!keyboard_nkro && keyboard_idle) {
 8006598:	4a1d      	ldr	r2, [pc, #116]	; (8006610 <usb_request_hook_cb.lto_priv.49+0x170>)
        usbSetupTransfer(usbp, NULL, 0, NULL);
        return TRUE;
        break;

      case HID_SET_IDLE:
        keyboard_idle = usbp->setup[3];     /* MSB(wValue) */
 800659a:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
        /* arm the timer */
#ifdef NKRO_ENABLE
        if(!keyboard_nkro && keyboard_idle) {
 800659e:	7811      	ldrb	r1, [r2, #0]
        usbSetupTransfer(usbp, NULL, 0, NULL);
        return TRUE;
        break;

      case HID_SET_IDLE:
        keyboard_idle = usbp->setup[3];     /* MSB(wValue) */
 80065a0:	4a1c      	ldr	r2, [pc, #112]	; (8006614 <usb_request_hook_cb.lto_priv.49+0x174>)
 80065a2:	7013      	strb	r3, [r2, #0]
        /* arm the timer */
#ifdef NKRO_ENABLE
        if(!keyboard_nkro && keyboard_idle) {
 80065a4:	2900      	cmp	r1, #0
 80065a6:	d1e5      	bne.n	8006574 <usb_request_hook_cb.lto_priv.49+0xd4>
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d0e3      	beq.n	8006574 <usb_request_hook_cb.lto_priv.49+0xd4>
 80065ac:	2320      	movs	r3, #32
 80065ae:	f383 8811 	msr	BASEPRI, r3
#else /* NKRO_ENABLE */
        if(keyboard_idle) {
#endif /* NKRO_ENABLE */
          osalSysLockFromISR();
          chVTSetI(&keyboard_idle_timer, 4*MS2ST(keyboard_idle), keyboard_idle_timer_cb, (void *)usbp);
 80065b2:	7812      	ldrb	r2, [r2, #0]
#else /* NKRO_ENABLE */
          if(keyboard_idle) {
#endif /* NKRO_ENABLE */
          /* arm the idle timer if boot protocol & idle */
            osalSysLockFromISR();
            chVTSetI(&keyboard_idle_timer, 4*MS2ST(keyboard_idle), keyboard_idle_timer_cb, (void *)usbp);
 80065b4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80065b8:	fb03 f302 	mul.w	r3, r3, r2
 80065bc:	4d16      	ldr	r5, [pc, #88]	; (8006618 <usb_request_hook_cb.lto_priv.49+0x178>)
 80065be:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80065c2:	fba5 3503 	umull	r3, r5, r5, r3
 80065c6:	4815      	ldr	r0, [pc, #84]	; (800661c <usb_request_hook_cb.lto_priv.49+0x17c>)
 80065c8:	09ad      	lsrs	r5, r5, #6
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80065ca:	68c3      	ldr	r3, [r0, #12]
 80065cc:	00ad      	lsls	r5, r5, #2
 80065ce:	b2ad      	uxth	r5, r5
 80065d0:	b10b      	cbz	r3, 80065d6 <usb_request_hook_cb.lto_priv.49+0x136>
    chVTDoResetI(vtp);
 80065d2:	f7ff fee5 	bl	80063a0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 80065d6:	4623      	mov	r3, r4
 80065d8:	4629      	mov	r1, r5
 80065da:	4810      	ldr	r0, [pc, #64]	; (800661c <usb_request_hook_cb.lto_priv.49+0x17c>)
 80065dc:	4a10      	ldr	r2, [pc, #64]	; (8006620 <usb_request_hook_cb.lto_priv.49+0x180>)
 80065de:	f7ff ff1f 	bl	8006420 <chVTDoSetI>
 80065e2:	2300      	movs	r3, #0
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	e7c4      	b.n	8006574 <usb_request_hook_cb.lto_priv.49+0xd4>
        switch(usbp->setup[4]) {     /* LSB(wIndex) (check MSB==0?) */
        case KBD_INTERFACE:
#ifdef NKRO_ENABLE
        case NKRO_INTERFACE:
#endif /* NKRO_ENABLE */
          usbSetupTransfer(usbp, (uint8_t *)&keyboard_report_sent, sizeof(keyboard_report_sent), NULL);
 80065ea:	490e      	ldr	r1, [pc, #56]	; (8006624 <usb_request_hook_cb.lto_priv.49+0x184>)
 80065ec:	2210      	movs	r2, #16
 80065ee:	e7aa      	b.n	8006546 <usb_request_hook_cb.lto_priv.49+0xa6>
          break;
#endif /* MOUSE_ENABLE */

#ifdef CONSOLE_ENABLE
        case CONSOLE_INTERFACE:
          usbSetupTransfer(usbp, console_queue_buffer, CONSOLE_EPSIZE, NULL);
 80065f0:	490d      	ldr	r1, [pc, #52]	; (8006628 <usb_request_hook_cb.lto_priv.49+0x188>)
 80065f2:	2210      	movs	r2, #16
 80065f4:	2300      	movs	r3, #0
 80065f6:	66a1      	str	r1, [r4, #104]	; 0x68
 80065f8:	66e2      	str	r2, [r4, #108]	; 0x6c
 80065fa:	6723      	str	r3, [r4, #112]	; 0x70
 80065fc:	bd38      	pop	{r3, r4, r5, pc}
 80065fe:	2220      	movs	r2, #32
 8006600:	f382 8811 	msr	BASEPRI, r2
#else /* NKRO_ENABLE */
          if(keyboard_idle) {
#endif /* NKRO_ENABLE */
          /* arm the idle timer if boot protocol & idle */
            osalSysLockFromISR();
            chVTSetI(&keyboard_idle_timer, 4*MS2ST(keyboard_idle), keyboard_idle_timer_cb, (void *)usbp);
 8006604:	781a      	ldrb	r2, [r3, #0]
 8006606:	e7d5      	b.n	80065b4 <usb_request_hook_cb.lto_priv.49+0x114>
 8006608:	200013c0 	.word	0x200013c0
 800660c:	20001230 	.word	0x20001230
 8006610:	20001232 	.word	0x20001232
 8006614:	20001448 	.word	0x20001448
 8006618:	10624dd3 	.word	0x10624dd3
 800661c:	200013fc 	.word	0x200013fc
 8006620:	08006851 	.word	0x08006851
 8006624:	200013c4 	.word	0x200013c4
 8006628:	20001450 	.word	0x20001450
 800662c:	f3af 8000 	nop.w

08006630 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8006630:	b500      	push	{lr}
 8006632:	2320      	movs	r3, #32
 8006634:	b087      	sub	sp, #28
 8006636:	f383 8811 	msr	BASEPRI, r3
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800663a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800663e:	4298      	cmp	r0, r3
 8006640:	d014      	beq.n	800666c <chThdSleep+0x3c>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8006642:	4b0f      	ldr	r3, [pc, #60]	; (8006680 <chThdSleep+0x50>)
 8006644:	4601      	mov	r1, r0
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	a801      	add	r0, sp, #4
 800664a:	4a0e      	ldr	r2, [pc, #56]	; (8006684 <chThdSleep+0x54>)
 800664c:	f7ff fee8 	bl	8006420 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8006650:	2008      	movs	r0, #8
 8006652:	f7ff f915 	bl	8005880 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8006656:	9b04      	ldr	r3, [sp, #16]
 8006658:	b113      	cbz	r3, 8006660 <chThdSleep+0x30>
      chVTDoResetI(&vt);
 800665a:	a801      	add	r0, sp, #4
 800665c:	f7ff fea0 	bl	80063a0 <chVTDoResetI>
 8006660:	2300      	movs	r3, #0
 8006662:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chThdSleepS(time);
  chSysUnlock();
}
 8006666:	b007      	add	sp, #28
 8006668:	f85d fb04 	ldr.w	pc, [sp], #4
    }
  }
  else {
    chSchGoSleepS(newstate);
 800666c:	2008      	movs	r0, #8
 800666e:	f7ff f907 	bl	8005880 <chSchGoSleepS>
 8006672:	2300      	movs	r3, #0
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	b007      	add	sp, #28
 800667a:	f85d fb04 	ldr.w	pc, [sp], #4
 800667e:	bf00      	nop
 8006680:	20001270 	.word	0x20001270
 8006684:	080054e1 	.word	0x080054e1
 8006688:	f3af 8000 	nop.w
 800668c:	f3af 8000 	nop.w

08006690 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8006690:	e7fe      	b.n	8006690 <__default_exit>
 8006692:	bf00      	nop
 8006694:	f3af 8000 	nop.w
 8006698:	f3af 8000 	nop.w
 800669c:	f3af 8000 	nop.w

080066a0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	f3af 8000 	nop.w
 80066a8:	f3af 8000 	nop.w
 80066ac:	f3af 8000 	nop.w

080066b0 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	f3af 8000 	nop.w
 80066b8:	f3af 8000 	nop.w
 80066bc:	f3af 8000 	nop.w

080066c0 <send_consumer>:

#else /* EXTRAKEY_ENABLE */
void send_system(uint16_t data) {
  (void)data;
}
void send_consumer(uint16_t data) {
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	f3af 8000 	nop.w
 80066c8:	f3af 8000 	nop.w
 80066cc:	f3af 8000 	nop.w

080066d0 <send_system>:
void send_consumer(uint16_t data) {
  send_extra_report(REPORT_ID_CONSUMER, data);
}

#else /* EXTRAKEY_ENABLE */
void send_system(uint16_t data) {
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	f3af 8000 	nop.w
 80066d8:	f3af 8000 	nop.w
 80066dc:	f3af 8000 	nop.w

080066e0 <send_mouse>:
  usbStartTransmitI(&USB_DRIVER, MOUSE_ENDPOINT);
  osalSysUnlock();
}

#else /* MOUSE_ENABLE */
void send_mouse(report_mouse_t *report) {
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	f3af 8000 	nop.w
 80066e8:	f3af 8000 	nop.w
 80066ec:	f3af 8000 	nop.w

080066f0 <keyboard_leds>:
  osalSysUnlockFromISR();
}

/* LED status */
uint8_t keyboard_leds(void) {
  return (uint8_t)(keyboard_led_stats & 0xFF);
 80066f0:	4b01      	ldr	r3, [pc, #4]	; (80066f8 <keyboard_leds+0x8>)
}
 80066f2:	7818      	ldrb	r0, [r3, #0]
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	200013c0 	.word	0x200013c0
 80066fc:	f3af 8000 	nop.w

08006700 <nkro_in_cb>:
  (void)ep;
}

#ifdef NKRO_ENABLE
/* nkro IN callback hander (a nkro report has made it IN) */
void nkro_in_cb(USBDriver *usbp, usbep_t ep) {
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	f3af 8000 	nop.w
 8006708:	f3af 8000 	nop.w
 800670c:	f3af 8000 	nop.w

08006710 <kbd_in_cb>:
 *                  Keyboard functions
 * ---------------------------------------------------------
 */

/* keyboard IN callback hander (a kbd report has made it IN) */
void kbd_in_cb(USBDriver *usbp, usbep_t ep) {
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	f3af 8000 	nop.w
 8006718:	f3af 8000 	nop.w
 800671c:	f3af 8000 	nop.w

08006720 <sendchar_pf>:
 8006720:	2320      	movs	r3, #32
 8006722:	f383 8811 	msr	BASEPRI, r3
}


int8_t sendchar(uint8_t c) {
  osalSysLock();
  if(usbGetDriverStateI(&USB_DRIVER) != USB_ACTIVE) {
 8006726:	4a20      	ldr	r2, [pc, #128]	; (80067a8 <sendchar_pf+0x88>)
 8006728:	7812      	ldrb	r2, [r2, #0]
 800672a:	2a04      	cmp	r2, #4
 800672c:	d003      	beq.n	8006736 <sendchar_pf+0x16>
 800672e:	2300      	movs	r3, #0
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	4770      	bx	lr
  (void)c;
  return 0;
}
#endif /* CONSOLE_ENABLE */

void sendchar_pf(void *p, char c) {
 8006736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800673a:	2200      	movs	r2, #0
 800673c:	4688      	mov	r8, r1
 800673e:	f382 8811 	msr	BASEPRI, r2
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	4f19      	ldr	r7, [pc, #100]	; (80067ac <sendchar_pf+0x8c>)

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8006748:	4e19      	ldr	r6, [pc, #100]	; (80067b0 <sendchar_pf+0x90>)
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800674a:	463c      	mov	r4, r7
 800674c:	e00b      	b.n	8006766 <sendchar_pf+0x46>
 800674e:	69b3      	ldr	r3, [r6, #24]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8006750:	6862      	ldr	r2, [r4, #4]
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8006752:	601c      	str	r4, [r3, #0]
  tp->p_prev = tqp->p_prev;
 8006754:	605a      	str	r2, [r3, #4]
  tp->p_prev->p_next = tp;
 8006756:	6013      	str	r3, [r2, #0]
  tqp->p_prev = tp;
 8006758:	6063      	str	r3, [r4, #4]
 800675a:	f7ff f891 	bl	8005880 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 800675e:	69b3      	ldr	r3, [r6, #24]
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < Q_OK) {
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	2b00      	cmp	r3, #0
 8006764:	db1b      	blt.n	800679e <sendchar_pf+0x7e>
 8006766:	68bd      	ldr	r5, [r7, #8]
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8006768:	2004      	movs	r0, #4
 800676a:	4b10      	ldr	r3, [pc, #64]	; (80067ac <sendchar_pf+0x8c>)
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 800676c:	2d00      	cmp	r5, #0
 800676e:	d0ee      	beq.n	800674e <sendchar_pf+0x2e>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8006770:	6959      	ldr	r1, [r3, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8006772:	689a      	ldr	r2, [r3, #8]
  *oqp->q_wrptr++ = b;
 8006774:	1c48      	adds	r0, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8006776:	3a01      	subs	r2, #1
  *oqp->q_wrptr++ = b;
 8006778:	6158      	str	r0, [r3, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800677a:	609a      	str	r2, [r3, #8]
  *oqp->q_wrptr++ = b;
 800677c:	f881 8000 	strb.w	r8, [r1]
  if (oqp->q_wrptr >= oqp->q_top) {
 8006780:	691a      	ldr	r2, [r3, #16]
 8006782:	6959      	ldr	r1, [r3, #20]
 8006784:	4291      	cmp	r1, r2
    oqp->q_wrptr = oqp->q_buffer;
 8006786:	bf24      	itt	cs
 8006788:	68da      	ldrcs	r2, [r3, #12]
 800678a:	615a      	strcs	r2, [r3, #20]
  }

  if (oqp->q_notify != NULL) {
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	b10b      	cbz	r3, 8006794 <sendchar_pf+0x74>
    oqp->q_notify(oqp);
 8006790:	4806      	ldr	r0, [pc, #24]	; (80067ac <sendchar_pf+0x8c>)
 8006792:	4798      	blx	r3
 8006794:	2300      	movs	r3, #0
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800679e:	f385 8811 	msr	BASEPRI, r5
 80067a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067a6:	bf00      	nop
 80067a8:	20001478 	.word	0x20001478
 80067ac:	200013d4 	.word	0x200013d4
 80067b0:	20001270 	.word	0x20001270
 80067b4:	f3af 8000 	nop.w
 80067b8:	f3af 8000 	nop.w
 80067bc:	f3af 8000 	nop.w

080067c0 <send_keyboard>:
  return (uint8_t)(keyboard_led_stats & 0xFF);
}

/* prepare and start sending a report IN
 * not callable from ISR or locked state */
void send_keyboard(report_keyboard_t *report) {
 80067c0:	b538      	push	{r3, r4, r5, lr}
 80067c2:	2420      	movs	r4, #32
 80067c4:	f384 8811 	msr	BASEPRI, r4
  osalSysLock();
  if(usbGetDriverStateI(&USB_DRIVER) != USB_ACTIVE) {
 80067c8:	4b1b      	ldr	r3, [pc, #108]	; (8006838 <send_keyboard+0x78>)
 80067ca:	781a      	ldrb	r2, [r3, #0]
 80067cc:	2a04      	cmp	r2, #4
 80067ce:	d003      	beq.n	80067d8 <send_keyboard+0x18>
 80067d0:	2300      	movs	r3, #0
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	bd38      	pop	{r3, r4, r5, pc}
 80067d8:	4605      	mov	r5, r0
 80067da:	2200      	movs	r2, #0
 80067dc:	f382 8811 	msr	BASEPRI, r2
  }
  osalSysUnlock();

  bool ep_not_ready;
#ifdef NKRO_ENABLE
  if(keyboard_nkro) {  /* NKRO protocol */
 80067e0:	4a16      	ldr	r2, [pc, #88]	; (800683c <send_keyboard+0x7c>)
    usbPrepareTransmit(&USB_DRIVER, NKRO_ENDPOINT, (uint8_t *)report, sizeof(report_keyboard_t));
 80067e2:	4618      	mov	r0, r3
  }
  osalSysUnlock();

  bool ep_not_ready;
#ifdef NKRO_ENABLE
  if(keyboard_nkro) {  /* NKRO protocol */
 80067e4:	7812      	ldrb	r2, [r2, #0]
 80067e6:	b1b2      	cbz	r2, 8006816 <send_keyboard+0x56>
    usbPrepareTransmit(&USB_DRIVER, NKRO_ENDPOINT, (uint8_t *)report, sizeof(report_keyboard_t));
 80067e8:	2105      	movs	r1, #5
 80067ea:	462a      	mov	r2, r5
 80067ec:	2310      	movs	r3, #16
 80067ee:	f7ff fbdf 	bl	8005fb0 <usbPrepareTransmit>
 80067f2:	f384 8811 	msr	BASEPRI, r4
    /* need to wait until the previous packet has made it through */
    do {
        osalSysLock();
        ep_not_ready = usbStartTransmitI(&USB_DRIVER, NKRO_ENDPOINT);
 80067f6:	2105      	movs	r1, #5
 80067f8:	480f      	ldr	r0, [pc, #60]	; (8006838 <send_keyboard+0x78>)
 80067fa:	f7fe ffe9 	bl	80057d0 <usbStartTransmitI>
 80067fe:	2300      	movs	r3, #0
 8006800:	f383 8811 	msr	BASEPRI, r3
        osalSysUnlock();
    } while (ep_not_ready);
 8006804:	2800      	cmp	r0, #0
 8006806:	d1f4      	bne.n	80067f2 <send_keyboard+0x32>
        osalSysLock();
        ep_not_ready = usbStartTransmitI(&USB_DRIVER, KBD_ENDPOINT);
        osalSysUnlock();
    } while (ep_not_ready);
  }
  keyboard_report_sent = *report;
 8006808:	4c0d      	ldr	r4, [pc, #52]	; (8006840 <send_keyboard+0x80>)
 800680a:	6828      	ldr	r0, [r5, #0]
 800680c:	6869      	ldr	r1, [r5, #4]
 800680e:	68aa      	ldr	r2, [r5, #8]
 8006810:	68eb      	ldr	r3, [r5, #12]
 8006812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006814:	bd38      	pop	{r3, r4, r5, pc}
        osalSysUnlock();
    } while (ep_not_ready);
  } else
#endif /* NKRO_ENABLE */
  { /* boot protocol */
    usbPrepareTransmit(&USB_DRIVER, KBD_ENDPOINT, (uint8_t *)report, KBD_EPSIZE);
 8006816:	2101      	movs	r1, #1
 8006818:	462a      	mov	r2, r5
 800681a:	2308      	movs	r3, #8
 800681c:	f7ff fbc8 	bl	8005fb0 <usbPrepareTransmit>
 8006820:	f384 8811 	msr	BASEPRI, r4
    /* need to wait until the previous packet has made it through */
    do {
        osalSysLock();
        ep_not_ready = usbStartTransmitI(&USB_DRIVER, KBD_ENDPOINT);
 8006824:	2101      	movs	r1, #1
 8006826:	4804      	ldr	r0, [pc, #16]	; (8006838 <send_keyboard+0x78>)
 8006828:	f7fe ffd2 	bl	80057d0 <usbStartTransmitI>
 800682c:	2300      	movs	r3, #0
 800682e:	f383 8811 	msr	BASEPRI, r3
        osalSysUnlock();
    } while (ep_not_ready);
 8006832:	2800      	cmp	r0, #0
 8006834:	d1f4      	bne.n	8006820 <send_keyboard+0x60>
 8006836:	e7e7      	b.n	8006808 <send_keyboard+0x48>
 8006838:	20001478 	.word	0x20001478
 800683c:	20001232 	.word	0x20001232
 8006840:	200013c4 	.word	0x200013c4
 8006844:	f3af 8000 	nop.w
 8006848:	f3af 8000 	nop.w
 800684c:	f3af 8000 	nop.w

08006850 <keyboard_idle_timer_cb.lto_priv.53>:
  (void)usbp;
}

/* Idle requests timer code
 * callback (called from ISR, unlocked state) */
static void keyboard_idle_timer_cb(void *arg) {
 8006850:	b570      	push	{r4, r5, r6, lr}
 8006852:	2420      	movs	r4, #32
 8006854:	f384 8811 	msr	BASEPRI, r4
  USBDriver *usbp = (USBDriver *)arg;

  osalSysLockFromISR();

  /* check that the states of things are as they're supposed to */
  if(usbGetDriverStateI(usbp) != USB_ACTIVE) {
 8006858:	7802      	ldrb	r2, [r0, #0]
 800685a:	2a04      	cmp	r2, #4
 800685c:	d003      	beq.n	8006866 <keyboard_idle_timer_cb.lto_priv.53+0x16>
 800685e:	2300      	movs	r3, #0
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	bd70      	pop	{r4, r5, r6, pc}
    osalSysUnlockFromISR();
    return;
  }

#ifdef NKRO_ENABLE
  if(!keyboard_nkro && keyboard_idle) {
 8006866:	4a17      	ldr	r2, [pc, #92]	; (80068c4 <keyboard_idle_timer_cb.lto_priv.53+0x74>)
 8006868:	7812      	ldrb	r2, [r2, #0]
 800686a:	2a00      	cmp	r2, #0
 800686c:	d1f7      	bne.n	800685e <keyboard_idle_timer_cb.lto_priv.53+0xe>
 800686e:	4e16      	ldr	r6, [pc, #88]	; (80068c8 <keyboard_idle_timer_cb.lto_priv.53+0x78>)
 8006870:	7831      	ldrb	r1, [r6, #0]
 8006872:	2900      	cmp	r1, #0
 8006874:	d0f3      	beq.n	800685e <keyboard_idle_timer_cb.lto_priv.53+0xe>
 8006876:	4605      	mov	r5, r0
 8006878:	f382 8811 	msr	BASEPRI, r2
#else /* NKRO_ENABLE */
  if(keyboard_idle) {
#endif /* NKRO_ENABLE */
    /* TODO: are we sure we want the KBD_ENDPOINT? */
    osalSysUnlockFromISR();
    usbPrepareTransmit(usbp, KBD_ENDPOINT, (uint8_t *)&keyboard_report_sent, sizeof(keyboard_report_sent));
 800687c:	2101      	movs	r1, #1
 800687e:	4a13      	ldr	r2, [pc, #76]	; (80068cc <keyboard_idle_timer_cb.lto_priv.53+0x7c>)
 8006880:	2310      	movs	r3, #16
 8006882:	f7ff fb95 	bl	8005fb0 <usbPrepareTransmit>
 8006886:	f384 8811 	msr	BASEPRI, r4
    osalSysLockFromISR();
    usbStartTransmitI(usbp, KBD_ENDPOINT);
 800688a:	2101      	movs	r1, #1
 800688c:	4628      	mov	r0, r5
 800688e:	f7fe ff9f 	bl	80057d0 <usbStartTransmitI>
    /* rearm the timer */
    chVTSetI(&keyboard_idle_timer, 4*MS2ST(keyboard_idle), keyboard_idle_timer_cb, (void *)usbp);
 8006892:	7834      	ldrb	r4, [r6, #0]
 8006894:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006898:	fb03 f304 	mul.w	r3, r3, r4
 800689c:	4c0c      	ldr	r4, [pc, #48]	; (80068d0 <keyboard_idle_timer_cb.lto_priv.53+0x80>)
 800689e:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80068a2:	fba4 3403 	umull	r3, r4, r4, r3
 80068a6:	480b      	ldr	r0, [pc, #44]	; (80068d4 <keyboard_idle_timer_cb.lto_priv.53+0x84>)
 80068a8:	09a4      	lsrs	r4, r4, #6
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80068aa:	68c3      	ldr	r3, [r0, #12]
 80068ac:	00a4      	lsls	r4, r4, #2
 80068ae:	b2a4      	uxth	r4, r4
 80068b0:	b10b      	cbz	r3, 80068b6 <keyboard_idle_timer_cb.lto_priv.53+0x66>
    chVTDoResetI(vtp);
 80068b2:	f7ff fd75 	bl	80063a0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 80068b6:	4621      	mov	r1, r4
 80068b8:	462b      	mov	r3, r5
 80068ba:	4806      	ldr	r0, [pc, #24]	; (80068d4 <keyboard_idle_timer_cb.lto_priv.53+0x84>)
 80068bc:	4a06      	ldr	r2, [pc, #24]	; (80068d8 <keyboard_idle_timer_cb.lto_priv.53+0x88>)
 80068be:	f7ff fdaf 	bl	8006420 <chVTDoSetI>
 80068c2:	e7cc      	b.n	800685e <keyboard_idle_timer_cb.lto_priv.53+0xe>
 80068c4:	20001232 	.word	0x20001232
 80068c8:	20001448 	.word	0x20001448
 80068cc:	200013c4 	.word	0x200013c4
 80068d0:	10624dd3 	.word	0x10624dd3
 80068d4:	200013fc 	.word	0x200013fc
 80068d8:	08006851 	.word	0x08006851
 80068dc:	f3af 8000 	nop.w

080068e0 <console_flush_cb>:
  }
}

/* Flush timer code
 * callback (called from ISR, unlocked state) */
static void console_flush_cb(void *arg) {
 80068e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e4:	2320      	movs	r3, #32
 80068e6:	b084      	sub	sp, #16
 80068e8:	4607      	mov	r7, r0
 80068ea:	f383 8811 	msr	BASEPRI, r3
  size_t i, n;
  uint8_t buf[CONSOLE_EPSIZE]; /* TODO: a solution without extra buffer? */
  osalSysLockFromISR();

  /* check that the states of things are as they're supposed to */
  if(usbGetDriverStateI(usbp) != USB_ACTIVE) {
 80068ee:	7803      	ldrb	r3, [r0, #0]
 80068f0:	2b04      	cmp	r3, #4
 80068f2:	d010      	beq.n	8006916 <console_flush_cb+0x36>
 80068f4:	482f      	ldr	r0, [pc, #188]	; (80069b4 <console_flush_cb+0xd4>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80068f6:	68c3      	ldr	r3, [r0, #12]
 80068f8:	b10b      	cbz	r3, 80068fe <console_flush_cb+0x1e>
    chVTDoResetI(vtp);
 80068fa:	f7ff fd51 	bl	80063a0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 80068fe:	463b      	mov	r3, r7
 8006900:	482c      	ldr	r0, [pc, #176]	; (80069b4 <console_flush_cb+0xd4>)
 8006902:	2164      	movs	r1, #100	; 0x64
 8006904:	4a2c      	ldr	r2, [pc, #176]	; (80069b8 <console_flush_cb+0xd8>)
 8006906:	f7ff fd8b 	bl	8006420 <chVTDoSetI>
 800690a:	2300      	movs	r3, #0
 800690c:	f383 8811 	msr	BASEPRI, r3
  (void)usbStartTransmitI(usbp, CONSOLE_ENDPOINT);

  /* rearm the timer */
  chVTSetI(&console_flush_timer, MS2ST(CONSOLE_FLUSH_MS), console_flush_cb, (void *)usbp);
  osalSysUnlockFromISR();
}
 8006910:	b004      	add	sp, #16
 8006912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 8006916:	4c29      	ldr	r4, [pc, #164]	; (80069bc <console_flush_cb+0xdc>)
 8006918:	6923      	ldr	r3, [r4, #16]
 800691a:	68e2      	ldr	r2, [r4, #12]
 800691c:	68a5      	ldr	r5, [r4, #8]
 800691e:	1a9b      	subs	r3, r3, r2
 8006920:	1b5d      	subs	r5, r3, r5
    osalSysUnlockFromISR();
    return;
  }

  /* don't do anything if the queue is empty or has enough stuff in it */
  if(((n = oqGetFullI(&console_queue)) == 0) || (n >= CONSOLE_EPSIZE)) {
 8006922:	1e6b      	subs	r3, r5, #1
 8006924:	2b0e      	cmp	r3, #14
 8006926:	d8e5      	bhi.n	80068f4 <console_flush_cb+0x14>
 8006928:	46e9      	mov	r9, sp
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800692a:	46a2      	mov	sl, r4
 800692c:	446d      	add	r5, sp

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800692e:	f04f 0800 	mov.w	r8, #0
 8006932:	69a3      	ldr	r3, [r4, #24]
 8006934:	6962      	ldr	r2, [r4, #20]
 8006936:	429a      	cmp	r2, r3
 8006938:	d036      	beq.n	80069a8 <console_flush_cb+0xc8>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 800693a:	68a2      	ldr	r2, [r4, #8]
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 800693c:	6921      	ldr	r1, [r4, #16]
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 800693e:	1c58      	adds	r0, r3, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8006940:	3201      	adds	r2, #1
 8006942:	60a2      	str	r2, [r4, #8]
  b = *oqp->q_rdptr++;
 8006944:	61a0      	str	r0, [r4, #24]
  if (oqp->q_rdptr >= oqp->q_top) {
 8006946:	4288      	cmp	r0, r1
  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8006948:	781e      	ldrb	r6, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 800694a:	d303      	bcc.n	8006954 <console_flush_cb+0x74>
    oqp->q_rdptr = oqp->q_buffer;
 800694c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006950:	f8ca 3018 	str.w	r3, [sl, #24]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8006954:	6823      	ldr	r3, [r4, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8006956:	42a3      	cmp	r3, r4
 8006958:	d009      	beq.n	800696e <console_flush_cb+0x8e>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800695a:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 800695c:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 800695e:	f8c2 a004 	str.w	sl, [r2, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8006962:	f8ca 2000 	str.w	r2, [sl]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8006966:	f8c3 8020 	str.w	r8, [r3, #32]
  (void) chSchReadyI(tp);
 800696a:	f7fe ffa1 	bl	80058b0 <chSchReadyI>
 800696e:	4633      	mov	r3, r6
    return;
  }

  /* there's stuff hanging in the queue - so dequeue and send */
  for(i = 0; i < n; i++)
    buf[i] = (uint8_t)oqGetI(&console_queue);
 8006970:	f809 3b01 	strb.w	r3, [r9], #1
    osalSysUnlockFromISR();
    return;
  }

  /* there's stuff hanging in the queue - so dequeue and send */
  for(i = 0; i < n; i++)
 8006974:	45a9      	cmp	r9, r5
 8006976:	d1dc      	bne.n	8006932 <console_flush_cb+0x52>
 8006978:	a904      	add	r1, sp, #16
    buf[i] = (uint8_t)oqGetI(&console_queue);
  for(i = n; i < CONSOLE_EPSIZE; i++)
    buf[i] = 0;
 800697a:	2200      	movs	r2, #0
 800697c:	f805 2b01 	strb.w	r2, [r5], #1
  }

  /* there's stuff hanging in the queue - so dequeue and send */
  for(i = 0; i < n; i++)
    buf[i] = (uint8_t)oqGetI(&console_queue);
  for(i = n; i < CONSOLE_EPSIZE; i++)
 8006980:	428d      	cmp	r5, r1
    buf[i] = 0;
 8006982:	f04f 0300 	mov.w	r3, #0
  }

  /* there's stuff hanging in the queue - so dequeue and send */
  for(i = 0; i < n; i++)
    buf[i] = (uint8_t)oqGetI(&console_queue);
  for(i = n; i < CONSOLE_EPSIZE; i++)
 8006986:	d1f9      	bne.n	800697c <console_flush_cb+0x9c>
 8006988:	f383 8811 	msr	BASEPRI, r3
    buf[i] = 0;
  osalSysUnlockFromISR();
  usbPrepareTransmit(usbp, CONSOLE_ENDPOINT, buf, CONSOLE_EPSIZE);
 800698c:	2103      	movs	r1, #3
 800698e:	466a      	mov	r2, sp
 8006990:	4638      	mov	r0, r7
 8006992:	2310      	movs	r3, #16
 8006994:	f7ff fb0c 	bl	8005fb0 <usbPrepareTransmit>
 8006998:	2320      	movs	r3, #32
 800699a:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  (void)usbStartTransmitI(usbp, CONSOLE_ENDPOINT);
 800699e:	2103      	movs	r1, #3
 80069a0:	4638      	mov	r0, r7
 80069a2:	f7fe ff15 	bl	80057d0 <usbStartTransmitI>
 80069a6:	e7a5      	b.n	80068f4 <console_flush_cb+0x14>
 80069a8:	f8da 2008 	ldr.w	r2, [sl, #8]
 80069ac:	2a00      	cmp	r2, #0
 80069ae:	d0c4      	beq.n	800693a <console_flush_cb+0x5a>
 80069b0:	23fd      	movs	r3, #253	; 0xfd
 80069b2:	e7dd      	b.n	8006970 <console_flush_cb+0x90>
 80069b4:	20001410 	.word	0x20001410
 80069b8:	080068e1 	.word	0x080068e1
 80069bc:	200013d4 	.word	0x200013d4

080069c0 <console_in_cb>:
 */

#ifdef CONSOLE_ENABLE

/* debug IN callback hander */
void console_in_cb(USBDriver *usbp, usbep_t ep) {
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	4604      	mov	r4, r0
 80069c4:	2320      	movs	r3, #32
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	4816      	ldr	r0, [pc, #88]	; (8006a24 <console_in_cb+0x64>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80069cc:	68c3      	ldr	r3, [r0, #12]
 80069ce:	b10b      	cbz	r3, 80069d4 <console_in_cb+0x14>
    chVTDoResetI(vtp);
 80069d0:	f7ff fce6 	bl	80063a0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 80069d4:	4813      	ldr	r0, [pc, #76]	; (8006a24 <console_in_cb+0x64>)
 80069d6:	2164      	movs	r1, #100	; 0x64
 80069d8:	4a13      	ldr	r2, [pc, #76]	; (8006a28 <console_in_cb+0x68>)
 80069da:	4623      	mov	r3, r4
 80069dc:	f7ff fd20 	bl	8006420 <chVTDoSetI>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 80069e0:	4a12      	ldr	r2, [pc, #72]	; (8006a2c <console_in_cb+0x6c>)
 80069e2:	6913      	ldr	r3, [r2, #16]
 80069e4:	68d0      	ldr	r0, [r2, #12]
 80069e6:	6891      	ldr	r1, [r2, #8]
 80069e8:	1a1b      	subs	r3, r3, r0
 80069ea:	1a5b      	subs	r3, r3, r1

  /* rearm the timer */
  chVTSetI(&console_flush_timer, MS2ST(CONSOLE_FLUSH_MS), console_flush_cb, (void *)usbp);

  /* Check if there is data to send left in the output queue */
  if(chOQGetFullI(&console_queue) >= CONSOLE_EPSIZE) {
 80069ec:	2b0f      	cmp	r3, #15
 80069ee:	d915      	bls.n	8006a1c <console_in_cb+0x5c>
 80069f0:	2100      	movs	r1, #0
 80069f2:	f381 8811 	msr	BASEPRI, r1
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80069f6:	69a3      	ldr	r3, [r4, #24]

  isp->txqueued           = true;
 80069f8:	2501      	movs	r5, #1
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80069fa:	695b      	ldr	r3, [r3, #20]

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 80069fc:	2010      	movs	r0, #16
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
 80069fe:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
  isp->txcnt              = 0;
 8006a00:	6099      	str	r1, [r3, #8]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
 8006a02:	701d      	strb	r5, [r3, #0]
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 8006a04:	6058      	str	r0, [r3, #4]
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8006a06:	2103      	movs	r1, #3
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f7fe ffd9 	bl	80059c0 <usb_lld_prepare_transmit>
 8006a0e:	2320      	movs	r3, #32
 8006a10:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
    usbPrepareQueuedTransmit(usbp, CONSOLE_ENDPOINT, &console_queue, CONSOLE_EPSIZE);
    osalSysLockFromISR();
    usbStartTransmitI(usbp, CONSOLE_ENDPOINT);
 8006a14:	2103      	movs	r1, #3
 8006a16:	4620      	mov	r0, r4
 8006a18:	f7fe feda 	bl	80057d0 <usbStartTransmitI>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	bd38      	pop	{r3, r4, r5, pc}
 8006a24:	20001410 	.word	0x20001410
 8006a28:	080068e1 	.word	0x080068e1
 8006a2c:	200013d4 	.word	0x200013d4

08006a30 <console_queue_onotify>:
  osalSysUnlockFromISR();
}

/* Callback when data is inserted into the output queue
 * Called from a locked state */
void console_queue_onotify(io_queue_t *qp) {
 8006a30:	b538      	push	{r3, r4, r5, lr}
  USBDriver *usbp = qGetLink(qp);
 8006a32:	6a04      	ldr	r4, [r0, #32]

  if(usbGetDriverStateI(usbp) != USB_ACTIVE)
 8006a34:	7823      	ldrb	r3, [r4, #0]
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d000      	beq.n	8006a3c <console_queue_onotify+0xc>
 8006a3a:	bd38      	pop	{r3, r4, r5, pc}
    return;

  if(!usbGetTransmitStatusI(usbp, CONSOLE_ENDPOINT)
 8006a3c:	8923      	ldrh	r3, [r4, #8]
 8006a3e:	f003 0308 	and.w	r3, r3, #8
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1f8      	bne.n	8006a3a <console_queue_onotify+0xa>
 8006a48:	490f      	ldr	r1, [pc, #60]	; (8006a88 <console_queue_onotify+0x58>)
 8006a4a:	690a      	ldr	r2, [r1, #16]
 8006a4c:	68cd      	ldr	r5, [r1, #12]
 8006a4e:	6888      	ldr	r0, [r1, #8]
 8006a50:	1b52      	subs	r2, r2, r5
 8006a52:	1a12      	subs	r2, r2, r0
     && (chOQGetFullI(&console_queue) >= CONSOLE_EPSIZE)) {
 8006a54:	2a0f      	cmp	r2, #15
 8006a56:	d9f0      	bls.n	8006a3a <console_queue_onotify+0xa>
 8006a58:	f383 8811 	msr	BASEPRI, r3
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8006a5c:	69a2      	ldr	r2, [r4, #24]

  isp->txqueued           = true;
 8006a5e:	2501      	movs	r5, #1
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8006a60:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 8006a62:	2010      	movs	r0, #16
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
 8006a64:	60d1      	str	r1, [r2, #12]
  isp->txsize             = n;
  isp->txcnt              = 0;
 8006a66:	6093      	str	r3, [r2, #8]
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 8006a68:	6050      	str	r0, [r2, #4]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
 8006a6a:	7015      	strb	r5, [r2, #0]
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	2103      	movs	r1, #3
 8006a70:	f7fe ffa6 	bl	80059c0 <usb_lld_prepare_transmit>
 8006a74:	2320      	movs	r3, #32
 8006a76:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlock();
    usbPrepareQueuedTransmit(usbp, CONSOLE_ENDPOINT, &console_queue, CONSOLE_EPSIZE);
    osalSysLock();
    usbStartTransmitI(usbp, CONSOLE_ENDPOINT);
 8006a7a:	2103      	movs	r1, #3
 8006a7c:	4620      	mov	r0, r4
  }
}
 8006a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if(!usbGetTransmitStatusI(usbp, CONSOLE_ENDPOINT)
     && (chOQGetFullI(&console_queue) >= CONSOLE_EPSIZE)) {
    osalSysUnlock();
    usbPrepareQueuedTransmit(usbp, CONSOLE_ENDPOINT, &console_queue, CONSOLE_EPSIZE);
    osalSysLock();
    usbStartTransmitI(usbp, CONSOLE_ENDPOINT);
 8006a82:	f7fe bea5 	b.w	80057d0 <usbStartTransmitI>
 8006a86:	bf00      	nop
 8006a88:	200013d4 	.word	0x200013d4
 8006a8c:	f3af 8000 	nop.w

08006a90 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8006a90:	4bc0      	ldr	r3, [pc, #768]	; (8006d94 <main+0x304>)
 8006a92:	f04f 32ff 	mov.w	r2, #4294967295
 8006a96:	2100      	movs	r1, #0
 8006a98:	6918      	ldr	r0, [r3, #16]



/* Main thread
 */
int main(void) {
 8006a9a:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8006a9e:	611a      	str	r2, [r3, #16]
 8006aa0:	6119      	str	r1, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8006aa2:	68d8      	ldr	r0, [r3, #12]
 8006aa4:	60da      	str	r2, [r3, #12]
 8006aa6:	60d9      	str	r1, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8006aa8:	69d8      	ldr	r0, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8006aaa:	4cbb      	ldr	r4, [pc, #748]	; (8006d98 <main+0x308>)
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8006aac:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8006ab0:	61d8      	str	r0, [r3, #28]
  rccEnableBKPInterface(FALSE);
 8006ab2:	69d8      	ldr	r0, [r3, #28]
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8006ab4:	f8df e330 	ldr.w	lr, [pc, #816]	; 8006de8 <main+0x358>
 8006ab8:	f040 6000 	orr.w	r0, r0, #134217728	; 0x8000000
 8006abc:	61d8      	str	r0, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8006abe:	6820      	ldr	r0, [r4, #0]
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 8006ac0:	4fb6      	ldr	r7, [pc, #728]	; (8006d9c <main+0x30c>)
 8006ac2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8006ac6:	6020      	str	r0, [r4, #0]
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8006ac8:	699c      	ldr	r4, [r3, #24]
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 8006aca:	4eb5      	ldr	r6, [pc, #724]	; (8006da0 <main+0x310>)
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8006acc:	f044 047d 	orr.w	r4, r4, #125	; 0x7d
 8006ad0:	619c      	str	r4, [r3, #24]
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 8006ad2:	4cb4      	ldr	r4, [pc, #720]	; (8006da4 <main+0x314>)
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 8006ad4:	4db4      	ldr	r5, [pc, #720]	; (8006da8 <main+0x318>)
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8006ad6:	48b5      	ldr	r0, [pc, #724]	; (8006dac <main+0x31c>)
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 8006ad8:	f8df a310 	ldr.w	sl, [pc, #784]	; 8006dec <main+0x35c>
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 8006adc:	f8df c310 	ldr.w	ip, [pc, #784]	; 8006df0 <main+0x360>

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 8006ae0:	f8df b310 	ldr.w	fp, [pc, #784]	; 8006df4 <main+0x364>
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 8006ae4:	f8df 9310 	ldr.w	r9, [pc, #784]	; 8006df8 <main+0x368>
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8006ae8:	f8ce 200c 	str.w	r2, [lr, #12]
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 8006aec:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
  usbp->config       = NULL;
 8006af0:	6061      	str	r1, [r4, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8006af2:	4688      	mov	r8, r1
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 8006af4:	2101      	movs	r1, #1

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 8006af6:	f8ce b004 	str.w	fp, [lr, #4]
 8006afa:	b08b      	sub	sp, #44	; 0x2c
  GPIOA->CRL = config->PAData.crl;
 8006afc:	f8ce a000 	str.w	sl, [lr]
  GPIOB->ODR = config->PBData.odr;
 8006b00:	60fa      	str	r2, [r7, #12]
 8006b02:	f104 0e28 	add.w	lr, r4, #40	; 0x28
  GPIOB->CRH = config->PBData.crh;
 8006b06:	f8c7 c004 	str.w	ip, [r7, #4]
 8006b0a:	f104 0a44 	add.w	sl, r4, #68	; 0x44
  GPIOB->CRL = config->PBData.crl;
 8006b0e:	f8c7 c000 	str.w	ip, [r7]
  GPIOC->ODR = config->PCData.odr;
 8006b12:	60f2      	str	r2, [r6, #12]
  GPIOC->CRH = config->PCData.crh;
 8006b14:	6073      	str	r3, [r6, #4]
  GPIOC->CRL = config->PCData.crl;
 8006b16:	6033      	str	r3, [r6, #0]
  GPIOD->ODR = config->PDData.odr;
 8006b18:	60ea      	str	r2, [r5, #12]
  GPIOD->CRH = config->PDData.crh;
 8006b1a:	606b      	str	r3, [r5, #4]
  GPIOD->CRL = config->PDData.crl;
 8006b1c:	f8c5 9000 	str.w	r9, [r5]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8006b20:	60c2      	str	r2, [r0, #12]
  GPIOE->CRH = config->PEData.crh;
 8006b22:	6043      	str	r3, [r0, #4]
  GPIOE->CRL = config->PEData.crl;
 8006b24:	6003      	str	r3, [r0, #0]
 8006b26:	7021      	strb	r1, [r4, #0]
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8006b28:	f84e 8f04 	str.w	r8, [lr, #4]!
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 8006b2c:	45d6      	cmp	lr, sl
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
 8006b2e:	f8ce 801c 	str.w	r8, [lr, #28]
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8006b32:	f04f 0600 	mov.w	r6, #0
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 8006b36:	d1f7      	bne.n	8006b28 <main+0x98>
  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8006b38:	f64f 71ff 	movw	r1, #65535	; 0xffff

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8006b3c:	f648 4a9f 	movw	sl, #35999	; 0x8c9f
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8006b40:	f64f 00ff 	movw	r0, #63743	; 0xf8ff

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8006b44:	4a93      	ldr	r2, [pc, #588]	; (8006d94 <main+0x304>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8006b46:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 8006dfc <main+0x36c>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8006b4a:	69d3      	ldr	r3, [r2, #28]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006b4c:	4d98      	ldr	r5, [pc, #608]	; (8006db0 <main+0x320>)
 8006b4e:	f043 0301 	orr.w	r3, r3, #1
 8006b52:	61d3      	str	r3, [r2, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8006b54:	f8dc 3004 	ldr.w	r3, [ip, #4]
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8006b58:	4a96      	ldr	r2, [pc, #600]	; (8006db4 <main+0x324>)
 8006b5a:	f443 6e00 	orr.w	lr, r3, #2048	; 0x800
 8006b5e:	f8cc e004 	str.w	lr, [ip, #4]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8006b62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8006b66:	2701      	movs	r7, #1
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006b68:	f04f 5e80 	mov.w	lr, #268435456	; 0x10000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006b6c:	f04f 0b80 	mov.w	fp, #128	; 0x80
 8006b70:	f44f 4ca0 	mov.w	ip, #20480	; 0x5000

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8006b74:	f8c3 a028 	str.w	sl, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8006b78:	62d9      	str	r1, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8006b7a:	619e      	str	r6, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8006b7c:	635e      	str	r6, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8006b7e:	60de      	str	r6, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8006b80:	605e      	str	r6, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8006b82:	615f      	str	r7, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8006b84:	601f      	str	r7, [r3, #0]
 8006b86:	f885 b31c 	strb.w	fp, [r5, #796]	; 0x31c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006b8a:	f8c5 e180 	str.w	lr, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006b8e:	f8c5 e000 	str.w	lr, [r5]
 8006b92:	f8c2 c008 	str.w	ip, [r2, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b96:	68d5      	ldr	r5, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8006b98:	4b87      	ldr	r3, [pc, #540]	; (8006db8 <main+0x328>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8006b9a:	4028      	ands	r0, r5
  reg_value  =  (reg_value                                   |
 8006b9c:	4303      	orrs	r3, r0

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8006b9e:	4d87      	ldr	r5, [pc, #540]	; (8006dbc <main+0x32c>)
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8006ba0:	60d3      	str	r3, [r2, #12]
 8006ba2:	68eb      	ldr	r3, [r5, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8006ba4:	4886      	ldr	r0, [pc, #536]	; (8006dc0 <main+0x330>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8006ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006baa:	60eb      	str	r3, [r5, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8006bac:	6803      	ldr	r3, [r0, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8006bae:	4d85      	ldr	r5, [pc, #532]	; (8006dc4 <main+0x334>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bb0:	f04f 0c10 	mov.w	ip, #16
 8006bb4:	433b      	orrs	r3, r7
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8006bb6:	f105 0e1c 	add.w	lr, r5, #28
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
  }
  usbp->transmitting = 0;
 8006bba:	8126      	strh	r6, [r4, #8]
  usbp->receiving    = 0;
 8006bbc:	8166      	strh	r6, [r4, #10]

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8006bbe:	f04f 0800 	mov.w	r8, #0
 8006bc2:	6003      	str	r3, [r0, #0]
 8006bc4:	f04f 0900 	mov.w	r9, #0
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8006bc8:	eb0d 000c 	add.w	r0, sp, ip
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8006bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd0:	f04f 0a20 	mov.w	sl, #32
 8006bd4:	f882 c01f 	strb.w	ip, [r2, #31]
  tqp->p_prev = (thread_t *)tqp;
 8006bd8:	606d      	str	r5, [r5, #4]
 8006bda:	f882 a022 	strb.w	sl, [r2, #34]	; 0x22
 8006bde:	f8c5 e01c 	str.w	lr, [r5, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8006be2:	f8c5 e020 	str.w	lr, [r5, #32]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8006be6:	60ae      	str	r6, [r5, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8006be8:	602d      	str	r5, [r5, #0]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8006bea:	612d      	str	r5, [r5, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8006bec:	616d      	str	r5, [r5, #20]
  ch.vtlist.vt_delta = (systime_t)-1;
 8006bee:	84a9      	strh	r1, [r5, #36]	; 0x24
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8006bf0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8006bf4:	9304      	str	r3, [sp, #16]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8006bf6:	84ee      	strh	r6, [r5, #38]	; 0x26
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8006bf8:	672e      	str	r6, [r5, #112]	; 0x70
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8006bfa:	9605      	str	r6, [sp, #20]
  tmp->last       = (rtcnt_t)0;
 8006bfc:	9606      	str	r6, [sp, #24]
  tmp->n          = (ucnt_t)0;
 8006bfe:	9607      	str	r6, [sp, #28]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8006c00:	f000 fb5e 	bl	80072c0 <chTMStartMeasurementX.constprop.26>
  chTMStopMeasurementX(&tm);
 8006c04:	a804      	add	r0, sp, #16
 8006c06:	f7fe fe0b 	bl	8005820 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8006c0a:	4b6f      	ldr	r3, [pc, #444]	; (8006dc8 <main+0x338>)
  ch.tm.offset = tm.last;
 8006c0c:	9906      	ldr	r1, [sp, #24]
 8006c0e:	f103 0c10 	add.w	ip, r3, #16
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006c12:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8006c16:	f8c3 c010 	str.w	ip, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 8006c1a:	f8c3 c014 	str.w	ip, [r3, #20]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8006c1e:	486b      	ldr	r0, [pc, #428]	; (8006dcc <main+0x33c>)
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8006c20:	f04f 0c40 	mov.w	ip, #64	; 0x40
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8006c24:	4a6a      	ldr	r2, [pc, #424]	; (8006dd0 <main+0x340>)
 8006c26:	6729      	str	r1, [r5, #112]	; 0x70
 8006c28:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006c2c:	f105 012c 	add.w	r1, r5, #44	; 0x2c
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8006c30:	f8c5 c068 	str.w	ip, [r5, #104]	; 0x68
 8006c34:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8006e00 <main+0x370>
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8006c38:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8006e04 <main+0x374>
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8006c3c:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 8006e08 <main+0x378>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006c40:	f8c5 e040 	str.w	lr, [r5, #64]	; 0x40
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8006c44:	f020 0007 	bic.w	r0, r0, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8006c48:	f022 0207 	bic.w	r2, r2, #7
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8006c4c:	f885 6049 	strb.w	r6, [r5, #73]	; 0x49
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8006c50:	666e      	str	r6, [r5, #100]	; 0x64
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8006c52:	662e      	str	r6, [r5, #96]	; 0x60
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8006c54:	f885 704a 	strb.w	r7, [r5, #74]	; 0x4a
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8006c58:	646e      	str	r6, [r5, #68]	; 0x44
  REG_INSERT(tp);
 8006c5a:	63ed      	str	r5, [r5, #60]	; 0x3c
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8006c5c:	619e      	str	r6, [r3, #24]
 8006c5e:	f8ce 1010 	str.w	r1, [lr, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8006c62:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8006c66:	6169      	str	r1, [r5, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8006c68:	61a9      	str	r1, [r5, #24]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8006c6a:	f105 0154 	add.w	r1, r5, #84	; 0x54
 8006c6e:	f8c3 9000 	str.w	r9, [r3]
  default_heap.h_free.h.u.next = NULL;
 8006c72:	609e      	str	r6, [r3, #8]
  default_heap.h_free.h.size = 0;
 8006c74:	60de      	str	r6, [r3, #12]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8006c76:	f885 7048 	strb.w	r7, [r5, #72]	; 0x48
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8006c7a:	f8c5 e050 	str.w	lr, [r5, #80]	; 0x50
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8006c7e:	6569      	str	r1, [r5, #84]	; 0x54
  tqp->p_prev = (thread_t *)tqp;
 8006c80:	65a9      	str	r1, [r5, #88]	; 0x58
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8006c82:	f8c8 0000 	str.w	r0, [r8]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8006c86:	f8cc 2000 	str.w	r2, [ip]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8006c8a:	f04f 0902 	mov.w	r9, #2
 8006c8e:	f386 8811 	msr	BASEPRI, r6
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8006c92:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8006c94:	4a4f      	ldr	r2, [pc, #316]	; (8006dd4 <main+0x344>)
 8006c96:	69ab      	ldr	r3, [r5, #24]
 8006c98:	619a      	str	r2, [r3, #24]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8006c9a:	f38a 8811 	msr	BASEPRI, sl

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8006c9e:	69ab      	ldr	r3, [r5, #24]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8006ca0:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
 8006ca4:	6899      	ldr	r1, [r3, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006ca6:	6968      	ldr	r0, [r5, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006ca8:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8006e0c <main+0x37c>
 8006cac:	f8df c160 	ldr.w	ip, [pc, #352]	; 8006e10 <main+0x380>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006cb0:	f105 0278 	add.w	r2, r5, #120	; 0x78
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8006cb4:	f885 9094 	strb.w	r9, [r5, #148]	; 0x94

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006cb8:	f505 7a96 	add.w	sl, r5, #300	; 0x12c
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8006cbc:	f105 09a0 	add.w	r9, r5, #160	; 0xa0
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8006cc0:	f105 0e9c 	add.w	lr, r5, #156	; 0x9c
 8006cc4:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8006cc8:	f885 6095 	strb.w	r6, [r5, #149]	; 0x95
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8006ccc:	f8c5 70b4 	str.w	r7, [r5, #180]	; 0xb4
  tp->p_mtxlist = NULL;
 8006cd0:	f8c5 60b0 	str.w	r6, [r5, #176]	; 0xb0
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8006cd4:	f8c5 60ac 	str.w	r6, [r5, #172]	; 0xac
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8006cd8:	f885 7096 	strb.w	r7, [r5, #150]	; 0x96
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8006cdc:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
  REG_INSERT(tp);
 8006ce0:	f8c5 5088 	str.w	r5, [r5, #136]	; 0x88

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006ce4:	f8c5 a084 	str.w	sl, [r5, #132]	; 0x84
 8006ce8:	f8c5 812c 	str.w	r8, [r5, #300]	; 0x12c
 8006cec:	f8c5 c14c 	str.w	ip, [r5, #332]	; 0x14c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006cf0:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
 8006cf4:	6102      	str	r2, [r0, #16]
 8006cf6:	616a      	str	r2, [r5, #20]
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8006cf8:	f8c5 6098 	str.w	r6, [r5, #152]	; 0x98
 8006cfc:	f8c5 e09c 	str.w	lr, [r5, #156]	; 0x9c
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8006d00:	f8c5 90a0 	str.w	r9, [r5, #160]	; 0xa0
  tqp->p_prev = (thread_t *)tqp;
 8006d04:	f8c5 90a4 	str.w	r9, [r5, #164]	; 0xa4

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8006d08:	2900      	cmp	r1, #0
 8006d0a:	f000 8168 	beq.w	8006fde <main+0x54e>
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.r_queue;
 8006d0e:	462b      	mov	r3, r5
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8006d10:	f885 6094 	strb.w	r6, [r5, #148]	; 0x94
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8006d14:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8006d16:	689e      	ldr	r6, [r3, #8]
 8006d18:	2e00      	cmp	r6, #0
 8006d1a:	d1fb      	bne.n	8006d14 <main+0x284>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8006d1c:	6859      	ldr	r1, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8006d1e:	67ab      	str	r3, [r5, #120]	; 0x78
  tp->p_prev = cp->p_prev;
 8006d20:	67e9      	str	r1, [r5, #124]	; 0x7c
  tp->p_prev->p_next = tp;
 8006d22:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 8006d24:	605a      	str	r2, [r3, #4]
 8006d26:	f386 8811 	msr	BASEPRI, r6
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(usbp);
 8006d2a:	4a1c      	ldr	r2, [pc, #112]	; (8006d9c <main+0x30c>)
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8006d2c:	4b2a      	ldr	r3, [pc, #168]	; (8006dd8 <main+0x348>)
 8006d2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d32:	6111      	str	r1, [r2, #16]
  chThdSleepMilliseconds(1500);
 8006d34:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006d38:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8006d3c:	f7ff fc78 	bl	8006630 <chThdSleep>
 8006d40:	2320      	movs	r3, #32
 8006d42:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 8006d46:	4a25      	ldr	r2, [pc, #148]	; (8006ddc <main+0x34c>)
 8006d48:	4b25      	ldr	r3, [pc, #148]	; (8006de0 <main+0x350>)
 8006d4a:	6062      	str	r2, [r4, #4]
 8006d4c:	f103 0220 	add.w	r2, r3, #32
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8006d50:	f843 6f04 	str.w	r6, [r3, #4]!

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8006d54:	4293      	cmp	r3, r2
    usbp->epc[i] = NULL;
 8006d56:	f04f 0e00 	mov.w	lr, #0

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8006d5a:	d1f9      	bne.n	8006d50 <main+0x2c0>
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {

  if (usbp->state == USB_STOP) {
 8006d5c:	7826      	ldrb	r6, [r4, #0]
 8006d5e:	2e01      	cmp	r6, #1
 8006d60:	d15f      	bne.n	8006e22 <main+0x392>
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 8006d62:	4f0c      	ldr	r7, [pc, #48]	; (8006d94 <main+0x304>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006d64:	4b12      	ldr	r3, [pc, #72]	; (8006db0 <main+0x320>)
 8006d66:	69fa      	ldr	r2, [r7, #28]
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 8006d68:	491e      	ldr	r1, [pc, #120]	; (8006de4 <main+0x354>)
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006d6a:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8006d6e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 8006d72:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006d76:	f04f 08d0 	mov.w	r8, #208	; 0xd0
 8006d7a:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
 8006d7e:	61fa      	str	r2, [r7, #28]
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 8006d80:	640e      	str	r6, [r1, #64]	; 0x40
 8006d82:	f883 8313 	strb.w	r8, [r3, #787]	; 0x313
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006d86:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006d8a:	601d      	str	r5, [r3, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006d8c:	f883 c314 	strb.w	ip, [r3, #788]	; 0x314
 8006d90:	e040      	b.n	8006e14 <main+0x384>
 8006d92:	bf00      	nop
 8006d94:	40021000 	.word	0x40021000
 8006d98:	40007000 	.word	0x40007000
 8006d9c:	40010c00 	.word	0x40010c00
 8006da0:	40011000 	.word	0x40011000
 8006da4:	20001478 	.word	0x20001478
 8006da8:	40011400 	.word	0x40011400
 8006dac:	40011800 	.word	0x40011800
 8006db0:	e000e100 	.word	0xe000e100
 8006db4:	e000ed00 	.word	0xe000ed00
 8006db8:	05fa0300 	.word	0x05fa0300
 8006dbc:	e000edf0 	.word	0xe000edf0
 8006dc0:	e0001000 	.word	0xe0001000
 8006dc4:	20001270 	.word	0x20001270
 8006dc8:	20001428 	.word	0x20001428
 8006dcc:	200015a7 	.word	0x200015a7
 8006dd0:	20005000 	.word	0x20005000
 8006dd4:	080087f0 	.word	0x080087f0
 8006dd8:	08008820 	.word	0x08008820
 8006ddc:	08008810 	.word	0x08008810
 8006de0:	20001480 	.word	0x20001480
 8006de4:	40005c00 	.word	0x40005c00
 8006de8:	40010800 	.word	0x40010800
 8006dec:	88884b88 	.word	0x88884b88
 8006df0:	88888838 	.word	0x88888838
 8006df4:	888884b8 	.word	0x888884b8
 8006df8:	88888844 	.word	0x88888844
 8006dfc:	e0042000 	.word	0xe0042000
 8006e00:	080054a1 	.word	0x080054a1
 8006e04:	2000144c 	.word	0x2000144c
 8006e08:	200013f8 	.word	0x200013f8
 8006e0c:	08005551 	.word	0x08005551
 8006e10:	08005231 	.word	0x08005231
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006e14:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006e18:	6018      	str	r0, [r3, #0]
#if STM32_USB1_HP_NUMBER != STM32_USB1_LP_NUMBER
      nvicEnableVector(STM32_USB1_HP_NUMBER, STM32_USB_USB1_HP_IRQ_PRIORITY);
#endif
      nvicEnableVector(STM32_USB1_LP_NUMBER, STM32_USB_USB1_LP_IRQ_PRIORITY);
      /* Releases the USB reset.*/
      STM32_USB->CNTR = 0;
 8006e1a:	f8c1 e040 	str.w	lr, [r1, #64]	; 0x40
    }
#endif
    /* Reset procedure enforced on driver start.*/
    _usb_reset(usbp);
 8006e1e:	f000 fa57 	bl	80072d0 <_usb_reset.constprop.15>
    usbp->epc[i] = NULL;
  }
  usb_lld_start(usbp);
  usbp->state = USB_READY;
 8006e22:	2302      	movs	r3, #2
 8006e24:	7023      	strb	r3, [r4, #0]
 8006e26:	2100      	movs	r1, #0
 8006e28:	f381 8811 	msr	BASEPRI, r1
  usbStart(usbp, &usbcfg);
  usbConnectBus(usbp);
 8006e2c:	4bac      	ldr	r3, [pc, #688]	; (80070e0 <main+0x650>)
 8006e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e32:	615a      	str	r2, [r3, #20]

  /* init printf */
  init_printf(NULL,sendchar_pf);

  /* Wait until the USB is active */
  while(USB_DRIVER.state != USB_ACTIVE)
 8006e34:	7820      	ldrb	r0, [r4, #0]
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8006e36:	4aab      	ldr	r2, [pc, #684]	; (80070e4 <main+0x654>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8006e38:	4bab      	ldr	r3, [pc, #684]	; (80070e8 <main+0x658>)
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8006e3a:	f04f 0c20 	mov.w	ip, #32
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->vt_func = NULL;
 8006e3e:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 8007138 <main+0x6a8>
 8006e42:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 800713c <main+0x6ac>


void init_printf(void* putp,void (*putf) (void*,char))
    {
    stdout_putf=putf;
    stdout_putp=putp;
 8006e46:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 8007140 <main+0x6b0>
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8006e4a:	4fa8      	ldr	r7, [pc, #672]	; (80070ec <main+0x65c>)
    }


void init_printf(void* putp,void (*putf) (void*,char))
    {
    stdout_putf=putf;
 8006e4c:	4da8      	ldr	r5, [pc, #672]	; (80070f0 <main+0x660>)
 8006e4e:	4ea9      	ldr	r6, [pc, #676]	; (80070f4 <main+0x664>)
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8006e50:	eb02 0e0c 	add.w	lr, r2, ip
 8006e54:	2804      	cmp	r0, #4
 8006e56:	f8ca 100c 	str.w	r1, [sl, #12]
 8006e5a:	f8c9 100c 	str.w	r1, [r9, #12]
    stdout_putp=putp;
 8006e5e:	f8c8 1000 	str.w	r1, [r8]
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8006e62:	621c      	str	r4, [r3, #32]
 8006e64:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8006e66:	605b      	str	r3, [r3, #4]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8006e68:	f8c3 c008 	str.w	ip, [r3, #8]
  oqp->q_buffer  = bp;
 8006e6c:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 8006e6e:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 8006e70:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
 8006e72:	f8c3 e010 	str.w	lr, [r3, #16]
  oqp->q_notify  = onfy;
 8006e76:	61df      	str	r7, [r3, #28]
    }


void init_printf(void* putp,void (*putf) (void*,char))
    {
    stdout_putf=putf;
 8006e78:	602e      	str	r6, [r5, #0]
 8006e7a:	d005      	beq.n	8006e88 <main+0x3f8>
    chThdSleepMilliseconds(50);
 8006e7c:	2064      	movs	r0, #100	; 0x64
 8006e7e:	f7ff fbd7 	bl	8006630 <chThdSleep>

  /* init printf */
  init_printf(NULL,sendchar_pf);

  /* Wait until the USB is active */
  while(USB_DRIVER.state != USB_ACTIVE)
 8006e82:	7823      	ldrb	r3, [r4, #0]
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	d1f9      	bne.n	8006e7c <main+0x3ec>
    chThdSleepMilliseconds(50);

  print("USB configured.\n");
 8006e88:	489b      	ldr	r0, [pc, #620]	; (80070f8 <main+0x668>)
 8006e8a:	f000 fa99 	bl	80073c0 <tfp_printf>
  if (mode == PAL_MODE_INPUT_PULLUP)
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	4618      	mov	r0, r3
 8006e92:	4619      	mov	r1, r3
#define LED_TGL()   do { palTogglePad(MAPLE_LED_PORT, MAPLE_LED_PIN); } while (0)

void matrix_init(void)
{
    // debug on
    debug_config.enable = true;
 8006e94:	f8df 8280 	ldr.w	r8, [pc, #640]	; 8007118 <main+0x688>
    debug_config.keyboard = true;
    debug_config.matrix = true;
    debug_config.mouse = true;
 8006e98:	f44f 7580 	mov.w	r5, #256	; 0x100
#define LED_TGL()   do { palTogglePad(MAPLE_LED_PORT, MAPLE_LED_PIN); } while (0)

void matrix_init(void)
{
    // debug on
    debug_config.enable = true;
 8006e9c:	f898 2000 	ldrb.w	r2, [r8]
    debug_config.keyboard = true;
    debug_config.matrix = true;
    debug_config.mouse = true;
 8006ea0:	f042 020f 	orr.w	r2, r2, #15
 8006ea4:	f888 2000 	strb.w	r2, [r8]
 8006ea8:	2208      	movs	r2, #8
    crh <<= 4;
    if ((mask & 0x0080) == 0)
      ml |= 0xf;
    else
      crl |= cfg;
    if ((mask & 0x8000) == 0)
 8006eaa:	042f      	lsls	r7, r5, #16
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
 8006eac:	ea4f 1000 	mov.w	r0, r0, lsl #4
    crl <<= 4;
    crh <<= 4;
 8006eb0:	ea4f 1303 	mov.w	r3, r3, lsl #4
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
    ml <<= 4;
 8006eb4:	ea4f 1101 	mov.w	r1, r1, lsl #4
    if ((mask & 0x0080) == 0)
      ml |= 0xf;
    else
      crl |= cfg;
    if ((mask & 0x8000) == 0)
      mh |= 0xf;
 8006eb8:	bf54      	ite	pl
 8006eba:	f040 000f 	orrpl.w	r0, r0, #15
    else
      crh |= cfg;
 8006ebe:	f043 0304 	orrmi.w	r3, r3, #4
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
 8006ec2:	3a01      	subs	r2, #1
    ml <<= 4;
    mh <<= 4;
    crl <<= 4;
    crh <<= 4;
    if ((mask & 0x0080) == 0)
      ml |= 0xf;
 8006ec4:	f041 010f 	orr.w	r1, r1, #15
      crl |= cfg;
    if ((mask & 0x8000) == 0)
      mh |= 0xf;
    else
      crh |= cfg;
    mask <<= 1;
 8006ec8:	ea4f 0545 	mov.w	r5, r5, lsl #1
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
 8006ecc:	d1ed      	bne.n	8006eaa <main+0x41a>
      mh |= 0xf;
    else
      crh |= cfg;
    mask <<= 1;
  }
  port->CRH = (port->CRH & mh) | crh;
 8006ece:	4d84      	ldr	r5, [pc, #528]	; (80070e0 <main+0x650>)
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
 8006ed0:	f8df e270 	ldr.w	lr, [pc, #624]	; 8007144 <main+0x6b4>
 8006ed4:	686e      	ldr	r6, [r5, #4]
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
 8006ed6:	4f89      	ldr	r7, [pc, #548]	; (80070fc <main+0x66c>)
 8006ed8:	4030      	ands	r0, r6
 8006eda:	4303      	orrs	r3, r0
 8006edc:	606b      	str	r3, [r5, #4]
  port->CRL = (port->CRL & ml) | crl;
 8006ede:	682b      	ldr	r3, [r5, #0]
        matrix_debouncing[i] = 0;
    }

    LED_ON();
 8006ee0:	2602      	movs	r6, #2
 8006ee2:	4019      	ands	r1, r3
 8006ee4:	6029      	str	r1, [r5, #0]
    wait_ms(500);
 8006ee6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
 8006eea:	f88e 2000 	strb.w	r2, [lr]
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
 8006eee:	703a      	strb	r2, [r7, #0]
        matrix_debouncing[i] = 0;
    }

    LED_ON();
 8006ef0:	612e      	str	r6, [r5, #16]
    wait_ms(500);
 8006ef2:	f7ff fb9d 	bl	8006630 <chThdSleep>
    LED_OFF();
 8006ef6:	616e      	str	r6, [r5, #20]
    wait_ms(500);
 8006ef8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006efc:	f7ff fb98 	bl	8006630 <chThdSleep>
    LED_ON();
 8006f00:	612e      	str	r6, [r5, #16]
    wait_ms(500);
 8006f02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006f06:	f7ff fb93 	bl	8006630 <chThdSleep>
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
 8006f0a:	4b7d      	ldr	r3, [pc, #500]	; (8007100 <main+0x670>)
 8006f0c:	4a7d      	ldr	r2, [pc, #500]	; (8007104 <main+0x674>)
    LED_OFF();
 8006f0e:	616e      	str	r6, [r5, #20]

#ifdef SLEEP_LED_ENABLE
  sleep_led_init();
#endif

  print("Keyboard start.\n");
 8006f10:	487d      	ldr	r0, [pc, #500]	; (8007108 <main+0x678>)
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	f000 fa54 	bl	80073c0 <tfp_printf>
 8006f18:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8007148 <main+0x6b8>
 8006f1c:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 8007114 <main+0x684>
  /* Main loop */
  while(true) {

    if(USB_DRIVER.state == USB_SUSPENDED) {
      print("[s]");
      while(USB_DRIVER.state == USB_SUSPENDED) {
 8006f20:	4d7a      	ldr	r5, [pc, #488]	; (800710c <main+0x67c>)

void timer_clear(void) {}

uint16_t timer_read(void)
{
    return (uint16_t)ST2MS(chVTGetSystemTime());
 8006f22:	f8df b228 	ldr.w	fp, [pc, #552]	; 800714c <main+0x6bc>
  print("Keyboard start.\n");

  /* Main loop */
  while(true) {

    if(USB_DRIVER.state == USB_SUSPENDED) {
 8006f26:	7823      	ldrb	r3, [r4, #0]
 8006f28:	2b05      	cmp	r3, #5
 8006f2a:	d10f      	bne.n	8006f4c <main+0x4bc>
      print("[s]");
 8006f2c:	4878      	ldr	r0, [pc, #480]	; (8007110 <main+0x680>)
 8006f2e:	f000 fa47 	bl	80073c0 <tfp_printf>
 8006f32:	e005      	b.n	8006f40 <main+0x4b0>
	// also shouldn't power down USB

	// on AVR, this enables the watchdog for 15ms (max), and goes to
	// SLEEP_MODE_PWR_DOWN

	chThdSleepMilliseconds(17);
 8006f34:	f7ff fb7c 	bl	8006630 <chThdSleep>
      while(USB_DRIVER.state == USB_SUSPENDED) {
        /* Do this in the suspended state */
        suspend_power_down(); // on AVR this deep sleeps for 15ms
        /* Remote wakeup */
        if((USB_DRIVER.status & 2) && suspend_wakeup_condition()) {
 8006f38:	f8b5 307c 	ldrh.w	r3, [r5, #124]	; 0x7c
 8006f3c:	079e      	lsls	r6, r3, #30
 8006f3e:	d450      	bmi.n	8006fe2 <main+0x552>
  /* Main loop */
  while(true) {

    if(USB_DRIVER.state == USB_SUSPENDED) {
      print("[s]");
      while(USB_DRIVER.state == USB_SUSPENDED) {
 8006f40:	7823      	ldrb	r3, [r4, #0]
 8006f42:	2022      	movs	r0, #34	; 0x22
 8006f44:	2b05      	cmp	r3, #5
 8006f46:	d0f5      	beq.n	8006f34 <main+0x4a4>
          send_remote_wakeup(&USB_DRIVER);
        }
      }
      /* Woken up */
      // variables has been already cleared by the wakeup hook
      send_keyboard_report();
 8006f48:	f000 fb5a 	bl	8007600 <send_keyboard_report>
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
 8006f4c:	f001 fa40 	bl	80083d0 <matrix_scan>
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
 8006f50:	783b      	ldrb	r3, [r7, #0]
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
        matrix_change = matrix_row ^ matrix_prev[r];
 8006f52:	f899 2000 	ldrb.w	r2, [r9]
 8006f56:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80070fc <main+0x66c>
        if (matrix_change) {
 8006f5a:	ea93 0602 	eors.w	r6, r3, r2
 8006f5e:	d005      	beq.n	8006f6c <main+0x4dc>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
 8006f60:	f898 2000 	ldrb.w	r2, [r8]
 8006f64:	0790      	lsls	r0, r2, #30
 8006f66:	d451      	bmi.n	800700c <main+0x57c>
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
 8006f68:	07f1      	lsls	r1, r6, #31
 8006f6a:	d47b      	bmi.n	8007064 <main+0x5d4>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
 8006f6c:	23ff      	movs	r3, #255	; 0xff
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f88d 3008 	strb.w	r3, [sp, #8]
 8006f74:	f88d 3009 	strb.w	r3, [sp, #9]
 8006f78:	f88d 200a 	strb.w	r2, [sp, #10]
 8006f7c:	2320      	movs	r3, #32
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8006f82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	f382 8811 	msr	BASEPRI, r2
 8006f8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	fb02 f303 	mul.w	r3, r2, r3
 8006f96:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 8006f9a:	fbab 2303 	umull	r2, r3, fp, r3
 8006f9e:	09db      	lsrs	r3, r3, #7
 8006fa0:	f043 0301 	orr.w	r3, r3, #1
 8006fa4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006fa8:	ab02      	add	r3, sp, #8
 8006faa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006fae:	f001 f977 	bl	80082a0 <action_exec>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
 8006fb2:	f001 fa05 	bl	80083c0 <host_keyboard_leds>
 8006fb6:	f89a 3000 	ldrb.w	r3, [sl]
 8006fba:	4e56      	ldr	r6, [pc, #344]	; (8007114 <main+0x684>)
 8006fbc:	4283      	cmp	r3, r0
 8006fbe:	d00a      	beq.n	8006fd6 <main+0x546>
        led_status = host_keyboard_leds();
 8006fc0:	f001 f9fe 	bl	80083c0 <host_keyboard_leds>
    }
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 8006fc4:	f898 3000 	ldrb.w	r3, [r8]
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
 8006fc8:	7030      	strb	r0, [r6, #0]
    }
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 8006fca:	075a      	lsls	r2, r3, #29
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
 8006fcc:	4601      	mov	r1, r0
    }
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 8006fce:	4e52      	ldr	r6, [pc, #328]	; (8007118 <main+0x688>)
 8006fd0:	d501      	bpl.n	8006fd6 <main+0x546>
 8006fd2:	07d8      	lsls	r0, r3, #31
 8006fd4:	d471      	bmi.n	80070ba <main+0x62a>
      mousekey_send();
#endif /* MOUSEKEY_ENABLE */
    }

    keyboard_task();
    chThdSleepMilliseconds(5);
 8006fd6:	200a      	movs	r0, #10
 8006fd8:	f7ff fb2a 	bl	8006630 <chThdSleep>
 8006fdc:	e7a3      	b.n	8006f26 <main+0x496>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8006fde:	7719      	strb	r1, [r3, #28]
 8006fe0:	e7fe      	b.n	8006fe0 <main+0x550>
__attribute__ ((weak)) void matrix_power_up(void) {}
__attribute__ ((weak)) void matrix_power_down(void) {}
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
 8006fe2:	f001 f9f5 	bl	80083d0 <matrix_scan>
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
 8006fe6:	783b      	ldrb	r3, [r7, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0a9      	beq.n	8006f40 <main+0x4b0>
  USB0->CTL |= USBx_CTL_RESUME;
  chThdSleepMilliseconds(15);
  USB0->CTL &= ~USBx_CTL_RESUME;
#endif /* KINETIS_USB_USE_USB0 */
#elif defined(STM32F0XX) || defined(STM32F1XX) /* K20x || KL2x */
  STM32_USB->CNTR |= CNTR_RESUME;
 8006fec:	4b4b      	ldr	r3, [pc, #300]	; (800711c <main+0x68c>)
 8006fee:	4a4b      	ldr	r2, [pc, #300]	; (800711c <main+0x68c>)
 8006ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  chThdSleepMilliseconds(15);
 8006ff2:	201e      	movs	r0, #30
  USB0->CTL |= USBx_CTL_RESUME;
  chThdSleepMilliseconds(15);
  USB0->CTL &= ~USBx_CTL_RESUME;
#endif /* KINETIS_USB_USE_USB0 */
#elif defined(STM32F0XX) || defined(STM32F1XX) /* K20x || KL2x */
  STM32_USB->CNTR |= CNTR_RESUME;
 8006ff4:	f043 0310 	orr.w	r3, r3, #16
 8006ff8:	6413      	str	r3, [r2, #64]	; 0x40
  chThdSleepMilliseconds(15);
 8006ffa:	f7ff fb19 	bl	8006630 <chThdSleep>
  STM32_USB->CNTR &= ~CNTR_RESUME;
 8006ffe:	4b47      	ldr	r3, [pc, #284]	; (800711c <main+0x68c>)
 8007000:	4a46      	ldr	r2, [pc, #280]	; (800711c <main+0x68c>)
 8007002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007004:	f023 0310 	bic.w	r3, r3, #16
 8007008:	6413      	str	r3, [r2, #64]	; 0x40
 800700a:	e799      	b.n	8006f40 <main+0x4b0>
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
 800700c:	4844      	ldr	r0, [pc, #272]	; (8007120 <main+0x690>)
 800700e:	e88d 1008 	stmia.w	sp, {r3, ip}
 8007012:	f000 f9d5 	bl	80073c0 <tfp_printf>
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
 8007016:	2100      	movs	r1, #0
 8007018:	4842      	ldr	r0, [pc, #264]	; (8007124 <main+0x694>)
 800701a:	f000 f9d1 	bl	80073c0 <tfp_printf>
 800701e:	4842      	ldr	r0, [pc, #264]	; (8007128 <main+0x698>)
 8007020:	f000 f9ce 	bl	80073c0 <tfp_printf>
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
 8007024:	f8dd c004 	ldr.w	ip, [sp, #4]
void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
 8007028:	4840      	ldr	r0, [pc, #256]	; (800712c <main+0x69c>)
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
 800702a:	f89c 1000 	ldrb.w	r1, [ip]



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
 800702e:	090a      	lsrs	r2, r1, #4
 8007030:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 8007034:	b2c9      	uxtb	r1, r1
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
 8007036:	f001 0233 	and.w	r2, r1, #51	; 0x33
 800703a:	0092      	lsls	r2, r2, #2
 800703c:	f001 01cc 	and.w	r1, r1, #204	; 0xcc
 8007040:	ea42 0291 	orr.w	r2, r2, r1, lsr #2
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
 8007044:	f002 0155 	and.w	r1, r2, #85	; 0x55
 8007048:	0049      	lsls	r1, r1, #1
 800704a:	f002 02aa 	and.w	r2, r2, #170	; 0xaa
    return bits;
}

uint16_t bitrev16(uint16_t bits)
{
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
 800704e:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
 8007052:	0209      	lsls	r1, r1, #8
 8007054:	f000 f9b4 	bl	80073c0 <tfp_printf>
        print("\n");
 8007058:	4835      	ldr	r0, [pc, #212]	; (8007130 <main+0x6a0>)
 800705a:	f000 f9b1 	bl	80073c0 <tfp_printf>
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
 800705e:	07f1      	lsls	r1, r6, #31
 8007060:	9b00      	ldr	r3, [sp, #0]
 8007062:	d583      	bpl.n	8006f6c <main+0x4dc>
                    action_exec((keyevent_t){
 8007064:	2100      	movs	r1, #0
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	f88d 3012 	strb.w	r3, [sp, #18]
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
 800706e:	f88d 1010 	strb.w	r1, [sp, #16]
 8007072:	f88d 1011 	strb.w	r1, [sp, #17]
 8007076:	2320      	movs	r3, #32
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007082:	f381 8811 	msr	BASEPRI, r1
 8007086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800708a:	b292      	uxth	r2, r2
 800708c:	fb03 f302 	mul.w	r3, r3, r2
 8007090:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 8007094:	fbab 2303 	umull	r2, r3, fp, r3
 8007098:	09db      	lsrs	r3, r3, #7
 800709a:	f043 0301 	orr.w	r3, r3, #1
 800709e:	f8ad 3014 	strh.w	r3, [sp, #20]
 80070a2:	ab04      	add	r3, sp, #16
 80070a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80070a8:	f001 f8fa 	bl	80082a0 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
 80070ac:	f899 3000 	ldrb.w	r3, [r9]
 80070b0:	f083 0301 	eor.w	r3, r3, #1
 80070b4:	f889 3000 	strb.w	r3, [r9]
 80070b8:	e77b      	b.n	8006fb2 <main+0x522>
    }
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 80070ba:	481e      	ldr	r0, [pc, #120]	; (8007134 <main+0x6a4>)
 80070bc:	9100      	str	r1, [sp, #0]
 80070be:	f000 f97f 	bl	80073c0 <tfp_printf>
 80070c2:	7833      	ldrb	r3, [r6, #0]
 80070c4:	07da      	lsls	r2, r3, #31
 80070c6:	d586      	bpl.n	8006fd6 <main+0x546>
 80070c8:	9900      	ldr	r1, [sp, #0]
 80070ca:	4816      	ldr	r0, [pc, #88]	; (8007124 <main+0x694>)
 80070cc:	f000 f978 	bl	80073c0 <tfp_printf>
 80070d0:	7833      	ldrb	r3, [r6, #0]
 80070d2:	07db      	lsls	r3, r3, #31
 80070d4:	f57f af7f 	bpl.w	8006fd6 <main+0x546>
 80070d8:	4815      	ldr	r0, [pc, #84]	; (8007130 <main+0x6a0>)
 80070da:	f000 f971 	bl	80073c0 <tfp_printf>
 80070de:	e77a      	b.n	8006fd6 <main+0x546>
 80070e0:	40010c00 	.word	0x40010c00
 80070e4:	20001450 	.word	0x20001450
 80070e8:	200013d4 	.word	0x200013d4
 80070ec:	08006a31 	.word	0x08006a31
 80070f0:	20001514 	.word	0x20001514
 80070f4:	08006721 	.word	0x08006721
 80070f8:	08008828 	.word	0x08008828
 80070fc:	2000159c 	.word	0x2000159c
 8007100:	20001510 	.word	0x20001510
 8007104:	20001218 	.word	0x20001218
 8007108:	0800883c 	.word	0x0800883c
 800710c:	20001478 	.word	0x20001478
 8007110:	08008850 	.word	0x08008850
 8007114:	20001268 	.word	0x20001268
 8007118:	200014fc 	.word	0x200014fc
 800711c:	40005c00 	.word	0x40005c00
 8007120:	08008854 	.word	0x08008854
 8007124:	0800886c 	.word	0x0800886c
 8007128:	0800888c 	.word	0x0800888c
 800712c:	08008874 	.word	0x08008874
 8007130:	0800891c 	.word	0x0800891c
 8007134:	0800887c 	.word	0x0800887c
 8007138:	200013fc 	.word	0x200013fc
 800713c:	20001410 	.word	0x20001410
 8007140:	2000151c 	.word	0x2000151c
 8007144:	20001594 	.word	0x20001594
 8007148:	20001470 	.word	0x20001470
 800714c:	10624dd3 	.word	0x10624dd3

08007150 <putchw>:
    *nump=num;
    return ch;
    }

static void putchw(void* putp,putcf putf,int n, char z, char* bf)
    {
 8007150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007154:	f8dd 9020 	ldr.w	r9, [sp, #32]
    char fc=z? '0' : ' ';
 8007158:	2b00      	cmp	r3, #0
    char ch;
    char* p=bf;
    while (*p++ && n > 0)
 800715a:	f899 3000 	ldrb.w	r3, [r9]
    *nump=num;
    return ch;
    }

static void putchw(void* putp,putcf putf,int n, char z, char* bf)
    {
 800715e:	4606      	mov	r6, r0
 8007160:	460f      	mov	r7, r1
    char fc=z? '0' : ' ';
 8007162:	bf14      	ite	ne
 8007164:	f04f 0830 	movne.w	r8, #48	; 0x30
 8007168:	f04f 0820 	moveq.w	r8, #32
    char ch;
    char* p=bf;
    while (*p++ && n > 0)
 800716c:	f109 0501 	add.w	r5, r9, #1
 8007170:	b1f3      	cbz	r3, 80071b0 <putchw+0x60>
 8007172:	2a00      	cmp	r2, #0
 8007174:	dd13      	ble.n	800719e <putchw+0x4e>
 8007176:	4629      	mov	r1, r5
 8007178:	e000      	b.n	800717c <putchw+0x2c>
 800717a:	b182      	cbz	r2, 800719e <putchw+0x4e>
 800717c:	f811 0b01 	ldrb.w	r0, [r1], #1
        n--;
 8007180:	3a01      	subs	r2, #1
static void putchw(void* putp,putcf putf,int n, char z, char* bf)
    {
    char fc=z? '0' : ' ';
    char ch;
    char* p=bf;
    while (*p++ && n > 0)
 8007182:	2800      	cmp	r0, #0
 8007184:	d1f9      	bne.n	800717a <putchw+0x2a>
        n--;
    while (n-- > 0) 
 8007186:	1e54      	subs	r4, r2, #1
 8007188:	b14a      	cbz	r2, 800719e <putchw+0x4e>
 800718a:	3c01      	subs	r4, #1
        putf(putp,fc);
 800718c:	4630      	mov	r0, r6
 800718e:	4641      	mov	r1, r8
 8007190:	47b8      	blx	r7
 8007192:	1c63      	adds	r3, r4, #1
    char fc=z? '0' : ' ';
    char ch;
    char* p=bf;
    while (*p++ && n > 0)
        n--;
    while (n-- > 0) 
 8007194:	2b00      	cmp	r3, #0
 8007196:	dcf8      	bgt.n	800718a <putchw+0x3a>
 8007198:	f899 3000 	ldrb.w	r3, [r9]
        putf(putp,fc);
    while ((ch= *bf++))
 800719c:	b163      	cbz	r3, 80071b8 <putchw+0x68>
        putf(putp,ch);
 800719e:	4619      	mov	r1, r3
 80071a0:	4630      	mov	r0, r6
 80071a2:	47b8      	blx	r7
    char* p=bf;
    while (*p++ && n > 0)
        n--;
    while (n-- > 0) 
        putf(putp,fc);
    while ((ch= *bf++))
 80071a4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1f8      	bne.n	800719e <putchw+0x4e>
 80071ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    char fc=z? '0' : ' ';
    char ch;
    char* p=bf;
    while (*p++ && n > 0)
        n--;
    while (n-- > 0) 
 80071b0:	2a00      	cmp	r2, #0
 80071b2:	f102 34ff 	add.w	r4, r2, #4294967295
 80071b6:	dce8      	bgt.n	800718a <putchw+0x3a>
 80071b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071bc:	f3af 8000 	nop.w

080071c0 <ui2a>:

static void ui2a(unsigned int num, unsigned int base, int uc,char * bf)
    {
    int n=0;
    unsigned int d=1;
    while (num/d >= base)
 80071c0:	4288      	cmp	r0, r1
    }

#endif

static void ui2a(unsigned int num, unsigned int base, int uc,char * bf)
    {
 80071c2:	b5f0      	push	{r4, r5, r6, r7, lr}
    int n=0;
    unsigned int d=1;
    while (num/d >= base)
 80071c4:	d333      	bcc.n	800722e <ui2a+0x6e>
 80071c6:	2401      	movs	r4, #1
        d*=base;        
 80071c8:	fb01 f404 	mul.w	r4, r1, r4

static void ui2a(unsigned int num, unsigned int base, int uc,char * bf)
    {
    int n=0;
    unsigned int d=1;
    while (num/d >= base)
 80071cc:	fbb0 f5f4 	udiv	r5, r0, r4
 80071d0:	428d      	cmp	r5, r1
 80071d2:	d2f9      	bcs.n	80071c8 <ui2a+0x8>
        d*=base;        
    while (d!=0) {
 80071d4:	b374      	cbz	r4, 8007234 <ui2a+0x74>
        int dgt = num / d;
        num%= d;
        d/=base;
        if (n || dgt>0 || d==0) {
 80071d6:	2600      	movs	r6, #0
 80071d8:	e00c      	b.n	80071f4 <ui2a+0x34>
            *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
 80071da:	2a00      	cmp	r2, #0
 80071dc:	bf14      	ite	ne
 80071de:	f04f 0e37 	movne.w	lr, #55	; 0x37
 80071e2:	f04f 0e57 	moveq.w	lr, #87	; 0x57
 80071e6:	4475      	add	r5, lr
 80071e8:	701d      	strb	r5, [r3, #0]
            ++n;
 80071ea:	3601      	adds	r6, #1
    {
    int n=0;
    unsigned int d=1;
    while (num/d >= base)
        d*=base;        
    while (d!=0) {
 80071ec:	b19c      	cbz	r4, 8007216 <ui2a+0x56>
        int dgt = num / d;
        num%= d;
        d/=base;
        if (n || dgt>0 || d==0) {
 80071ee:	463b      	mov	r3, r7
 80071f0:	fbb0 f5f4 	udiv	r5, r0, r4
    unsigned int d=1;
    while (num/d >= base)
        d*=base;        
    while (d!=0) {
        int dgt = num / d;
        num%= d;
 80071f4:	fb04 0015 	mls	r0, r4, r5, r0
        d/=base;
        if (n || dgt>0 || d==0) {
            *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
 80071f8:	1c5f      	adds	r7, r3, #1
    while (num/d >= base)
        d*=base;        
    while (d!=0) {
        int dgt = num / d;
        num%= d;
        d/=base;
 80071fa:	fbb4 f4f1 	udiv	r4, r4, r1
        if (n || dgt>0 || d==0) {
 80071fe:	b90e      	cbnz	r6, 8007204 <ui2a+0x44>
 8007200:	2d00      	cmp	r5, #0
 8007202:	dd0b      	ble.n	800721c <ui2a+0x5c>
            *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
 8007204:	2d09      	cmp	r5, #9
 8007206:	dce8      	bgt.n	80071da <ui2a+0x1a>
 8007208:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800720c:	4475      	add	r5, lr
 800720e:	701d      	strb	r5, [r3, #0]
            ++n;
 8007210:	3601      	adds	r6, #1
    {
    int n=0;
    unsigned int d=1;
    while (num/d >= base)
        d*=base;        
    while (d!=0) {
 8007212:	2c00      	cmp	r4, #0
 8007214:	d1eb      	bne.n	80071ee <ui2a+0x2e>
        if (n || dgt>0 || d==0) {
            *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
            ++n;
            }
        }
    *bf=0;
 8007216:	2300      	movs	r3, #0
 8007218:	703b      	strb	r3, [r7, #0]
 800721a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        d*=base;        
    while (d!=0) {
        int dgt = num / d;
        num%= d;
        d/=base;
        if (n || dgt>0 || d==0) {
 800721c:	b10c      	cbz	r4, 8007222 <ui2a+0x62>
 800721e:	461f      	mov	r7, r3
 8007220:	e7e5      	b.n	80071ee <ui2a+0x2e>
            *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
 8007222:	3530      	adds	r5, #48	; 0x30
 8007224:	701d      	strb	r5, [r3, #0]
 8007226:	1c5f      	adds	r7, r3, #1
            ++n;
            }
        }
    *bf=0;
 8007228:	2300      	movs	r3, #0
 800722a:	703b      	strb	r3, [r7, #0]
 800722c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800722e:	4605      	mov	r5, r0
#endif

static void ui2a(unsigned int num, unsigned int base, int uc,char * bf)
    {
    int n=0;
    unsigned int d=1;
 8007230:	2401      	movs	r4, #1
 8007232:	e7d0      	b.n	80071d6 <ui2a+0x16>
    while (num/d >= base)
        d*=base;        
    while (d!=0) {
 8007234:	461f      	mov	r7, r3
 8007236:	e7ee      	b.n	8007216 <ui2a+0x56>
 8007238:	f3af 8000 	nop.w
 800723c:	f3af 8000 	nop.w

08007240 <uli2a>:

static void uli2a(unsigned long int num, unsigned int base, int uc,char * bf)
    {
    int n=0;
    unsigned int d=1;
    while (num/d >= base)
 8007240:	4288      	cmp	r0, r1
#define PRINTF_LONG_SUPPORT

#ifdef PRINTF_LONG_SUPPORT

static void uli2a(unsigned long int num, unsigned int base, int uc,char * bf)
    {
 8007242:	b5f0      	push	{r4, r5, r6, r7, lr}
    int n=0;
    unsigned int d=1;
    while (num/d >= base)
 8007244:	d333      	bcc.n	80072ae <uli2a+0x6e>
 8007246:	2401      	movs	r4, #1
        d*=base;         
 8007248:	fb01 f404 	mul.w	r4, r1, r4

static void uli2a(unsigned long int num, unsigned int base, int uc,char * bf)
    {
    int n=0;
    unsigned int d=1;
    while (num/d >= base)
 800724c:	fbb0 f5f4 	udiv	r5, r0, r4
 8007250:	428d      	cmp	r5, r1
 8007252:	d2f9      	bcs.n	8007248 <uli2a+0x8>
        d*=base;         
    while (d!=0) {
 8007254:	b374      	cbz	r4, 80072b4 <uli2a+0x74>
        int dgt = num / d;
        num%=d;
        d/=base;
        if (n || dgt>0|| d==0) {
 8007256:	2600      	movs	r6, #0
 8007258:	e00c      	b.n	8007274 <uli2a+0x34>
            *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
 800725a:	2a00      	cmp	r2, #0
 800725c:	bf14      	ite	ne
 800725e:	f04f 0e37 	movne.w	lr, #55	; 0x37
 8007262:	f04f 0e57 	moveq.w	lr, #87	; 0x57
 8007266:	4475      	add	r5, lr
 8007268:	701d      	strb	r5, [r3, #0]
            ++n;
 800726a:	3601      	adds	r6, #1
    {
    int n=0;
    unsigned int d=1;
    while (num/d >= base)
        d*=base;         
    while (d!=0) {
 800726c:	b19c      	cbz	r4, 8007296 <uli2a+0x56>
        int dgt = num / d;
        num%=d;
        d/=base;
        if (n || dgt>0|| d==0) {
 800726e:	463b      	mov	r3, r7
 8007270:	fbb0 f5f4 	udiv	r5, r0, r4
    unsigned int d=1;
    while (num/d >= base)
        d*=base;         
    while (d!=0) {
        int dgt = num / d;
        num%=d;
 8007274:	fb04 0015 	mls	r0, r4, r5, r0
        d/=base;
        if (n || dgt>0|| d==0) {
            *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
 8007278:	1c5f      	adds	r7, r3, #1
    while (num/d >= base)
        d*=base;         
    while (d!=0) {
        int dgt = num / d;
        num%=d;
        d/=base;
 800727a:	fbb4 f4f1 	udiv	r4, r4, r1
        if (n || dgt>0|| d==0) {
 800727e:	b90e      	cbnz	r6, 8007284 <uli2a+0x44>
 8007280:	2d00      	cmp	r5, #0
 8007282:	dd0b      	ble.n	800729c <uli2a+0x5c>
            *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
 8007284:	2d09      	cmp	r5, #9
 8007286:	dce8      	bgt.n	800725a <uli2a+0x1a>
 8007288:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800728c:	4475      	add	r5, lr
 800728e:	701d      	strb	r5, [r3, #0]
            ++n;
 8007290:	3601      	adds	r6, #1
    {
    int n=0;
    unsigned int d=1;
    while (num/d >= base)
        d*=base;         
    while (d!=0) {
 8007292:	2c00      	cmp	r4, #0
 8007294:	d1eb      	bne.n	800726e <uli2a+0x2e>
        if (n || dgt>0|| d==0) {
            *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
            ++n;
            }
        }
    *bf=0;
 8007296:	2300      	movs	r3, #0
 8007298:	703b      	strb	r3, [r7, #0]
 800729a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        d*=base;         
    while (d!=0) {
        int dgt = num / d;
        num%=d;
        d/=base;
        if (n || dgt>0|| d==0) {
 800729c:	b10c      	cbz	r4, 80072a2 <uli2a+0x62>
 800729e:	461f      	mov	r7, r3
 80072a0:	e7e5      	b.n	800726e <uli2a+0x2e>
            *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
 80072a2:	3530      	adds	r5, #48	; 0x30
 80072a4:	701d      	strb	r5, [r3, #0]
 80072a6:	1c5f      	adds	r7, r3, #1
            ++n;
            }
        }
    *bf=0;
 80072a8:	2300      	movs	r3, #0
 80072aa:	703b      	strb	r3, [r7, #0]
 80072ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072ae:	4605      	mov	r5, r0
#ifdef PRINTF_LONG_SUPPORT

static void uli2a(unsigned long int num, unsigned int base, int uc,char * bf)
    {
    int n=0;
    unsigned int d=1;
 80072b0:	2401      	movs	r4, #1
 80072b2:	e7d0      	b.n	8007256 <uli2a+0x16>
    while (num/d >= base)
        d*=base;         
    while (d!=0) {
 80072b4:	461f      	mov	r7, r3
 80072b6:	e7ee      	b.n	8007296 <uli2a+0x56>
 80072b8:	f3af 8000 	nop.w
 80072bc:	f3af 8000 	nop.w

080072c0 <chTMStartMeasurementX.constprop.26>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80072c0:	4b01      	ldr	r3, [pc, #4]	; (80072c8 <chTMStartMeasurementX.constprop.26+0x8>)
 80072c2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80072c4:	6083      	str	r3, [r0, #8]
 80072c6:	4770      	bx	lr
 80072c8:	e0001000 	.word	0xe0001000
 80072cc:	f3af 8000 	nop.w

080072d0 <_usb_reset.constprop.15>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
 80072d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 80072d4:	4c1c      	ldr	r4, [pc, #112]	; (8007348 <_usb_reset.constprop.15+0x78>)

  /* Resetting internal state.*/
  usbp->status        = 0;
 80072d6:	2300      	movs	r3, #0
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 80072d8:	2202      	movs	r2, #2
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 80072da:	4619      	mov	r1, r3

  /* State transition.*/
  usbp->state         = USB_READY;

  /* Resetting internal state.*/
  usbp->status        = 0;
 80072dc:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
  usbp->address       = 0;
 80072e0:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
  usbp->configuration = 0;
 80072e4:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
  usbp->transmitting  = 0;
 80072e8:	8123      	strh	r3, [r4, #8]
  usbp->receiving     = 0;
 80072ea:	8163      	strh	r3, [r4, #10]
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 80072ec:	7022      	strb	r2, [r4, #0]
 80072ee:	f104 0308 	add.w	r3, r4, #8
 80072f2:	f104 0228 	add.w	r2, r4, #40	; 0x28
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 80072f6:	f843 1f04 	str.w	r1, [r3, #4]!
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 80072fa:	4293      	cmp	r3, r2
    usbp->epc[i] = NULL;
 80072fc:	f04f 0500 	mov.w	r5, #0
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8007300:	d1f9      	bne.n	80072f6 <_usb_reset.constprop.15+0x26>
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8007302:	6862      	ldr	r2, [r4, #4]
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 8007304:	4b11      	ldr	r3, [pc, #68]	; (800734c <_usb_reset.constprop.15+0x7c>)
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8007306:	68d2      	ldr	r2, [r2, #12]
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
  STM32_USB->DADDR  = DADDR_EF;
 8007308:	2180      	movs	r1, #128	; 0x80
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
 800730a:	42aa      	cmp	r2, r5
 800730c:	bf0c      	ite	eq
 800730e:	f44f 471c 	moveq.w	r7, #39936	; 0x9c00
 8007312:	f44f 471e 	movne.w	r7, #40448	; 0x9e00
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 8007316:	2240      	movs	r2, #64	; 0x40

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 8007318:	4e0d      	ldr	r6, [pc, #52]	; (8007350 <_usb_reset.constprop.15+0x80>)
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 800731a:	651d      	str	r5, [r3, #80]	; 0x50
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 800731c:	480a      	ldr	r0, [pc, #40]	; (8007348 <_usb_reset.constprop.15+0x78>)
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
 800731e:	645d      	str	r5, [r3, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 8007320:	64d9      	str	r1, [r3, #76]	; 0x4c
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
  STM32_USB->CNTR = cntr;
 8007322:	641f      	str	r7, [r3, #64]	; 0x40
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 8007324:	4629      	mov	r1, r5
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 8007326:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    usbp->epc[i] = NULL;
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800732a:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 800732e:	60e6      	str	r6, [r4, #12]
  usb_lld_init_endpoint(usbp, 0);
 8007330:	f7fe f986 	bl	8005640 <usb_lld_init_endpoint>

  /* Low level reset.*/
  usb_lld_reset(usbp);

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8007334:	6863      	ldr	r3, [r4, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	b123      	cbz	r3, 8007344 <_usb_reset.constprop.15+0x74>
 800733a:	4629      	mov	r1, r5
}
 800733c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  /* Low level reset.*/
  usb_lld_reset(usbp);

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8007340:	4801      	ldr	r0, [pc, #4]	; (8007348 <_usb_reset.constprop.15+0x78>)
 8007342:	4718      	bx	r3
 8007344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007348:	20001478 	.word	0x20001478
 800734c:	40005c00 	.word	0x40005c00
 8007350:	080088b0 	.word	0x080088b0
 8007354:	f3af 8000 	nop.w
 8007358:	f3af 8000 	nop.w
 800735c:	f3af 8000 	nop.w

08007360 <usbStartReceiveI.constprop.9>:
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 8007360:	8943      	ldrh	r3, [r0, #10]
 8007362:	f013 0101 	ands.w	r1, r3, #1
 8007366:	d001      	beq.n	800736c <usbStartReceiveI.constprop.9+0xc>
    return true;
 8007368:	2001      	movs	r0, #1
 800736a:	4770      	bx	lr
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {
 800736c:	b410      	push	{r4}
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 800736e:	4c0a      	ldr	r4, [pc, #40]	; (8007398 <usbStartReceiveI.constprop.9+0x38>)

  if (usbGetReceiveStatusI(usbp, ep)) {
    return true;
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8007370:	f043 0201 	orr.w	r2, r3, #1
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	8142      	strh	r2, [r0, #10]
 8007378:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800737c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007380:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8007384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  usb_lld_start_out(usbp, ep);
  return false;
 800738c:	4608      	mov	r0, r1
 800738e:	6023      	str	r3, [r4, #0]
}
 8007390:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	40005c00 	.word	0x40005c00
 800739c:	f3af 8000 	nop.w

080073a0 <usb_lld_prepare_receive.constprop.6>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80073a0:	68c1      	ldr	r1, [r0, #12]
 80073a2:	698a      	ldr	r2, [r1, #24]

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 80073a4:	6853      	ldr	r3, [r2, #4]
 80073a6:	b133      	cbz	r3, 80073b6 <usb_lld_prepare_receive.constprop.6+0x16>
    osp->rxpkts = 1;
  else
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 80073a8:	8a49      	ldrh	r1, [r1, #18]
 80073aa:	3b01      	subs	r3, #1
 80073ac:	440b      	add	r3, r1
 80073ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80073b2:	8213      	strh	r3, [r2, #16]
 80073b4:	4770      	bx	lr
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
    osp->rxpkts = 1;
 80073b6:	2301      	movs	r3, #1
 80073b8:	8213      	strh	r3, [r2, #16]
 80073ba:	4770      	bx	lr
 80073bc:	f3af 8000 	nop.w

080073c0 <tfp_printf>:
    stdout_putf=putf;
    stdout_putp=putp;
    }

void tfp_printf(char *fmt, ...)
    {
 80073c0:	b40f      	push	{r0, r1, r2, r3}
 80073c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	ae0e      	add	r6, sp, #56	; 0x38
    va_list va;
    va_start(va,fmt);
    tfp_format(stdout_putp,stdout_putf,fmt,va);
 80073ca:	4a78      	ldr	r2, [pc, #480]	; (80075ac <tfp_printf+0x1ec>)
 80073cc:	4b78      	ldr	r3, [pc, #480]	; (80075b0 <tfp_printf+0x1f0>)
    stdout_putf=putf;
    stdout_putp=putp;
    }

void tfp_printf(char *fmt, ...)
    {
 80073ce:	f856 ab04 	ldr.w	sl, [r6], #4
    va_list va;
    va_start(va,fmt);
    tfp_format(stdout_putp,stdout_putf,fmt,va);
 80073d2:	f8d2 8000 	ldr.w	r8, [r2]
 80073d6:	681f      	ldr	r7, [r3, #0]
    }

void tfp_printf(char *fmt, ...)
    {
    va_list va;
    va_start(va,fmt);
 80073d8:	9602      	str	r6, [sp, #8]
#ifdef  PRINTF_LONG_SUPPORT
                    if (lng)
                        uli2a(va_arg(va, unsigned long int),10,0,bf);
                    else
#endif
                    ui2a(va_arg(va, unsigned int),10,0,bf);
 80073da:	ac03      	add	r4, sp, #12
    char bf[12];
    
    char ch;


    while ((ch=*(fmt++))) {
 80073dc:	f89a 1000 	ldrb.w	r1, [sl]
 80073e0:	b149      	cbz	r1, 80073f6 <tfp_printf+0x36>
        if (ch!='%') 
 80073e2:	2925      	cmp	r1, #37	; 0x25
 80073e4:	d00c      	beq.n	8007400 <tfp_printf+0x40>
            putf(putp,ch);
 80073e6:	4640      	mov	r0, r8
    char bf[12];
    
    char ch;


    while ((ch=*(fmt++))) {
 80073e8:	f10a 0a01 	add.w	sl, sl, #1
        if (ch!='%') 
            putf(putp,ch);
 80073ec:	47b8      	blx	r7
    char bf[12];
    
    char ch;


    while ((ch=*(fmt++))) {
 80073ee:	f89a 1000 	ldrb.w	r1, [sl]
 80073f2:	2900      	cmp	r1, #0
 80073f4:	d1f5      	bne.n	80073e2 <tfp_printf+0x22>
    {
    va_list va;
    va_start(va,fmt);
    tfp_format(stdout_putp,stdout_putf,fmt,va);
    va_end(va);
    }
 80073f6:	b006      	add	sp, #24
 80073f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073fc:	b004      	add	sp, #16
 80073fe:	4770      	bx	lr
            char lz=0;
#ifdef  PRINTF_LONG_SUPPORT
            char lng=0;
#endif
            int w=0;
            ch=*(fmt++);
 8007400:	f89a 3001 	ldrb.w	r3, [sl, #1]
            if (ch=='0') {
 8007404:	2b30      	cmp	r3, #48	; 0x30
 8007406:	d040      	beq.n	800748a <tfp_printf+0xca>
            char lz=0;
#ifdef  PRINTF_LONG_SUPPORT
            char lng=0;
#endif
            int w=0;
            ch=*(fmt++);
 8007408:	f10a 0e02 	add.w	lr, sl, #2

    while ((ch=*(fmt++))) {
        if (ch!='%') 
            putf(putp,ch);
        else {
            char lz=0;
 800740c:	f04f 0900 	mov.w	r9, #0
            ch=*(fmt++);
            if (ch=='0') {
                ch=*(fmt++);
                lz=1;
                }
            if (ch>='0' && ch<='9') {
 8007410:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007414:	b2d1      	uxtb	r1, r2
 8007416:	2909      	cmp	r1, #9
 8007418:	f04f 0500 	mov.w	r5, #0
 800741c:	d927      	bls.n	800746e <tfp_printf+0xae>
                ch=a2i(ch,&fmt,10,&w);
                }
#ifdef  PRINTF_LONG_SUPPORT
            if (ch=='l') {
 800741e:	2b6c      	cmp	r3, #108	; 0x6c
 8007420:	d03a      	beq.n	8007498 <tfp_printf+0xd8>
                ch=*(fmt++);
                lng=1;
            }
#endif
            switch (ch) {
 8007422:	2b63      	cmp	r3, #99	; 0x63
 8007424:	d069      	beq.n	80074fa <tfp_printf+0x13a>
 8007426:	d94d      	bls.n	80074c4 <tfp_printf+0x104>
 8007428:	2b73      	cmp	r3, #115	; 0x73
 800742a:	d054      	beq.n	80074d6 <tfp_printf+0x116>
 800742c:	d96c      	bls.n	8007508 <tfp_printf+0x148>
 800742e:	2b75      	cmp	r3, #117	; 0x75
 8007430:	d177      	bne.n	8007522 <tfp_printf+0x162>
#ifdef  PRINTF_LONG_SUPPORT
                    if (lng)
                        uli2a(va_arg(va, unsigned long int),10,0,bf);
                    else
#endif
                    ui2a(va_arg(va, unsigned int),10,0,bf);
 8007432:	f106 0c04 	add.w	ip, r6, #4
 8007436:	6830      	ldr	r0, [r6, #0]
 8007438:	210a      	movs	r1, #10
 800743a:	2200      	movs	r2, #0
 800743c:	4623      	mov	r3, r4
            if (ch=='l') {
                ch=*(fmt++);
                lng=1;
            }
#endif
            switch (ch) {
 800743e:	46f2      	mov	sl, lr
#ifdef  PRINTF_LONG_SUPPORT
                    if (lng)
                        uli2a(va_arg(va, unsigned long int),10,0,bf);
                    else
#endif
                    ui2a(va_arg(va, unsigned int),10,0,bf);
 8007440:	4666      	mov	r6, ip
 8007442:	f7ff febd 	bl	80071c0 <ui2a>
                    if (lng)
                        uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
                    else
#endif
                    ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
                    putchw(putp,putf,w,lz,bf);
 8007446:	9400      	str	r4, [sp, #0]
 8007448:	462a      	mov	r2, r5
 800744a:	464b      	mov	r3, r9
 800744c:	4640      	mov	r0, r8
 800744e:	4639      	mov	r1, r7
 8007450:	f7ff fe7e 	bl	8007150 <putchw>
 8007454:	e7c2      	b.n	80073dc <tfp_printf+0x1c>
static int a2d(char ch)
    {
    if (ch>='0' && ch<='9') 
        return ch-'0';
    else if (ch>='a' && ch<='f')
        return ch-'a'+10;
 8007456:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
    {
    char* p= *src;
    int num=0;
    int digit;
    while ((digit=a2d(ch))>=0) {
        if (digit>base) break;
 800745a:	2a0a      	cmp	r2, #10
 800745c:	dcdf      	bgt.n	800741e <tfp_printf+0x5e>
        num=num*base+digit;
        ch=*p++;
 800745e:	f81e 3b01 	ldrb.w	r3, [lr], #1
    char* p= *src;
    int num=0;
    int digit;
    while ((digit=a2d(ch))>=0) {
        if (digit>base) break;
        num=num*base+digit;
 8007462:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8007466:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 800746a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ui2a(num,10,0,bf);
    }

static int a2d(char ch)
    {
    if (ch>='0' && ch<='9') 
 800746e:	b2d1      	uxtb	r1, r2
 8007470:	2909      	cmp	r1, #9
        return ch-'0';
    else if (ch>='a' && ch<='f')
 8007472:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
    ui2a(num,10,0,bf);
    }

static int a2d(char ch)
    {
    if (ch>='0' && ch<='9') 
 8007476:	d9f2      	bls.n	800745e <tfp_printf+0x9e>
        return ch-'0';
    else if (ch>='a' && ch<='f')
 8007478:	2805      	cmp	r0, #5
        return ch-'a'+10;
    else if (ch>='A' && ch<='F')
 800747a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41

static int a2d(char ch)
    {
    if (ch>='0' && ch<='9') 
        return ch-'0';
    else if (ch>='a' && ch<='f')
 800747e:	d9ea      	bls.n	8007456 <tfp_printf+0x96>
        return ch-'a'+10;
    else if (ch>='A' && ch<='F')
 8007480:	2a05      	cmp	r2, #5
 8007482:	d8cc      	bhi.n	800741e <tfp_printf+0x5e>
        return ch-'A'+10;
 8007484:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
 8007488:	e7e7      	b.n	800745a <tfp_printf+0x9a>
            char lng=0;
#endif
            int w=0;
            ch=*(fmt++);
            if (ch=='0') {
                ch=*(fmt++);
 800748a:	f89a 3002 	ldrb.w	r3, [sl, #2]
 800748e:	f10a 0e03 	add.w	lr, sl, #3
                lz=1;
 8007492:	f04f 0901 	mov.w	r9, #1
 8007496:	e7bb      	b.n	8007410 <tfp_printf+0x50>
            if (ch>='0' && ch<='9') {
                ch=a2i(ch,&fmt,10,&w);
                }
#ifdef  PRINTF_LONG_SUPPORT
            if (ch=='l') {
                ch=*(fmt++);
 8007498:	f89e 2000 	ldrb.w	r2, [lr]
 800749c:	f10e 0a01 	add.w	sl, lr, #1
                lng=1;
            }
#endif
            switch (ch) {
 80074a0:	2a63      	cmp	r2, #99	; 0x63
 80074a2:	d029      	beq.n	80074f8 <tfp_printf+0x138>
 80074a4:	d94c      	bls.n	8007540 <tfp_printf+0x180>
 80074a6:	2a73      	cmp	r2, #115	; 0x73
 80074a8:	d014      	beq.n	80074d4 <tfp_printf+0x114>
 80074aa:	d964      	bls.n	8007576 <tfp_printf+0x1b6>
 80074ac:	2a75      	cmp	r2, #117	; 0x75
 80074ae:	d153      	bne.n	8007558 <tfp_printf+0x198>
                case 0: 
                    goto abort;
                case 'u' : {
#ifdef  PRINTF_LONG_SUPPORT
                    if (lng)
                        uli2a(va_arg(va, unsigned long int),10,0,bf);
 80074b0:	f106 0e04 	add.w	lr, r6, #4
 80074b4:	6830      	ldr	r0, [r6, #0]
 80074b6:	210a      	movs	r1, #10
 80074b8:	2200      	movs	r2, #0
 80074ba:	4623      	mov	r3, r4
 80074bc:	4676      	mov	r6, lr
 80074be:	f7ff febf 	bl	8007240 <uli2a>
 80074c2:	e7c0      	b.n	8007446 <tfp_printf+0x86>
            if (ch=='l') {
                ch=*(fmt++);
                lng=1;
            }
#endif
            switch (ch) {
 80074c4:	2b25      	cmp	r3, #37	; 0x25
 80074c6:	d012      	beq.n	80074ee <tfp_printf+0x12e>
 80074c8:	2b58      	cmp	r3, #88	; 0x58
 80074ca:	d02c      	beq.n	8007526 <tfp_printf+0x166>
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d092      	beq.n	80073f6 <tfp_printf+0x36>
 80074d0:	46f2      	mov	sl, lr
 80074d2:	e783      	b.n	80073dc <tfp_printf+0x1c>
            if (ch>='0' && ch<='9') {
                ch=a2i(ch,&fmt,10,&w);
                }
#ifdef  PRINTF_LONG_SUPPORT
            if (ch=='l') {
                ch=*(fmt++);
 80074d4:	46d6      	mov	lr, sl
                    break;
                case 'c' : 
                    putf(putp,(char)(va_arg(va, int)));
                    break;
                case 's' : 
                    putchw(putp,putf,w,0,va_arg(va, char*));
 80074d6:	6833      	ldr	r3, [r6, #0]
 80074d8:	462a      	mov	r2, r5
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	4640      	mov	r0, r8
 80074de:	4639      	mov	r1, r7
 80074e0:	2300      	movs	r3, #0
 80074e2:	3604      	adds	r6, #4
 80074e4:	46f2      	mov	sl, lr
 80074e6:	f7ff fe33 	bl	8007150 <putchw>
 80074ea:	e777      	b.n	80073dc <tfp_printf+0x1c>
            if (ch>='0' && ch<='9') {
                ch=a2i(ch,&fmt,10,&w);
                }
#ifdef  PRINTF_LONG_SUPPORT
            if (ch=='l') {
                ch=*(fmt++);
 80074ec:	46d6      	mov	lr, sl
                    break;
                case 's' : 
                    putchw(putp,putf,w,0,va_arg(va, char*));
                    break;
                case '%' :
                    putf(putp,ch);
 80074ee:	4640      	mov	r0, r8
 80074f0:	2125      	movs	r1, #37	; 0x25
 80074f2:	46f2      	mov	sl, lr
 80074f4:	47b8      	blx	r7
 80074f6:	e771      	b.n	80073dc <tfp_printf+0x1c>
            if (ch>='0' && ch<='9') {
                ch=a2i(ch,&fmt,10,&w);
                }
#ifdef  PRINTF_LONG_SUPPORT
            if (ch=='l') {
                ch=*(fmt++);
 80074f8:	46d6      	mov	lr, sl
#endif
                    ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
                    putchw(putp,putf,w,lz,bf);
                    break;
                case 'c' : 
                    putf(putp,(char)(va_arg(va, int)));
 80074fa:	1d33      	adds	r3, r6, #4
 80074fc:	7831      	ldrb	r1, [r6, #0]
 80074fe:	4640      	mov	r0, r8
 8007500:	46f2      	mov	sl, lr
 8007502:	461e      	mov	r6, r3
 8007504:	47b8      	blx	r7
 8007506:	e769      	b.n	80073dc <tfp_printf+0x1c>
            if (ch=='l') {
                ch=*(fmt++);
                lng=1;
            }
#endif
            switch (ch) {
 8007508:	2b64      	cmp	r3, #100	; 0x64
 800750a:	d1e1      	bne.n	80074d0 <tfp_printf+0x110>
#ifdef  PRINTF_LONG_SUPPORT
                    if (lng)
                        li2a(va_arg(va, unsigned long int),bf);
                    else
#endif
                    i2a(va_arg(va, int),bf);
 800750c:	6830      	ldr	r0, [r6, #0]
 800750e:	3604      	adds	r6, #4
    *bf=0;
    }

static void i2a (int num, char * bf)
    {
    if (num<0) {
 8007510:	2800      	cmp	r0, #0
 8007512:	db44      	blt.n	800759e <tfp_printf+0x1de>
 8007514:	4623      	mov	r3, r4
        num=-num;
        *bf++ = '-';
        }
    ui2a(num,10,0,bf);
 8007516:	210a      	movs	r1, #10
 8007518:	2200      	movs	r2, #0
 800751a:	46f2      	mov	sl, lr
 800751c:	f7ff fe50 	bl	80071c0 <ui2a>
 8007520:	e791      	b.n	8007446 <tfp_printf+0x86>
            if (ch=='l') {
                ch=*(fmt++);
                lng=1;
            }
#endif
            switch (ch) {
 8007522:	2b78      	cmp	r3, #120	; 0x78
 8007524:	d1d4      	bne.n	80074d0 <tfp_printf+0x110>
#ifdef  PRINTF_LONG_SUPPORT
                    if (lng)
                        uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
                    else
#endif
                    ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 8007526:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800752a:	fab2 f282 	clz	r2, r2
 800752e:	6830      	ldr	r0, [r6, #0]
 8007530:	0952      	lsrs	r2, r2, #5
 8007532:	2110      	movs	r1, #16
 8007534:	4623      	mov	r3, r4
 8007536:	3604      	adds	r6, #4
 8007538:	46f2      	mov	sl, lr
 800753a:	f7ff fe41 	bl	80071c0 <ui2a>
 800753e:	e782      	b.n	8007446 <tfp_printf+0x86>
            if (ch=='l') {
                ch=*(fmt++);
                lng=1;
            }
#endif
            switch (ch) {
 8007540:	2a25      	cmp	r2, #37	; 0x25
 8007542:	d0d3      	beq.n	80074ec <tfp_printf+0x12c>
 8007544:	2a58      	cmp	r2, #88	; 0x58
 8007546:	d00a      	beq.n	800755e <tfp_printf+0x19e>
 8007548:	2a00      	cmp	r2, #0
 800754a:	f47f af47 	bne.w	80073dc <tfp_printf+0x1c>
    {
    va_list va;
    va_start(va,fmt);
    tfp_format(stdout_putp,stdout_putf,fmt,va);
    va_end(va);
    }
 800754e:	b006      	add	sp, #24
 8007550:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007554:	b004      	add	sp, #16
 8007556:	4770      	bx	lr
            if (ch=='l') {
                ch=*(fmt++);
                lng=1;
            }
#endif
            switch (ch) {
 8007558:	2a78      	cmp	r2, #120	; 0x78
 800755a:	f47f af3f 	bne.w	80073dc <tfp_printf+0x1c>
                    break;
                    }
                case 'x': case 'X' : 
#ifdef  PRINTF_LONG_SUPPORT
                    if (lng)
                        uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
 800755e:	f1a2 0258 	sub.w	r2, r2, #88	; 0x58
 8007562:	fab2 f282 	clz	r2, r2
 8007566:	6830      	ldr	r0, [r6, #0]
 8007568:	0952      	lsrs	r2, r2, #5
 800756a:	2110      	movs	r1, #16
 800756c:	4623      	mov	r3, r4
 800756e:	3604      	adds	r6, #4
 8007570:	f7ff fe66 	bl	8007240 <uli2a>
 8007574:	e767      	b.n	8007446 <tfp_printf+0x86>
            if (ch=='l') {
                ch=*(fmt++);
                lng=1;
            }
#endif
            switch (ch) {
 8007576:	2a64      	cmp	r2, #100	; 0x64
 8007578:	f47f af30 	bne.w	80073dc <tfp_printf+0x1c>
 800757c:	6830      	ldr	r0, [r6, #0]
                    break;
                    }
                case 'd' :  {
#ifdef  PRINTF_LONG_SUPPORT
                    if (lng)
                        li2a(va_arg(va, unsigned long int),bf);
 800757e:	3604      	adds	r6, #4
    *bf=0;
    }

static void li2a (long num, char * bf)
    {
    if (num<0) {
 8007580:	2800      	cmp	r0, #0
 8007582:	db05      	blt.n	8007590 <tfp_printf+0x1d0>
 8007584:	4623      	mov	r3, r4
        num=-num;
        *bf++ = '-';
        }
    uli2a(num,10,0,bf);
 8007586:	210a      	movs	r1, #10
 8007588:	2200      	movs	r2, #0
 800758a:	f7ff fe59 	bl	8007240 <uli2a>
 800758e:	e75a      	b.n	8007446 <tfp_printf+0x86>

static void li2a (long num, char * bf)
    {
    if (num<0) {
        num=-num;
        *bf++ = '-';
 8007590:	232d      	movs	r3, #45	; 0x2d
 8007592:	f88d 300c 	strb.w	r3, [sp, #12]
    }

static void li2a (long num, char * bf)
    {
    if (num<0) {
        num=-num;
 8007596:	4240      	negs	r0, r0
        *bf++ = '-';
 8007598:	f10d 030d 	add.w	r3, sp, #13
 800759c:	e7f3      	b.n	8007586 <tfp_printf+0x1c6>

static void i2a (int num, char * bf)
    {
    if (num<0) {
        num=-num;
        *bf++ = '-';
 800759e:	232d      	movs	r3, #45	; 0x2d
 80075a0:	f88d 300c 	strb.w	r3, [sp, #12]
    }

static void i2a (int num, char * bf)
    {
    if (num<0) {
        num=-num;
 80075a4:	4240      	negs	r0, r0
        *bf++ = '-';
 80075a6:	f10d 030d 	add.w	r3, sp, #13
 80075aa:	e7b4      	b.n	8007516 <tfp_printf+0x156>
 80075ac:	2000151c 	.word	0x2000151c
 80075b0:	20001514 	.word	0x20001514
 80075b4:	f3af 8000 	nop.w
 80075b8:	f3af 8000 	nop.w
 80075bc:	f3af 8000 	nop.w

080075c0 <del_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
void del_mods(uint8_t mods) { real_mods &= ~mods; }
 80075c0:	4a02      	ldr	r2, [pc, #8]	; (80075cc <del_mods+0xc>)
 80075c2:	7813      	ldrb	r3, [r2, #0]
 80075c4:	ea23 0000 	bic.w	r0, r3, r0
 80075c8:	7010      	strb	r0, [r2, #0]
 80075ca:	4770      	bx	lr
 80075cc:	20001519 	.word	0x20001519

080075d0 <add_mods>:
}


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
 80075d0:	4a02      	ldr	r2, [pc, #8]	; (80075dc <add_mods+0xc>)
 80075d2:	7813      	ldrb	r3, [r2, #0]
 80075d4:	4318      	orrs	r0, r3
 80075d6:	7010      	strb	r0, [r2, #0]
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	20001519 	.word	0x20001519

080075e0 <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
 80075e0:	4b04      	ldr	r3, [pc, #16]	; (80075f4 <clear_keys+0x14>)
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
 80075e2:	2100      	movs	r1, #0
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f103 020f 	add.w	r2, r3, #15
 80075ea:	f803 1f01 	strb.w	r1, [r3, #1]!
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d1fb      	bne.n	80075ea <clear_keys+0xa>
        keyboard_report->raw[i] = 0;
    }
}
 80075f2:	4770      	bx	lr
 80075f4:	2000122c 	.word	0x2000122c
 80075f8:	f3af 8000 	nop.w
 80075fc:	f3af 8000 	nop.w

08007600 <send_keyboard_report>:
static int16_t oneshot_time = 0;
#endif
#endif


void send_keyboard_report(void) {
 8007600:	b570      	push	{r4, r5, r6, lr}
    keyboard_report->mods  = real_mods;
 8007602:	4a22      	ldr	r2, [pc, #136]	; (800768c <send_keyboard_report+0x8c>)
 8007604:	4b22      	ldr	r3, [pc, #136]	; (8007690 <send_keyboard_report+0x90>)
 8007606:	6814      	ldr	r4, [r2, #0]
 8007608:	781a      	ldrb	r2, [r3, #0]
    keyboard_report->mods |= weak_mods;
 800760a:	4b22      	ldr	r3, [pc, #136]	; (8007694 <send_keyboard_report+0x94>)
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
 800760c:	7022      	strb	r2, [r4, #0]
    keyboard_report->mods |= weak_mods;
 800760e:	781b      	ldrb	r3, [r3, #0]
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
 8007610:	4e21      	ldr	r6, [pc, #132]	; (8007698 <send_keyboard_report+0x98>)
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    keyboard_report->mods |= weak_mods;
 8007612:	431a      	orrs	r2, r3
 8007614:	7022      	strb	r2, [r4, #0]
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
 8007616:	7831      	ldrb	r1, [r6, #0]
 8007618:	b179      	cbz	r1, 800763a <send_keyboard_report+0x3a>
 800761a:	4623      	mov	r3, r4
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
 800761c:	430a      	orrs	r2, r1
 800761e:	7022      	strb	r2, [r4, #0]
 8007620:	f104 050f 	add.w	r5, r4, #15
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
 8007624:	2100      	movs	r1, #0
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
 8007626:	f813 2f01 	ldrb.w	r2, [r3, #1]!
            cnt++;
 800762a:	1c48      	adds	r0, r1, #1
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
 800762c:	b102      	cbz	r2, 8007630 <send_keyboard_report+0x30>
            cnt++;
 800762e:	b2c1      	uxtb	r1, r0
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 8007630:	42ab      	cmp	r3, r5
 8007632:	d1f8      	bne.n	8007626 <send_keyboard_report+0x26>
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
        if (has_anykey()) {
 8007634:	b109      	cbz	r1, 800763a <send_keyboard_report+0x3a>
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
 8007636:	2300      	movs	r3, #0
 8007638:	7033      	strb	r3, [r6, #0]
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    if (!driver) return;
 800763a:	4b18      	ldr	r3, [pc, #96]	; (800769c <send_keyboard_report+0x9c>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	b183      	cbz	r3, 8007662 <send_keyboard_report+0x62>
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
 8007640:	4e17      	ldr	r6, [pc, #92]	; (80076a0 <send_keyboard_report+0xa0>)
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    if (!driver) return;
    (*driver->send_keyboard)(report);
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	4620      	mov	r0, r4
 8007646:	4798      	blx	r3

    if (debug_keyboard) {
 8007648:	7833      	ldrb	r3, [r6, #0]
 800764a:	075a      	lsls	r2, r3, #29
 800764c:	d509      	bpl.n	8007662 <send_keyboard_report+0x62>
        dprint("keyboard_report: ");
 800764e:	f013 0301 	ands.w	r3, r3, #1
 8007652:	d114      	bne.n	800767e <send_keyboard_report+0x7e>
 8007654:	f104 0510 	add.w	r5, r4, #16
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
 8007658:	b923      	cbnz	r3, 8007664 <send_keyboard_report+0x64>
 800765a:	3401      	adds	r4, #1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
 800765c:	42ac      	cmp	r4, r5
 800765e:	d1fb      	bne.n	8007658 <send_keyboard_report+0x58>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
 8007660:	b943      	cbnz	r3, 8007674 <send_keyboard_report+0x74>
 8007662:	bd70      	pop	{r4, r5, r6, pc}
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
 8007664:	480f      	ldr	r0, [pc, #60]	; (80076a4 <send_keyboard_report+0xa4>)
 8007666:	7821      	ldrb	r1, [r4, #0]
 8007668:	f7ff feaa 	bl	80073c0 <tfp_printf>
 800766c:	7833      	ldrb	r3, [r6, #0]
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	e7f2      	b.n	800765a <send_keyboard_report+0x5a>
        }
        dprint("\n");
 8007674:	480c      	ldr	r0, [pc, #48]	; (80076a8 <send_keyboard_report+0xa8>)
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
}
 8007676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800767a:	f7ff bea1 	b.w	80073c0 <tfp_printf>
{
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
 800767e:	480b      	ldr	r0, [pc, #44]	; (80076ac <send_keyboard_report+0xac>)
 8007680:	f7ff fe9e 	bl	80073c0 <tfp_printf>
 8007684:	7833      	ldrb	r3, [r6, #0]
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	e7e3      	b.n	8007654 <send_keyboard_report+0x54>
 800768c:	2000122c 	.word	0x2000122c
 8007690:	20001519 	.word	0x20001519
 8007694:	20001518 	.word	0x20001518
 8007698:	20001504 	.word	0x20001504
 800769c:	20001510 	.word	0x20001510
 80076a0:	200014fc 	.word	0x200014fc
 80076a4:	080088a4 	.word	0x080088a4
 80076a8:	0800891c 	.word	0x0800891c
 80076ac:	08008890 	.word	0x08008890

080076b0 <action_for_key>:
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    }
}
 80076b0:	f04f 0004 	mov.w	r0, #4
static action_t keycode_to_action(uint8_t keycode);


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
 80076b4:	b082      	sub	sp, #8
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    }
}
 80076b6:	b002      	add	sp, #8
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	f3af 8000 	nop.w

080076c0 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
 80076c0:	b530      	push	{r4, r5, lr}
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
 80076c2:	4a10      	ldr	r2, [pc, #64]	; (8007704 <layer_switch_get_action+0x44>)
 80076c4:	4b10      	ldr	r3, [pc, #64]	; (8007708 <layer_switch_get_action+0x48>)
 80076c6:	6815      	ldr	r5, [r2, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
#endif



action_t layer_switch_get_action(keypos_t key)
{
 80076ca:	b083      	sub	sp, #12
 80076cc:	f8ad 0004 	strh.w	r0, [sp, #4]
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
 80076d0:	431d      	orrs	r5, r3
 80076d2:	241f      	movs	r4, #31
 80076d4:	e002      	b.n	80076dc <layer_switch_get_action+0x1c>
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
 80076d6:	f114 34ff 	adds.w	r4, r4, #4294967295
 80076da:	d30c      	bcc.n	80076f6 <layer_switch_get_action+0x36>
        if (layers & (1UL<<i)) {
 80076dc:	fa25 f304 	lsr.w	r3, r5, r4
 80076e0:	07db      	lsls	r3, r3, #31
 80076e2:	d5f8      	bpl.n	80076d6 <layer_switch_get_action+0x16>
            action = action_for_key(i, key);
 80076e4:	b2e0      	uxtb	r0, r4
 80076e6:	9901      	ldr	r1, [sp, #4]
 80076e8:	f7ff ffe2 	bl	80076b0 <action_for_key>
 80076ec:	b280      	uxth	r0, r0
            if (action.code != ACTION_TRANSPARENT) {
 80076ee:	2801      	cmp	r0, #1
 80076f0:	d0f1      	beq.n	80076d6 <layer_switch_get_action+0x16>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
 80076f2:	b003      	add	sp, #12
 80076f4:	bd30      	pop	{r4, r5, pc}
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
 80076f6:	9901      	ldr	r1, [sp, #4]
 80076f8:	2000      	movs	r0, #0
 80076fa:	f7ff ffd9 	bl	80076b0 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
 80076fe:	b003      	add	sp, #12
 8007700:	bd30      	pop	{r4, r5, pc}
 8007702:	bf00      	nop
 8007704:	2000157c 	.word	0x2000157c
 8007708:	20001500 	.word	0x20001500
 800770c:	f3af 8000 	nop.w

08007710 <layer_off>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 8007710:	4904      	ldr	r1, [pc, #16]	; (8007724 <layer_off+0x14>)
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
 8007712:	2201      	movs	r2, #1
 8007714:	680b      	ldr	r3, [r1, #0]
 8007716:	4082      	lsls	r2, r0
 8007718:	ea23 0302 	bic.w	r3, r3, r2

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 800771c:	600b      	str	r3, [r1, #0]
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
 800771e:	f000 bc0f 	b.w	8007f40 <clear_keyboard_but_mods>
 8007722:	bf00      	nop
 8007724:	20001500 	.word	0x20001500
 8007728:	f3af 8000 	nop.w
 800772c:	f3af 8000 	nop.w

08007730 <layer_on>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 8007730:	4903      	ldr	r1, [pc, #12]	; (8007740 <layer_on+0x10>)
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
 8007732:	2201      	movs	r2, #1
 8007734:	680b      	ldr	r3, [r1, #0]
 8007736:	4082      	lsls	r2, r0
 8007738:	4313      	orrs	r3, r2

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 800773a:	600b      	str	r3, [r1, #0]
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
 800773c:	f000 bc00 	b.w	8007f40 <clear_keyboard_but_mods>
 8007740:	20001500 	.word	0x20001500
 8007744:	f3af 8000 	nop.w
 8007748:	f3af 8000 	nop.w
 800774c:	f3af 8000 	nop.w

08007750 <debug_waiting_buffer.lto_priv.40>:
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
 8007750:	4b05      	ldr	r3, [pc, #20]	; (8007768 <debug_waiting_buffer.lto_priv.40+0x18>)
 8007752:	4a06      	ldr	r2, [pc, #24]	; (800776c <debug_waiting_buffer.lto_priv.40+0x1c>)
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	7812      	ldrb	r2, [r2, #0]
 8007758:	4293      	cmp	r3, r2
 800775a:	d004      	beq.n	8007766 <debug_waiting_buffer.lto_priv.40+0x16>
 800775c:	3301      	adds	r3, #1
 800775e:	f003 0307 	and.w	r3, r3, #7
 8007762:	4293      	cmp	r3, r2
 8007764:	d1fa      	bne.n	800775c <debug_waiting_buffer.lto_priv.40+0xc>
 8007766:	4770      	bx	lr
 8007768:	20001474 	.word	0x20001474
 800776c:	20001590 	.word	0x20001590

08007770 <waiting_buffer_scan_tap>:

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
 8007770:	492e      	ldr	r1, [pc, #184]	; (800782c <waiting_buffer_scan_tap+0xbc>)
 8007772:	798b      	ldrb	r3, [r1, #6]
 8007774:	091b      	lsrs	r3, r3, #4
 8007776:	d000      	beq.n	800777a <waiting_buffer_scan_tap+0xa>
 8007778:	4770      	bx	lr
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
 800777a:	788b      	ldrb	r3, [r1, #2]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d0fb      	beq.n	8007778 <waiting_buffer_scan_tap+0x8>
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
 8007780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
 8007784:	4b2a      	ldr	r3, [pc, #168]	; (8007830 <waiting_buffer_scan_tap+0xc0>)
 8007786:	4d2b      	ldr	r5, [pc, #172]	; (8007834 <waiting_buffer_scan_tap+0xc4>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	782a      	ldrb	r2, [r5, #0]
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
 800778c:	b082      	sub	sp, #8
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
 800778e:	429a      	cmp	r2, r3
 8007790:	d048      	beq.n	8007824 <waiting_buffer_scan_tap+0xb4>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
 8007792:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8007838 <waiting_buffer_scan_tap+0xc8>

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
 8007796:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800779a:	46e0      	mov	r8, ip
 800779c:	e005      	b.n	80077aa <waiting_buffer_scan_tap+0x3a>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
 800779e:	3301      	adds	r3, #1
 80077a0:	782a      	ldrb	r2, [r5, #0]
 80077a2:	f003 0307 	and.w	r3, r3, #7
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d03c      	beq.n	8007824 <waiting_buffer_scan_tap+0xb4>
 80077aa:	888a      	ldrh	r2, [r1, #4]
 80077ac:	780c      	ldrb	r4, [r1, #0]
 80077ae:	7848      	ldrb	r0, [r1, #1]
 80077b0:	2a00      	cmp	r2, #0
 80077b2:	d0f4      	beq.n	800779e <waiting_buffer_scan_tap+0x2e>
 80077b4:	f88d 4000 	strb.w	r4, [sp]
 80077b8:	f88d 0001 	strb.w	r0, [sp, #1]
 80077bc:	f8bd 6000 	ldrh.w	r6, [sp]
 80077c0:	4576      	cmp	r6, lr
 80077c2:	d0ec      	beq.n	800779e <waiting_buffer_scan_tap+0x2e>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
 80077c4:	00df      	lsls	r7, r3, #3
 80077c6:	eb0c 0607 	add.w	r6, ip, r7
 80077ca:	f896 9001 	ldrb.w	r9, [r6, #1]
 80077ce:	f8df a068 	ldr.w	sl, [pc, #104]	; 8007838 <waiting_buffer_scan_tap+0xc8>
 80077d2:	4581      	cmp	r9, r0
 80077d4:	d1e3      	bne.n	800779e <waiting_buffer_scan_tap+0x2e>
 80077d6:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
 80077da:	42a0      	cmp	r0, r4
 80077dc:	d1df      	bne.n	800779e <waiting_buffer_scan_tap+0x2e>
 80077de:	78b0      	ldrb	r0, [r6, #2]
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d1dc      	bne.n	800779e <waiting_buffer_scan_tap+0x2e>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
 80077e4:	88b0      	ldrh	r0, [r6, #4]
 80077e6:	4282      	cmp	r2, r0
 80077e8:	bf85      	ittet	hi
 80077ea:	f5c2 427f 	rsbhi	r2, r2, #65280	; 0xff00
 80077ee:	32ff      	addhi	r2, #255	; 0xff
 80077f0:	1a82      	subls	r2, r0, r2
 80077f2:	1812      	addhi	r2, r2, r0
 80077f4:	2ac7      	cmp	r2, #199	; 0xc7
 80077f6:	bfcc      	ite	gt
 80077f8:	2200      	movgt	r2, #0
 80077fa:	2201      	movle	r2, #1
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
                !waiting_buffer[i].event.pressed &&
 80077fc:	2a00      	cmp	r2, #0
 80077fe:	d0ce      	beq.n	800779e <waiting_buffer_scan_tap+0x2e>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
 8007800:	4457      	add	r7, sl
 8007802:	79ba      	ldrb	r2, [r7, #6]

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
            tapping_key.tap.count = 1;
 8007804:	798b      	ldrb	r3, [r1, #6]
 8007806:	2001      	movs	r0, #1
            waiting_buffer[i].tap.count = 1;
 8007808:	f360 1207 	bfi	r2, r0, #4, #4

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
            tapping_key.tap.count = 1;
 800780c:	f360 1307 	bfi	r3, r0, #4, #4
            waiting_buffer[i].tap.count = 1;
 8007810:	71ba      	strb	r2, [r7, #6]
            process_action(&tapping_key);
 8007812:	4806      	ldr	r0, [pc, #24]	; (800782c <waiting_buffer_scan_tap+0xbc>)

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
            tapping_key.tap.count = 1;
 8007814:	718b      	strb	r3, [r1, #6]
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);
 8007816:	f000 fba3 	bl	8007f60 <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
 800781a:	b002      	add	sp, #8
 800781c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
 8007820:	f7ff bf96 	b.w	8007750 <debug_waiting_buffer.lto_priv.40>
            return;
        }
    }
}
 8007824:	b002      	add	sp, #8
 8007826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800782a:	bf00      	nop
 800782c:	20001520 	.word	0x20001520
 8007830:	20001474 	.word	0x20001474
 8007834:	20001590 	.word	0x20001590
 8007838:	20001528 	.word	0x20001528
 800783c:	f3af 8000 	nop.w

08007840 <process_tapping.lto_priv.39>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
 8007840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007844:	4604      	mov	r4, r0
 8007846:	4dc3      	ldr	r5, [pc, #780]	; (8007b54 <process_tapping.lto_priv.39+0x314>)
    keyevent_t event = keyp->event;
 8007848:	6800      	ldr	r0, [r0, #0]
 800784a:	88ab      	ldrh	r3, [r5, #4]
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
 800784c:	b094      	sub	sp, #80	; 0x50
    keyevent_t event = keyp->event;
 800784e:	9000      	str	r0, [sp, #0]
 8007850:	f894 e000 	ldrb.w	lr, [r4]
 8007854:	7862      	ldrb	r2, [r4, #1]
 8007856:	f894 9002 	ldrb.w	r9, [r4, #2]
 800785a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800785e:	7828      	ldrb	r0, [r5, #0]
 8007860:	7869      	ldrb	r1, [r5, #1]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d054      	beq.n	8007910 <process_tapping.lto_priv.39+0xd0>
 8007866:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800786a:	f88d 0008 	strb.w	r0, [sp, #8]
 800786e:	f88d 1009 	strb.w	r1, [sp, #9]
 8007872:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8007876:	42b7      	cmp	r7, r6
 8007878:	d002      	beq.n	8007880 <process_tapping.lto_priv.39+0x40>

    // if tapping
    if (IS_TAPPING_PRESSED()) {
 800787a:	78af      	ldrb	r7, [r5, #2]
 800787c:	2f00      	cmp	r7, #0
 800787e:	d15c      	bne.n	800793a <process_tapping.lto_priv.39+0xfa>
 8007880:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8007884:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 8007888:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
 800788c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 8007890:	42b7      	cmp	r7, r6
 8007892:	d03d      	beq.n	8007910 <process_tapping.lto_priv.39+0xd0>
                    process_action(keyp);
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
 8007894:	78ae      	ldrb	r6, [r5, #2]
 8007896:	2e00      	cmp	r6, #0
 8007898:	d13a      	bne.n	8007910 <process_tapping.lto_priv.39+0xd0>
        if (WITHIN_TAPPING_TERM(event)) {
 800789a:	4598      	cmp	r8, r3
 800789c:	bf3b      	ittet	cc
 800789e:	f5c3 437f 	rsbcc	r3, r3, #65280	; 0xff00
 80078a2:	33ff      	addcc	r3, #255	; 0xff
 80078a4:	ebc3 0308 	rsbcs	r3, r3, r8
 80078a8:	4443      	addcc	r3, r8
 80078aa:	2bc7      	cmp	r3, #199	; 0xc7
 80078ac:	bfcc      	ite	gt
 80078ae:	2700      	movgt	r7, #0
 80078b0:	2701      	movle	r7, #1
 80078b2:	2f00      	cmp	r7, #0
 80078b4:	f000 811d 	beq.w	8007af2 <process_tapping.lto_priv.39+0x2b2>
            if (event.pressed) {
 80078b8:	464f      	mov	r7, r9
 80078ba:	b367      	cbz	r7, 8007916 <process_tapping.lto_priv.39+0xd6>
 80078bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078c0:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
 80078c4:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
 80078c8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80078cc:	48a1      	ldr	r0, [pc, #644]	; (8007b54 <process_tapping.lto_priv.39+0x314>)
 80078ce:	4299      	cmp	r1, r3
 80078d0:	d009      	beq.n	80078e6 <process_tapping.lto_priv.39+0xa6>
                if (IS_TAPPING_KEY(event.key)) {
 80078d2:	f88d e000 	strb.w	lr, [sp]
 80078d6:	f88d 2001 	strb.w	r2, [sp, #1]
 80078da:	f8bd 1000 	ldrh.w	r1, [sp]
 80078de:	8803      	ldrh	r3, [r0, #0]
 80078e0:	4299      	cmp	r1, r3
 80078e2:	f000 80dc 	beq.w	8007a9e <process_tapping.lto_priv.39+0x25e>
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
                        return true;
                    }
                } else if (is_tap_key(event.key)) {
 80078e6:	f88d e000 	strb.w	lr, [sp]
 80078ea:	f88d 2001 	strb.w	r2, [sp, #1]
 80078ee:	9800      	ldr	r0, [sp, #0]
 80078f0:	f000 faf6 	bl	8007ee0 <is_tap_key>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	f000 80ca 	beq.w	8007a8e <process_tapping.lto_priv.39+0x24e>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
 80078fa:	6820      	ldr	r0, [r4, #0]
 80078fc:	6861      	ldr	r1, [r4, #4]
 80078fe:	4b95      	ldr	r3, [pc, #596]	; (8007b54 <process_tapping.lto_priv.39+0x314>)
                    waiting_buffer_scan_tap();
                    debug_tapping_key();
                    return true;
 8007900:	2701      	movs	r7, #1
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
 8007902:	c303      	stmia	r3!, {r0, r1}
                    waiting_buffer_scan_tap();
 8007904:	f7ff ff34 	bl	8007770 <waiting_buffer_scan_tap>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
 8007908:	4638      	mov	r0, r7
 800790a:	b014      	add	sp, #80	; 0x50
 800790c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
 8007910:	f1b9 0f00 	cmp.w	r9, #0
 8007914:	d107      	bne.n	8007926 <process_tapping.lto_priv.39+0xe6>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
 8007916:	4620      	mov	r0, r4
 8007918:	f000 fb22 	bl	8007f60 <process_action>
                    return true;
 800791c:	2701      	movs	r7, #1
        } else {
            process_action(keyp);
            return true;
        }
    }
}
 800791e:	4638      	mov	r0, r7
 8007920:	b014      	add	sp, #80	; 0x50
 8007922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
 8007926:	f88d e000 	strb.w	lr, [sp]
 800792a:	f88d 2001 	strb.w	r2, [sp, #1]
 800792e:	9800      	ldr	r0, [sp, #0]
 8007930:	f000 fad6 	bl	8007ee0 <is_tap_key>
 8007934:	2800      	cmp	r0, #0
 8007936:	d0ee      	beq.n	8007916 <process_tapping.lto_priv.39+0xd6>
 8007938:	e7df      	b.n	80078fa <process_tapping.lto_priv.39+0xba>
{
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
 800793a:	4598      	cmp	r8, r3
 800793c:	bf3b      	ittet	cc
 800793e:	f5c3 437f 	rsbcc	r3, r3, #65280	; 0xff00
 8007942:	33ff      	addcc	r3, #255	; 0xff
 8007944:	ebc3 0308 	rsbcs	r3, r3, r8
 8007948:	4443      	addcc	r3, r8
 800794a:	2bc7      	cmp	r3, #199	; 0xc7
 800794c:	bfcc      	ite	gt
 800794e:	2600      	movgt	r6, #0
 8007950:	2601      	movle	r6, #1
            if (tapping_key.tap.count == 0) {
 8007952:	79ab      	ldrb	r3, [r5, #6]
 8007954:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 8007b54 <process_tapping.lto_priv.39+0x314>
{
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
 8007958:	bbb6      	cbnz	r6, 80079c8 <process_tapping.lto_priv.39+0x188>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
 800795a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800795e:	f000 811a 	beq.w	8007b96 <process_tapping.lto_priv.39+0x356>
 8007962:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8007966:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 800796a:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
 800796e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8007972:	42b1      	cmp	r1, r6
 8007974:	d00a      	beq.n	800798c <process_tapping.lto_priv.39+0x14c>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
 8007976:	f88d e000 	strb.w	lr, [sp]
 800797a:	f88d 2001 	strb.w	r2, [sp, #1]
 800797e:	f8bd 0000 	ldrh.w	r0, [sp]
 8007982:	f8ba 1000 	ldrh.w	r1, [sl]
 8007986:	4288      	cmp	r0, r1
 8007988:	f000 80a1 	beq.w	8007ace <process_tapping.lto_priv.39+0x28e>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
 800798c:	f88d e000 	strb.w	lr, [sp]
 8007990:	f88d 2001 	strb.w	r2, [sp, #1]
 8007994:	9800      	ldr	r0, [sp, #0]
 8007996:	f000 faa3 	bl	8007ee0 <is_tap_key>
 800799a:	2800      	cmp	r0, #0
 800799c:	d0bb      	beq.n	8007916 <process_tapping.lto_priv.39+0xd6>
 800799e:	f1b9 0f00 	cmp.w	r9, #0
 80079a2:	d0b8      	beq.n	8007916 <process_tapping.lto_priv.39+0xd6>
                    if (tapping_key.tap.count > 1) {
 80079a4:	79ab      	ldrb	r3, [r5, #6]
 80079a6:	4a6b      	ldr	r2, [pc, #428]	; (8007b54 <process_tapping.lto_priv.39+0x314>)
 80079a8:	2b1f      	cmp	r3, #31
 80079aa:	d9a6      	bls.n	80078fa <process_tapping.lto_priv.39+0xba>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
 80079ac:	8811      	ldrh	r1, [r2, #0]
 80079ae:	a812      	add	r0, sp, #72	; 0x48
 80079b0:	2200      	movs	r2, #0
 80079b2:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 80079b6:	f8ad 804c 	strh.w	r8, [sp, #76]	; 0x4c
 80079ba:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
 80079be:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
 80079c2:	f000 facd 	bl	8007f60 <process_action>
 80079c6:	e798      	b.n	80078fa <process_tapping.lto_priv.39+0xba>
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
 80079c8:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80079cc:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80079d0:	d129      	bne.n	8007a26 <process_tapping.lto_priv.39+0x1e6>
 80079d2:	f88d 0010 	strb.w	r0, [sp, #16]
 80079d6:	f88d 1011 	strb.w	r1, [sp, #17]
 80079da:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80079de:	42b9      	cmp	r1, r7
 80079e0:	d00a      	beq.n	80079f8 <process_tapping.lto_priv.39+0x1b8>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
 80079e2:	f88d e000 	strb.w	lr, [sp]
 80079e6:	f88d 2001 	strb.w	r2, [sp, #1]
 80079ea:	f8bd 0000 	ldrh.w	r0, [sp]
 80079ee:	f8ba 1000 	ldrh.w	r1, [sl]
 80079f2:	4288      	cmp	r0, r1
 80079f4:	f000 80eb 	beq.w	8007bce <process_tapping.lto_priv.39+0x38e>
 80079f8:	464f      	mov	r7, r9
 80079fa:	f1b8 0f00 	cmp.w	r8, #0
 80079fe:	d073      	beq.n	8007ae8 <process_tapping.lto_priv.39+0x2a8>
 8007a00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a04:	f88d e018 	strb.w	lr, [sp, #24]
 8007a08:	f88d 2019 	strb.w	r2, [sp, #25]
 8007a0c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8007a10:	4299      	cmp	r1, r3
 8007a12:	d069      	beq.n	8007ae8 <process_tapping.lto_priv.39+0x2a8>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
 8007a14:	f1b9 0f00 	cmp.w	r9, #0
 8007a18:	d06e      	beq.n	8007af8 <process_tapping.lto_priv.39+0x2b8>
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
                        tapping_key.tap.interrupted = true;
 8007a1a:	79ab      	ldrb	r3, [r5, #6]
                    }
                    // enqueue 
                    return false;
 8007a1c:	2700      	movs	r7, #0
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
                        tapping_key.tap.interrupted = true;
 8007a1e:	f043 0301 	orr.w	r3, r3, #1
 8007a22:	71ab      	strb	r3, [r5, #6]
 8007a24:	e77b      	b.n	800791e <process_tapping.lto_priv.39+0xde>

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
 8007a26:	f88d 0020 	strb.w	r0, [sp, #32]
 8007a2a:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
 8007a2e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8007a32:	42b9      	cmp	r1, r7
 8007a34:	d00a      	beq.n	8007a4c <process_tapping.lto_priv.39+0x20c>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
 8007a36:	f88d e000 	strb.w	lr, [sp]
 8007a3a:	f88d 2001 	strb.w	r2, [sp, #1]
 8007a3e:	f8bd 0000 	ldrh.w	r0, [sp]
 8007a42:	f8ba 1000 	ldrh.w	r1, [sl]
 8007a46:	4288      	cmp	r0, r1
 8007a48:	f000 80ae 	beq.w	8007ba8 <process_tapping.lto_priv.39+0x368>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
 8007a4c:	f88d e000 	strb.w	lr, [sp]
 8007a50:	f88d 2001 	strb.w	r2, [sp, #1]
 8007a54:	9800      	ldr	r0, [sp, #0]
 8007a56:	f000 fa43 	bl	8007ee0 <is_tap_key>
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	f43f af5b 	beq.w	8007916 <process_tapping.lto_priv.39+0xd6>
 8007a60:	f1b9 0f00 	cmp.w	r9, #0
 8007a64:	f43f af57 	beq.w	8007916 <process_tapping.lto_priv.39+0xd6>
                    if (tapping_key.tap.count > 1) {
 8007a68:	79ab      	ldrb	r3, [r5, #6]
 8007a6a:	4a3a      	ldr	r2, [pc, #232]	; (8007b54 <process_tapping.lto_priv.39+0x314>)
 8007a6c:	2b1f      	cmp	r3, #31
 8007a6e:	f67f af44 	bls.w	80078fa <process_tapping.lto_priv.39+0xba>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
 8007a72:	8811      	ldrh	r1, [r2, #0]
 8007a74:	a810      	add	r0, sp, #64	; 0x40
 8007a76:	2200      	movs	r2, #0
 8007a78:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8007a7c:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 8007a80:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8007a84:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
 8007a88:	f000 fa6a 	bl	8007f60 <process_action>
 8007a8c:	e735      	b.n	80078fa <process_tapping.lto_priv.39+0xba>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
 8007a8e:	79ab      	ldrb	r3, [r5, #6]
                    process_action(keyp);
 8007a90:	4620      	mov	r0, r4
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
 8007a92:	f043 0301 	orr.w	r3, r3, #1
 8007a96:	71ab      	strb	r3, [r5, #6]
                    process_action(keyp);
 8007a98:	f000 fa62 	bl	8007f60 <process_action>
 8007a9c:	e73f      	b.n	800791e <process_tapping.lto_priv.39+0xde>
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (event.pressed) {
                if (IS_TAPPING_KEY(event.key)) {
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
 8007a9e:	7983      	ldrb	r3, [r0, #6]
 8007aa0:	07da      	lsls	r2, r3, #31
 8007aa2:	f100 808f 	bmi.w	8007bc4 <process_tapping.lto_priv.39+0x384>
 8007aa6:	091a      	lsrs	r2, r3, #4
 8007aa8:	f000 808c 	beq.w	8007bc4 <process_tapping.lto_priv.39+0x384>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
 8007aac:	0919      	lsrs	r1, r3, #4
 8007aae:	290f      	cmp	r1, #15
 8007ab0:	461a      	mov	r2, r3
        if (WITHIN_TAPPING_TERM(event)) {
            if (event.pressed) {
                if (IS_TAPPING_KEY(event.key)) {
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
 8007ab2:	71a3      	strb	r3, [r4, #6]
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
 8007ab4:	d003      	beq.n	8007abe <process_tapping.lto_priv.39+0x27e>
 8007ab6:	3101      	adds	r1, #1
 8007ab8:	f361 1207 	bfi	r2, r1, #4, #4
 8007abc:	71a2      	strb	r2, [r4, #6]
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
 8007abe:	4620      	mov	r0, r4
 8007ac0:	f000 fa4e 	bl	8007f60 <process_action>
                        tapping_key = *keyp;
 8007ac4:	4b23      	ldr	r3, [pc, #140]	; (8007b54 <process_tapping.lto_priv.39+0x314>)
 8007ac6:	6820      	ldr	r0, [r4, #0]
 8007ac8:	6861      	ldr	r1, [r4, #4]
 8007aca:	c303      	stmia	r3!, {r0, r1}
 8007acc:	e727      	b.n	800791e <process_tapping.lto_priv.39+0xde>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
 8007ace:	f1b9 0f00 	cmp.w	r9, #0
 8007ad2:	f47f af5b 	bne.w	800798c <process_tapping.lto_priv.39+0x14c>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
 8007ad6:	71a3      	strb	r3, [r4, #6]
                    process_action(keyp);
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f000 fa41 	bl	8007f60 <process_action>
                    tapping_key = (keyrecord_t){};
 8007ade:	f8ca 9000 	str.w	r9, [sl]
 8007ae2:	f8ca 9004 	str.w	r9, [sl, #4]
 8007ae6:	e71a      	b.n	800791e <process_tapping.lto_priv.39+0xde>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
 8007ae8:	f1b9 0f00 	cmp.w	r9, #0
 8007aec:	f43f af17 	beq.w	800791e <process_tapping.lto_priv.39+0xde>
 8007af0:	e793      	b.n	8007a1a <process_tapping.lto_priv.39+0x1da>
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
            tapping_key = (keyrecord_t){};
 8007af2:	602f      	str	r7, [r5, #0]
 8007af4:	606f      	str	r7, [r5, #4]
 8007af6:	e712      	b.n	800791e <process_tapping.lto_priv.39+0xde>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
 8007af8:	4b17      	ldr	r3, [pc, #92]	; (8007b58 <process_tapping.lto_priv.39+0x318>)
 8007afa:	4918      	ldr	r1, [pc, #96]	; (8007b5c <process_tapping.lto_priv.39+0x31c>)
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	f891 8000 	ldrb.w	r8, [r1]
 8007b02:	4543      	cmp	r3, r8
 8007b04:	d015      	beq.n	8007b32 <process_tapping.lto_priv.39+0x2f2>
 8007b06:	f8df c058 	ldr.w	ip, [pc, #88]	; 8007b60 <process_tapping.lto_priv.39+0x320>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
 8007b0a:	46e1      	mov	r9, ip
 8007b0c:	e003      	b.n	8007b16 <process_tapping.lto_priv.39+0x2d6>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
 8007b0e:	f005 0307 	and.w	r3, r5, #7
 8007b12:	4543      	cmp	r3, r8
 8007b14:	d00d      	beq.n	8007b32 <process_tapping.lto_priv.39+0x2f2>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
 8007b16:	eb0c 01c3 	add.w	r1, ip, r3, lsl #3
 8007b1a:	7848      	ldrb	r0, [r1, #1]
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
 8007b1c:	1c5d      	adds	r5, r3, #1
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
 8007b1e:	4290      	cmp	r0, r2
 8007b20:	d1f5      	bne.n	8007b0e <process_tapping.lto_priv.39+0x2ce>
 8007b22:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
 8007b26:	4573      	cmp	r3, lr
 8007b28:	d1f1      	bne.n	8007b0e <process_tapping.lto_priv.39+0x2ce>
 8007b2a:	788b      	ldrb	r3, [r1, #2]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0ee      	beq.n	8007b0e <process_tapping.lto_priv.39+0x2ce>
 8007b30:	e6f5      	b.n	800791e <process_tapping.lto_priv.39+0xde>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
 8007b32:	f88d 2001 	strb.w	r2, [sp, #1]
 8007b36:	f88d e000 	strb.w	lr, [sp]
 8007b3a:	9800      	ldr	r0, [sp, #0]
 8007b3c:	f7ff fdc0 	bl	80076c0 <layer_switch_get_action>
                    switch (action.kind.id) {
 8007b40:	f3c0 3303 	ubfx	r3, r0, #12, #4
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
 8007b44:	b2c2      	uxtb	r2, r0
                    switch (action.kind.id) {
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d81a      	bhi.n	8007b80 <process_tapping.lto_priv.39+0x340>
 8007b4a:	e8df f003 	tbb	[pc, r3]
 8007b4e:	1e1e      	.short	0x1e1e
 8007b50:	0b0b      	.short	0x0b0b
 8007b52:	bf00      	nop
 8007b54:	20001520 	.word	0x20001520
 8007b58:	20001474 	.word	0x20001474
 8007b5c:	20001590 	.word	0x20001590
 8007b60:	20001528 	.word	0x20001528
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
 8007b64:	f410 6f70 	tst.w	r0, #3840	; 0xf00
 8007b68:	d004      	beq.n	8007b74 <process_tapping.lto_priv.39+0x334>
 8007b6a:	79a3      	ldrb	r3, [r4, #6]
 8007b6c:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8007b70:	f43f aed5 	beq.w	800791e <process_tapping.lto_priv.39+0xde>
                            if (IS_MOD(action.key.code)) return false;
 8007b74:	f102 0320 	add.w	r3, r2, #32
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b07      	cmp	r3, #7
 8007b7c:	f67f aecf 	bls.w	800791e <process_tapping.lto_priv.39+0xde>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
 8007b80:	4620      	mov	r0, r4
 8007b82:	f000 f9ed 	bl	8007f60 <process_action>
                    return true;
 8007b86:	4637      	mov	r7, r6
 8007b88:	e6c9      	b.n	800791e <process_tapping.lto_priv.39+0xde>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
 8007b8a:	f410 6f70 	tst.w	r0, #3840	; 0xf00
 8007b8e:	d0f1      	beq.n	8007b74 <process_tapping.lto_priv.39+0x334>
 8007b90:	2a00      	cmp	r2, #0
 8007b92:	d1ef      	bne.n	8007b74 <process_tapping.lto_priv.39+0x334>
 8007b94:	e6c3      	b.n	800791e <process_tapping.lto_priv.39+0xde>
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
                process_action(&tapping_key);
 8007b96:	4650      	mov	r0, sl
 8007b98:	f000 f9e2 	bl	8007f60 <process_action>
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
 8007b9c:	4637      	mov	r7, r6
        else {
            if (tapping_key.tap.count == 0) {
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
 8007b9e:	f8ca 6000 	str.w	r6, [sl]
 8007ba2:	f8ca 6004 	str.w	r6, [sl, #4]
 8007ba6:	e6ba      	b.n	800791e <process_tapping.lto_priv.39+0xde>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
 8007ba8:	f1b9 0f00 	cmp.w	r9, #0
 8007bac:	f47f af4e 	bne.w	8007a4c <process_tapping.lto_priv.39+0x20c>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
 8007bb0:	4620      	mov	r0, r4
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
 8007bb2:	71a3      	strb	r3, [r4, #6]
                    process_action(keyp);
 8007bb4:	f000 f9d4 	bl	8007f60 <process_action>
                    tapping_key = *keyp;
 8007bb8:	6820      	ldr	r0, [r4, #0]
 8007bba:	6861      	ldr	r1, [r4, #4]
                    debug_tapping_key();
                    return true;
 8007bbc:	4637      	mov	r7, r6
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = *keyp;
 8007bbe:	e8aa 0003 	stmia.w	sl!, {r0, r1}
 8007bc2:	e6ac      	b.n	800791e <process_tapping.lto_priv.39+0xde>
                        tapping_key = *keyp;
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
 8007bc4:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <process_tapping.lto_priv.39+0x3b8>)
 8007bc6:	6820      	ldr	r0, [r4, #0]
 8007bc8:	6861      	ldr	r1, [r4, #4]
 8007bca:	c303      	stmia	r3!, {r0, r1}
 8007bcc:	e6a7      	b.n	800791e <process_tapping.lto_priv.39+0xde>

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
 8007bce:	464f      	mov	r7, r9
 8007bd0:	f1b9 0f00 	cmp.w	r9, #0
 8007bd4:	d004      	beq.n	8007be0 <process_tapping.lto_priv.39+0x3a0>
 8007bd6:	f1b8 0f00 	cmp.w	r8, #0
 8007bda:	f43f af1e 	beq.w	8007a1a <process_tapping.lto_priv.39+0x1da>
 8007bde:	e70f      	b.n	8007a00 <process_tapping.lto_priv.39+0x1c0>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
 8007be0:	2201      	movs	r2, #1
 8007be2:	f362 1307 	bfi	r3, r2, #4, #4
                    debug_tapping_key();
                    process_action(&tapping_key);
 8007be6:	4650      	mov	r0, sl
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
 8007be8:	f88a 3006 	strb.w	r3, [sl, #6]
                    debug_tapping_key();
                    process_action(&tapping_key);
 8007bec:	f000 f9b8 	bl	8007f60 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
 8007bf0:	f89a 3006 	ldrb.w	r3, [sl, #6]
 8007bf4:	71a3      	strb	r3, [r4, #6]
 8007bf6:	e692      	b.n	800791e <process_tapping.lto_priv.39+0xde>
 8007bf8:	20001520 	.word	0x20001520
 8007bfc:	f3af 8000 	nop.w

08007c00 <host_consumer_send>:
    (*driver->send_system)(report);
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
 8007c00:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <host_consumer_send+0x18>)
 8007c02:	8819      	ldrh	r1, [r3, #0]
 8007c04:	4281      	cmp	r1, r0
 8007c06:	d005      	beq.n	8007c14 <host_consumer_send+0x14>
    last_consumer_report = report;

    if (!driver) return;
 8007c08:	4904      	ldr	r1, [pc, #16]	; (8007c1c <host_consumer_send+0x1c>)
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    last_consumer_report = report;
 8007c0a:	8018      	strh	r0, [r3, #0]

    if (!driver) return;
 8007c0c:	680b      	ldr	r3, [r1, #0]
 8007c0e:	b10b      	cbz	r3, 8007c14 <host_consumer_send+0x14>
    (*driver->send_consumer)(report);
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	4718      	bx	r3
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	20001598 	.word	0x20001598
 8007c1c:	20001510 	.word	0x20001510

08007c20 <host_system_send>:
    (*driver->send_mouse)(report);
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
 8007c20:	4b05      	ldr	r3, [pc, #20]	; (8007c38 <host_system_send+0x18>)
 8007c22:	8819      	ldrh	r1, [r3, #0]
 8007c24:	4281      	cmp	r1, r0
 8007c26:	d005      	beq.n	8007c34 <host_system_send+0x14>
    last_system_report = report;

    if (!driver) return;
 8007c28:	4904      	ldr	r1, [pc, #16]	; (8007c3c <host_system_send+0x1c>)
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    last_system_report = report;
 8007c2a:	8018      	strh	r0, [r3, #0]

    if (!driver) return;
 8007c2c:	680b      	ldr	r3, [r1, #0]
 8007c2e:	b10b      	cbz	r3, 8007c34 <host_system_send+0x14>
    (*driver->send_system)(report);
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	4718      	bx	r3
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	2000159a 	.word	0x2000159a
 8007c3c:	20001510 	.word	0x20001510

08007c40 <unregister_code>:
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}

void unregister_code(uint8_t code)
{
 8007c40:	b510      	push	{r4, lr}
    if (code == KC_NO) {
 8007c42:	b188      	cbz	r0, 8007c68 <unregister_code+0x28>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
 8007c44:	1f03      	subs	r3, r0, #4
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	2ba0      	cmp	r3, #160	; 0xa0
 8007c4a:	d90e      	bls.n	8007c6a <unregister_code+0x2a>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
 8007c4c:	f100 0320 	add.w	r3, r0, #32
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b07      	cmp	r3, #7
 8007c54:	d924      	bls.n	8007ca0 <unregister_code+0x60>
        del_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
 8007c56:	f100 035b 	add.w	r3, r0, #91	; 0x5b
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d92a      	bls.n	8007cb6 <unregister_code+0x76>
        host_system_send(0);
    }
    else if IS_CONSUMER(code) {
 8007c60:	3058      	adds	r0, #88	; 0x58
 8007c62:	b2c0      	uxtb	r0, r0
 8007c64:	2812      	cmp	r0, #18
 8007c66:	d916      	bls.n	8007c96 <unregister_code+0x56>
 8007c68:	bd10      	pop	{r4, pc}
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
 8007c6a:	4b21      	ldr	r3, [pc, #132]	; (8007cf0 <unregister_code+0xb0>)
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	b113      	cbz	r3, 8007c76 <unregister_code+0x36>
 8007c70:	4b20      	ldr	r3, [pc, #128]	; (8007cf4 <unregister_code+0xb4>)
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	bb23      	cbnz	r3, 8007cc0 <unregister_code+0x80>
 8007c76:	4b20      	ldr	r3, [pc, #128]	; (8007cf8 <unregister_code+0xb8>)
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
            keyboard_report->keys[i] = 0;
 8007c78:	2400      	movs	r4, #0
 8007c7a:	6819      	ldr	r1, [r3, #0]
 8007c7c:	1c4b      	adds	r3, r1, #1
 8007c7e:	310f      	adds	r1, #15
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
 8007c80:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8007c84:	4282      	cmp	r2, r0
            keyboard_report->keys[i] = 0;
 8007c86:	bf08      	it	eq
 8007c88:	701c      	strbeq	r4, [r3, #0]
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 8007c8a:	428b      	cmp	r3, r1
 8007c8c:	d1f8      	bne.n	8007c80 <unregister_code+0x40>
        host_consumer_send(0);
    }
}
 8007c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
        del_mods(MOD_BIT(code));
        send_keyboard_report();
 8007c92:	f7ff bcb5 	b.w	8007600 <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
        host_system_send(0);
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(0);
 8007c96:	2000      	movs	r0, #0
    }
}
 8007c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    else if IS_SYSTEM(code) {
        host_system_send(0);
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(0);
 8007c9c:	f7ff bfb0 	b.w	8007c00 <host_consumer_send>
    else if IS_KEY(code) {
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
        del_mods(MOD_BIT(code));
 8007ca0:	f000 0107 	and.w	r1, r0, #7
 8007ca4:	2001      	movs	r0, #1
 8007ca6:	4088      	lsls	r0, r1
 8007ca8:	b2c0      	uxtb	r0, r0
 8007caa:	f7ff fc89 	bl	80075c0 <del_mods>
        host_system_send(0);
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(0);
    }
}
 8007cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
        del_mods(MOD_BIT(code));
        send_keyboard_report();
 8007cb2:	f7ff bca5 	b.w	8007600 <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
        host_system_send(0);
 8007cb6:	2000      	movs	r0, #0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(0);
    }
}
 8007cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else if IS_MOD(code) {
        del_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(0);
 8007cbc:	f7ff bfb0 	b.w	8007c20 <host_system_send>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
 8007cc0:	08c3      	lsrs	r3, r0, #3
 8007cc2:	2b0e      	cmp	r3, #14
 8007cc4:	d908      	bls.n	8007cd8 <unregister_code+0x98>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
 8007cc6:	4b0d      	ldr	r3, [pc, #52]	; (8007cfc <unregister_code+0xbc>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	07db      	lsls	r3, r3, #31
 8007ccc:	d5df      	bpl.n	8007c8e <unregister_code+0x4e>
 8007cce:	4601      	mov	r1, r0
 8007cd0:	480b      	ldr	r0, [pc, #44]	; (8007d00 <unregister_code+0xc0>)
 8007cd2:	f7ff fb75 	bl	80073c0 <tfp_printf>
 8007cd6:	e7da      	b.n	8007c8e <unregister_code+0x4e>
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
 8007cd8:	4a07      	ldr	r2, [pc, #28]	; (8007cf8 <unregister_code+0xb8>)
 8007cda:	f000 0007 	and.w	r0, r0, #7
 8007cde:	6811      	ldr	r1, [r2, #0]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	440b      	add	r3, r1
 8007ce4:	7859      	ldrb	r1, [r3, #1]
 8007ce6:	4082      	lsls	r2, r0
 8007ce8:	ea21 0202 	bic.w	r2, r1, r2
 8007cec:	705a      	strb	r2, [r3, #1]
 8007cee:	e7ce      	b.n	8007c8e <unregister_code+0x4e>
 8007cf0:	20001230 	.word	0x20001230
 8007cf4:	20001232 	.word	0x20001232
 8007cf8:	2000122c 	.word	0x2000122c
 8007cfc:	200014fc 	.word	0x200014fc
 8007d00:	080088e0 	.word	0x080088e0
 8007d04:	f3af 8000 	nop.w
 8007d08:	f3af 8000 	nop.w
 8007d0c:	f3af 8000 	nop.w

08007d10 <register_code>:
/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    if (code == KC_NO) {
 8007d10:	2800      	cmp	r0, #0
 8007d12:	d052      	beq.n	8007dba <register_code+0xaa>

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
 8007d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
 8007d16:	1f03      	subs	r3, r0, #4
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2ba0      	cmp	r3, #160	; 0xa0
 8007d1c:	d958      	bls.n	8007dd0 <register_code+0xc0>
        {
            add_key(code);
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
 8007d1e:	f100 0320 	add.w	r3, r0, #32
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b07      	cmp	r3, #7
 8007d26:	d97e      	bls.n	8007e26 <register_code+0x116>
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
 8007d28:	f100 035b 	add.w	r3, r0, #91	; 0x5b
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d944      	bls.n	8007dbc <register_code+0xac>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
 8007d32:	f100 0358 	add.w	r3, r0, #88	; 0x58
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b12      	cmp	r3, #18
 8007d3a:	d87f      	bhi.n	8007e3c <register_code+0x12c>
        host_consumer_send(KEYCODE2CONSUMER(code));
 8007d3c:	28a8      	cmp	r0, #168	; 0xa8
 8007d3e:	f000 8088 	beq.w	8007e52 <register_code+0x142>
 8007d42:	28a9      	cmp	r0, #169	; 0xa9
 8007d44:	f000 8087 	beq.w	8007e56 <register_code+0x146>
 8007d48:	28aa      	cmp	r0, #170	; 0xaa
 8007d4a:	d07e      	beq.n	8007e4a <register_code+0x13a>
 8007d4c:	28ab      	cmp	r0, #171	; 0xab
 8007d4e:	f000 8084 	beq.w	8007e5a <register_code+0x14a>
 8007d52:	28ac      	cmp	r0, #172	; 0xac
 8007d54:	f000 8083 	beq.w	8007e5e <register_code+0x14e>
 8007d58:	28ad      	cmp	r0, #173	; 0xad
 8007d5a:	f000 808d 	beq.w	8007e78 <register_code+0x168>
 8007d5e:	28b0      	cmp	r0, #176	; 0xb0
 8007d60:	f000 808c 	beq.w	8007e7c <register_code+0x16c>
 8007d64:	28ae      	cmp	r0, #174	; 0xae
 8007d66:	f000 808b 	beq.w	8007e80 <register_code+0x170>
 8007d6a:	28af      	cmp	r0, #175	; 0xaf
 8007d6c:	f000 808a 	beq.w	8007e84 <register_code+0x174>
 8007d70:	28b1      	cmp	r0, #177	; 0xb1
 8007d72:	f000 808a 	beq.w	8007e8a <register_code+0x17a>
 8007d76:	28b2      	cmp	r0, #178	; 0xb2
 8007d78:	f000 808a 	beq.w	8007e90 <register_code+0x180>
 8007d7c:	28b3      	cmp	r0, #179	; 0xb3
 8007d7e:	f000 808a 	beq.w	8007e96 <register_code+0x186>
 8007d82:	28b4      	cmp	r0, #180	; 0xb4
 8007d84:	f000 808a 	beq.w	8007e9c <register_code+0x18c>
 8007d88:	28b5      	cmp	r0, #181	; 0xb5
 8007d8a:	f000 808d 	beq.w	8007ea8 <register_code+0x198>
 8007d8e:	28b6      	cmp	r0, #182	; 0xb6
 8007d90:	f000 8087 	beq.w	8007ea2 <register_code+0x192>
 8007d94:	28b7      	cmp	r0, #183	; 0xb7
 8007d96:	f000 8090 	beq.w	8007eba <register_code+0x1aa>
 8007d9a:	28b8      	cmp	r0, #184	; 0xb8
 8007d9c:	f000 808a 	beq.w	8007eb4 <register_code+0x1a4>
 8007da0:	28b9      	cmp	r0, #185	; 0xb9
 8007da2:	f000 8084 	beq.w	8007eae <register_code+0x19e>
 8007da6:	f240 232a 	movw	r3, #554	; 0x22a
 8007daa:	28ba      	cmp	r0, #186	; 0xba
 8007dac:	bf0c      	ite	eq
 8007dae:	4618      	moveq	r0, r3
 8007db0:	2000      	movne	r0, #0
    }
}
 8007db2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
 8007db6:	f7ff bf23 	b.w	8007c00 <host_consumer_send>
 8007dba:	4770      	bx	lr
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
 8007dbc:	28a5      	cmp	r0, #165	; 0xa5
 8007dbe:	d046      	beq.n	8007e4e <register_code+0x13e>
 8007dc0:	28a6      	cmp	r0, #166	; 0xa6
 8007dc2:	bf0c      	ite	eq
 8007dc4:	2082      	moveq	r0, #130	; 0x82
 8007dc6:	2083      	movne	r0, #131	; 0x83
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
 8007dc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
 8007dcc:	f7ff bf28 	b.w	8007c20 <host_system_send>

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
 8007dd0:	4b3b      	ldr	r3, [pc, #236]	; (8007ec0 <register_code+0x1b0>)
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	b113      	cbz	r3, 8007ddc <register_code+0xcc>
 8007dd6:	4b3b      	ldr	r3, [pc, #236]	; (8007ec4 <register_code+0x1b4>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	b9ab      	cbnz	r3, 8007e08 <register_code+0xf8>
 8007ddc:	4a3a      	ldr	r2, [pc, #232]	; (8007ec8 <register_code+0x1b8>)

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
 8007dde:	2300      	movs	r3, #0
 8007de0:	6817      	ldr	r7, [r2, #0]
 8007de2:	24ff      	movs	r4, #255	; 0xff
 8007de4:	1c79      	adds	r1, r7, #1
 8007de6:	e001      	b.n	8007dec <register_code+0xdc>
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
 8007de8:	2b0e      	cmp	r3, #14
 8007dea:	d028      	beq.n	8007e3e <register_code+0x12e>
        if (keyboard_report->keys[i] == code) {
 8007dec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007df0:	b2de      	uxtb	r6, r3
 8007df2:	4290      	cmp	r0, r2
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
 8007df4:	b265      	sxtb	r5, r4
 8007df6:	f103 0301 	add.w	r3, r3, #1
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
 8007dfa:	d010      	beq.n	8007e1e <register_code+0x10e>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
 8007dfc:	3501      	adds	r5, #1
 8007dfe:	d1f3      	bne.n	8007de8 <register_code+0xd8>
 8007e00:	2a00      	cmp	r2, #0
 8007e02:	bf08      	it	eq
 8007e04:	4634      	moveq	r4, r6
 8007e06:	e7ef      	b.n	8007de8 <register_code+0xd8>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
 8007e08:	08c3      	lsrs	r3, r0, #3
 8007e0a:	2b0e      	cmp	r3, #14
 8007e0c:	d929      	bls.n	8007e62 <register_code+0x152>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
 8007e0e:	4b2f      	ldr	r3, [pc, #188]	; (8007ecc <register_code+0x1bc>)
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	07da      	lsls	r2, r3, #31
 8007e14:	d503      	bpl.n	8007e1e <register_code+0x10e>
 8007e16:	4601      	mov	r1, r0
 8007e18:	482d      	ldr	r0, [pc, #180]	; (8007ed0 <register_code+0x1c0>)
 8007e1a:	f7ff fad1 	bl	80073c0 <tfp_printf>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
 8007e1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
 8007e22:	f7ff bbed 	b.w	8007600 <send_keyboard_report>
            add_key(code);
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
 8007e26:	f000 0107 	and.w	r1, r0, #7
 8007e2a:	2001      	movs	r0, #1
 8007e2c:	4088      	lsls	r0, r1
 8007e2e:	b2c0      	uxtb	r0, r0
 8007e30:	f7ff fbce 	bl	80075d0 <add_mods>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
 8007e34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
 8007e38:	f7ff bbe2 	b.w	8007600 <send_keyboard_report>
 8007e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
 8007e3e:	b264      	sxtb	r4, r4
 8007e40:	1c63      	adds	r3, r4, #1
 8007e42:	d0ec      	beq.n	8007e1e <register_code+0x10e>
            keyboard_report->keys[empty] = code;
 8007e44:	443c      	add	r4, r7
 8007e46:	70a0      	strb	r0, [r4, #2]
 8007e48:	e7e9      	b.n	8007e1e <register_code+0x10e>
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
 8007e4a:	20ea      	movs	r0, #234	; 0xea
 8007e4c:	e7b1      	b.n	8007db2 <register_code+0xa2>
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
 8007e4e:	2081      	movs	r0, #129	; 0x81
 8007e50:	e7ba      	b.n	8007dc8 <register_code+0xb8>
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
 8007e52:	20e2      	movs	r0, #226	; 0xe2
 8007e54:	e7ad      	b.n	8007db2 <register_code+0xa2>
 8007e56:	20e9      	movs	r0, #233	; 0xe9
 8007e58:	e7ab      	b.n	8007db2 <register_code+0xa2>
 8007e5a:	20b5      	movs	r0, #181	; 0xb5
 8007e5c:	e7a9      	b.n	8007db2 <register_code+0xa2>
 8007e5e:	20b6      	movs	r0, #182	; 0xb6
 8007e60:	e7a7      	b.n	8007db2 <register_code+0xa2>

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
 8007e62:	4a19      	ldr	r2, [pc, #100]	; (8007ec8 <register_code+0x1b8>)
 8007e64:	f000 0007 	and.w	r0, r0, #7
 8007e68:	6811      	ldr	r1, [r2, #0]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	440b      	add	r3, r1
 8007e6e:	7859      	ldrb	r1, [r3, #1]
 8007e70:	4082      	lsls	r2, r0
 8007e72:	430a      	orrs	r2, r1
 8007e74:	705a      	strb	r2, [r3, #1]
 8007e76:	e7d2      	b.n	8007e1e <register_code+0x10e>
 8007e78:	20b7      	movs	r0, #183	; 0xb7
 8007e7a:	e79a      	b.n	8007db2 <register_code+0xa2>
 8007e7c:	20cc      	movs	r0, #204	; 0xcc
 8007e7e:	e798      	b.n	8007db2 <register_code+0xa2>
 8007e80:	20cd      	movs	r0, #205	; 0xcd
 8007e82:	e796      	b.n	8007db2 <register_code+0xa2>
 8007e84:	f240 1083 	movw	r0, #387	; 0x183
 8007e88:	e793      	b.n	8007db2 <register_code+0xa2>
 8007e8a:	f44f 70c5 	mov.w	r0, #394	; 0x18a
 8007e8e:	e790      	b.n	8007db2 <register_code+0xa2>
 8007e90:	f44f 70c9 	mov.w	r0, #402	; 0x192
 8007e94:	e78d      	b.n	8007db2 <register_code+0xa2>
 8007e96:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8007e9a:	e78a      	b.n	8007db2 <register_code+0xa2>
 8007e9c:	f240 2021 	movw	r0, #545	; 0x221
 8007ea0:	e787      	b.n	8007db2 <register_code+0xa2>
 8007ea2:	f44f 7009 	mov.w	r0, #548	; 0x224
 8007ea6:	e784      	b.n	8007db2 <register_code+0xa2>
 8007ea8:	f240 2023 	movw	r0, #547	; 0x223
 8007eac:	e781      	b.n	8007db2 <register_code+0xa2>
 8007eae:	f240 2027 	movw	r0, #551	; 0x227
 8007eb2:	e77e      	b.n	8007db2 <register_code+0xa2>
 8007eb4:	f240 2026 	movw	r0, #550	; 0x226
 8007eb8:	e77b      	b.n	8007db2 <register_code+0xa2>
 8007eba:	f240 2025 	movw	r0, #549	; 0x225
 8007ebe:	e778      	b.n	8007db2 <register_code+0xa2>
 8007ec0:	20001230 	.word	0x20001230
 8007ec4:	20001232 	.word	0x20001232
 8007ec8:	2000122c 	.word	0x2000122c
 8007ecc:	200014fc 	.word	0x200014fc
 8007ed0:	08008900 	.word	0x08008900
 8007ed4:	f3af 8000 	nop.w
 8007ed8:	f3af 8000 	nop.w
 8007edc:	f3af 8000 	nop.w

08007ee0 <is_tap_key>:
    host_consumer_send(0);
#endif
}

bool is_tap_key(keypos_t key)
{
 8007ee0:	b500      	push	{lr}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	f8ad 0004 	strh.w	r0, [sp, #4]
    action_t action = layer_switch_get_action(key);
 8007ee8:	9801      	ldr	r0, [sp, #4]
 8007eea:	f7ff fbe9 	bl	80076c0 <layer_switch_get_action>
 8007eee:	f3c0 3303 	ubfx	r3, r0, #12, #4
 8007ef2:	3b02      	subs	r3, #2
 8007ef4:	2b0d      	cmp	r3, #13
 8007ef6:	d814      	bhi.n	8007f22 <is_tap_key+0x42>
 8007ef8:	2201      	movs	r2, #1
 8007efa:	409a      	lsls	r2, r3
 8007efc:	f412 5110 	ands.w	r1, r2, #9216	; 0x2400
 8007f00:	d004      	beq.n	8007f0c <is_tap_key+0x2c>
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
 8007f02:	f3c0 20c0 	ubfx	r0, r0, #11, #1
            return false;
    }
    return false;
}
 8007f06:	b003      	add	sp, #12
 8007f08:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f0c:	f240 3303 	movw	r3, #771	; 0x303
 8007f10:	4013      	ands	r3, r2
 8007f12:	b153      	cbz	r3, 8007f2a <is_tap_key+0x4a>
    switch (action.kind.id) {
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
 8007f14:	b2c3      	uxtb	r3, r0
 8007f16:	2bdf      	cmp	r3, #223	; 0xdf
 8007f18:	d90b      	bls.n	8007f32 <is_tap_key+0x52>
 8007f1a:	2bf0      	cmp	r3, #240	; 0xf0
 8007f1c:	d009      	beq.n	8007f32 <is_tap_key+0x52>
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
            }
            return false;
 8007f1e:	4608      	mov	r0, r1
 8007f20:	e7f1      	b.n	8007f06 <is_tap_key+0x26>
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
 8007f22:	2000      	movs	r0, #0
}
 8007f24:	b003      	add	sp, #12
 8007f26:	f85d fb04 	ldr.w	pc, [sp], #4
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
 8007f2a:	4618      	mov	r0, r3
}
 8007f2c:	b003      	add	sp, #12
 8007f2e:	f85d fb04 	ldr.w	pc, [sp], #4
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
 8007f32:	2001      	movs	r0, #1
 8007f34:	e7e7      	b.n	8007f06 <is_tap_key+0x26>
 8007f36:	bf00      	nop
 8007f38:	f3af 8000 	nop.w
 8007f3c:	f3af 8000 	nop.w

08007f40 <clear_keyboard_but_mods>:
    clear_mods();
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
 8007f40:	b508      	push	{r3, lr}
/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
 8007f42:	4b04      	ldr	r3, [pc, #16]	; (8007f54 <clear_keyboard_but_mods+0x14>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	701a      	strb	r2, [r3, #0]
    clear_weak_mods();
    clear_keys();
 8007f48:	f7ff fb4a 	bl	80075e0 <clear_keys>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    host_consumer_send(0);
#endif
}
 8007f4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    clear_keys();
    send_keyboard_report();
 8007f50:	f7ff bb56 	b.w	8007600 <send_keyboard_report>
 8007f54:	20001518 	.word	0x20001518
 8007f58:	f3af 8000 	nop.w
 8007f5c:	f3af 8000 	nop.w

08007f60 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
 8007f60:	4603      	mov	r3, r0
 8007f62:	b5f0      	push	{r4, r5, r6, r7, lr}
    keyevent_t event = record->event;
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
 8007f64:	7985      	ldrb	r5, [r0, #6]
 8007f66:	889a      	ldrh	r2, [r3, #4]
#endif
}

void process_action(keyrecord_t *record)
{
    keyevent_t event = record->event;
 8007f68:	6800      	ldr	r0, [r0, #0]
    }
#endif
}

void process_action(keyrecord_t *record)
{
 8007f6a:	b087      	sub	sp, #28
    keyevent_t event = record->event;
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
 8007f6c:	f3c5 1503 	ubfx	r5, r5, #4, #4
#endif
}

void process_action(keyrecord_t *record)
{
    keyevent_t event = record->event;
 8007f70:	9002      	str	r0, [sp, #8]
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
 8007f72:	b2ef      	uxtb	r7, r5
#endif
}

void process_action(keyrecord_t *record)
{
    keyevent_t event = record->event;
 8007f74:	7818      	ldrb	r0, [r3, #0]
 8007f76:	7859      	ldrb	r1, [r3, #1]
 8007f78:	789e      	ldrb	r6, [r3, #2]
 8007f7a:	b332      	cbz	r2, 8007fca <process_action+0x6a>
 8007f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f80:	f88d 0010 	strb.w	r0, [sp, #16]
 8007f84:	f88d 1011 	strb.w	r1, [sp, #17]
 8007f88:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8007f8c:	4294      	cmp	r4, r2
 8007f8e:	d01c      	beq.n	8007fca <process_action+0x6a>
    uint8_t tap_count = record->tap.count;
#endif

    if (IS_NOEVENT(event)) { return; }

    action_t action = layer_switch_get_action(event.key);
 8007f90:	f88d 0008 	strb.w	r0, [sp, #8]
 8007f94:	f88d 1009 	strb.w	r1, [sp, #9]
 8007f98:	9802      	ldr	r0, [sp, #8]
 8007f9a:	461c      	mov	r4, r3
 8007f9c:	f7ff fb90 	bl	80076c0 <layer_switch_get_action>
    dprint(" layer_state: "); layer_debug();
    dprint(" default_layer_state: "); default_layer_debug();
#endif
    dprintln();

    switch (action.kind.id) {
 8007fa0:	f3c0 3303 	ubfx	r3, r0, #12, #4
 8007fa4:	2b0b      	cmp	r3, #11
 8007fa6:	d810      	bhi.n	8007fca <process_action+0x6a>
 8007fa8:	e8df f003 	tbb	[pc, r3]
 8007fac:	38382323 	.word	0x38382323
 8007fb0:	0f0f0f0f 	.word	0x0f0f0f0f
 8007fb4:	11110f53 	.word	0x11110f53
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
 8007fb8:	2e00      	cmp	r6, #0
 8007fba:	f000 80fa 	beq.w	80081b2 <process_action+0x252>
                            if (tap_count == 0) {
 8007fbe:	2f00      	cmp	r7, #0
 8007fc0:	d043      	beq.n	800804a <process_action+0xea>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
 8007fc2:	2f01      	cmp	r7, #1
 8007fc4:	d141      	bne.n	800804a <process_action+0xea>

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
 8007fc6:	4aac      	ldr	r2, [pc, #688]	; (8008278 <process_action+0x318>)
 8007fc8:	7013      	strb	r3, [r2, #0]
            break;
#endif
        default:
            break;
    }
}
 8007fca:	b007      	add	sp, #28
 8007fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
 8007fce:	b2c4      	uxtb	r4, r0
 8007fd0:	f1a4 03e0 	sub.w	r3, r4, #224	; 0xe0
 8007fd4:	2b13      	cmp	r3, #19
 8007fd6:	f200 8108 	bhi.w	80081ea <process_action+0x28a>
 8007fda:	e8df f003 	tbb	[pc, r3]
 8007fde:	6060      	.short	0x6060
 8007fe0:	60606060 	.word	0x60606060
 8007fe4:	60606060 	.word	0x60606060
 8007fe8:	60606060 	.word	0x60606060
 8007fec:	7b8c6060 	.word	0x7b8c6060
 8007ff0:	7183      	.short	0x7183
    switch (action.kind.id) {
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 8007ff2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8007ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f040 8089 	bne.w	8008112 <process_action+0x1b2>
 8008000:	f3c0 2403 	ubfx	r4, r0, #8, #4
                                                                action.key.mods<<4;
                if (event.pressed) {
 8008004:	2e00      	cmp	r6, #0
 8008006:	f000 80bc 	beq.w	8008182 <process_action+0x222>
                    if (mods) {
 800800a:	2c00      	cmp	r4, #0
 800800c:	f040 80c8 	bne.w	80081a0 <process_action+0x240>
                        add_weak_mods(mods);
                        send_keyboard_report();
                    }
                    register_code(action.key.code);
 8008010:	b2c0      	uxtb	r0, r0
            break;
#endif
        default:
            break;
    }
}
 8008012:	b007      	add	sp, #28
 8008014:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
 8008018:	f7ff be7a 	b.w	8007d10 <register_code>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 800801c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8008020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008024:	2b20      	cmp	r3, #32
 8008026:	bf14      	ite	ne
 8008028:	0903      	lsrne	r3, r0, #4
 800802a:	f3c0 2303 	ubfxeq	r3, r0, #8, #4
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
 800802e:	b2c0      	uxtb	r0, r0
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 8008030:	bf18      	it	ne
 8008032:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
 8008036:	2800      	cmp	r0, #0
 8008038:	d0be      	beq.n	8007fb8 <process_action+0x58>
 800803a:	2801      	cmp	r0, #1
 800803c:	f040 8091 	bne.w	8008162 <process_action+0x202>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
 8008040:	2e00      	cmp	r6, #0
 8008042:	f000 80c4 	beq.w	80081ce <process_action+0x26e>
                            if (tap_count <= TAPPING_TOGGLE) {
 8008046:	2f05      	cmp	r7, #5
 8008048:	d8bf      	bhi.n	8007fca <process_action+0x6a>
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
 800804a:	2b00      	cmp	r3, #0
 800804c:	d0bd      	beq.n	8007fca <process_action+0x6a>
        add_mods(mods);
 800804e:	4618      	mov	r0, r3
 8008050:	e02f      	b.n	80080b2 <process_action+0x152>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
 8008052:	f410 7f40 	tst.w	r0, #768	; 0x300
 8008056:	d160      	bne.n	800811a <process_action+0x1ba>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
 8008058:	2e00      	cmp	r6, #0
 800805a:	d1b6      	bne.n	8007fca <process_action+0x6a>
                    uint8_t shift = action.layer_bitop.part*4;
 800805c:	08c3      	lsrs	r3, r0, #3
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 800805e:	f000 020f 	and.w	r2, r0, #15
 8008062:	f003 031c 	and.w	r3, r3, #28
 8008066:	fa02 f403 	lsl.w	r4, r2, r3
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 800806a:	06c2      	lsls	r2, r0, #27
 800806c:	d502      	bpl.n	8008074 <process_action+0x114>
 800806e:	260f      	movs	r6, #15
 8008070:	409e      	lsls	r6, r3
 8008072:	43f6      	mvns	r6, r6
                    switch (action.layer_bitop.op) {
 8008074:	f3c0 2081 	ubfx	r0, r0, #10, #2
 8008078:	2802      	cmp	r0, #2
 800807a:	f000 80f6 	beq.w	800826a <process_action+0x30a>
 800807e:	2803      	cmp	r0, #3
 8008080:	f000 80e8 	beq.w	8008254 <process_action+0x2f4>
 8008084:	2801      	cmp	r0, #1

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
 8008086:	4a7d      	ldr	r2, [pc, #500]	; (800827c <process_action+0x31c>)
 8008088:	f000 80cf 	beq.w	800822a <process_action+0x2ca>
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
 800808c:	6813      	ldr	r3, [r2, #0]
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
 800808e:	4326      	orrs	r6, r4
 8008090:	401e      	ands	r6, r3

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
 8008092:	6016      	str	r6, [r2, #0]
            break;
#endif
        default:
            break;
    }
}
 8008094:	b007      	add	sp, #28
 8008096:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
 800809a:	f7ff bf51 	b.w	8007f40 <clear_keyboard_but_mods>
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
 800809e:	f3c0 2004 	ubfx	r0, r0, #8, #5
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
 80080a2:	2e00      	cmp	r6, #0
 80080a4:	f000 80ab 	beq.w	80081fe <process_action+0x29e>
                        layer_on(action.layer_tap.val);
 80080a8:	f7ff fb42 	bl	8007730 <layer_on>
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
 80080ac:	f014 000f 	ands.w	r0, r4, #15
 80080b0:	d08b      	beq.n	8007fca <process_action+0x6a>
        add_mods(mods);
 80080b2:	f7ff fa8d 	bl	80075d0 <add_mods>
            break;
#endif
        default:
            break;
    }
}
 80080b6:	b007      	add	sp, #28
 80080b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

void register_mods(uint8_t mods)
{
    if (mods) {
        add_mods(mods);
        send_keyboard_report();
 80080bc:	f7ff baa0 	b.w	8007600 <send_keyboard_report>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
 80080c0:	2e00      	cmp	r6, #0
 80080c2:	f000 80a5 	beq.w	8008210 <process_action+0x2b0>
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
 80080c6:	f3c0 2004 	ubfx	r0, r0, #8, #5
 80080ca:	2301      	movs	r3, #1

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 80080cc:	4a6c      	ldr	r2, [pc, #432]	; (8008280 <process_action+0x320>)
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
 80080ce:	4083      	lsls	r3, r0

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 80080d0:	6013      	str	r3, [r2, #0]
 80080d2:	e7df      	b.n	8008094 <process_action+0x134>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
 80080d4:	b146      	cbz	r6, 80080e8 <process_action+0x188>
 80080d6:	f3c0 2004 	ubfx	r0, r0, #8, #5
            break;
#endif
        default:
            break;
    }
}
 80080da:	b007      	add	sp, #28
 80080dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
 80080e0:	f7ff bb26 	b.w	8007730 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
 80080e4:	2e00      	cmp	r6, #0
 80080e6:	d0f6      	beq.n	80080d6 <process_action+0x176>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
 80080e8:	f3c0 2004 	ubfx	r0, r0, #8, #5
            break;
#endif
        default:
            break;
    }
}
 80080ec:	b007      	add	sp, #28
 80080ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
 80080f2:	f7ff bb0d 	b.w	8007710 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
 80080f6:	2e00      	cmp	r6, #0
 80080f8:	d07d      	beq.n	80081f6 <process_action+0x296>
                        if (tap_count < TAPPING_TOGGLE) {
 80080fa:	2f04      	cmp	r7, #4
 80080fc:	f63f af65 	bhi.w	8007fca <process_action+0x6a>
 8008100:	495f      	ldr	r1, [pc, #380]	; (8008280 <process_action+0x320>)
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
 8008102:	f3c0 2004 	ubfx	r0, r0, #8, #5
 8008106:	680b      	ldr	r3, [r1, #0]
 8008108:	2201      	movs	r2, #1
 800810a:	4082      	lsls	r2, r0
 800810c:	4053      	eors	r3, r2

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 800810e:	600b      	str	r3, [r1, #0]
 8008110:	e7c0      	b.n	8008094 <process_action+0x134>
    switch (action.kind.id) {
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 8008112:	0904      	lsrs	r4, r0, #4
 8008114:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8008118:	e774      	b.n	8008004 <process_action+0xa4>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 800811a:	2e00      	cmp	r6, #0
 800811c:	d03d      	beq.n	800819a <process_action+0x23a>
 800811e:	f3c0 2300 	ubfx	r3, r0, #8, #1
 8008122:	2b00      	cmp	r3, #0
 8008124:	f43f af51 	beq.w	8007fca <process_action+0x6a>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
 8008128:	08c1      	lsrs	r1, r0, #3
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 800812a:	f000 030f 	and.w	r3, r0, #15
 800812e:	f001 011c 	and.w	r1, r1, #28
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 8008132:	f000 0210 	and.w	r2, r0, #16
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 8008136:	fa03 f401 	lsl.w	r4, r3, r1
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 800813a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 800813e:	b112      	cbz	r2, 8008146 <process_action+0x1e6>
 8008140:	230f      	movs	r3, #15
 8008142:	408b      	lsls	r3, r1
 8008144:	43db      	mvns	r3, r3
                    switch (action.layer_bitop.op) {
 8008146:	f3c0 2081 	ubfx	r0, r0, #10, #2
 800814a:	2802      	cmp	r0, #2
 800814c:	d07c      	beq.n	8008248 <process_action+0x2e8>
 800814e:	2803      	cmp	r0, #3
 8008150:	d070      	beq.n	8008234 <process_action+0x2d4>
 8008152:	2801      	cmp	r0, #1
 8008154:	494a      	ldr	r1, [pc, #296]	; (8008280 <process_action+0x320>)
 8008156:	d063      	beq.n	8008220 <process_action+0x2c0>
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
 8008158:	680a      	ldr	r2, [r1, #0]
                        case OP_BIT_AND: layer_and(bits | mask); break;
 800815a:	4323      	orrs	r3, r4
 800815c:	4013      	ands	r3, r2

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 800815e:	600b      	str	r3, [r1, #0]
 8008160:	e798      	b.n	8008094 <process_action+0x134>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
 8008162:	2e00      	cmp	r6, #0
 8008164:	d03a      	beq.n	80081dc <process_action+0x27c>
                            if (tap_count > 0) {
 8008166:	2f00      	cmp	r7, #0
 8008168:	f43f af6f 	beq.w	800804a <process_action+0xea>
                                if (record->tap.interrupted) {
 800816c:	79a2      	ldrb	r2, [r4, #6]
 800816e:	07d1      	lsls	r1, r2, #31
 8008170:	f57f af4f 	bpl.w	8008012 <process_action+0xb2>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
 8008174:	f36f 1207 	bfc	r2, #4, #4
 8008178:	71a2      	strb	r2, [r4, #6]
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
 800817a:	2b00      	cmp	r3, #0
 800817c:	f43f af25 	beq.w	8007fca <process_action+0x6a>
 8008180:	e765      	b.n	800804e <process_action+0xee>
                        add_weak_mods(mods);
                        send_keyboard_report();
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
 8008182:	b2c0      	uxtb	r0, r0
 8008184:	f7ff fd5c 	bl	8007c40 <unregister_code>
                    if (mods) {
 8008188:	2c00      	cmp	r4, #0
 800818a:	f43f af1e 	beq.w	8007fca <process_action+0x6a>
void clear_mods(void) { real_mods = 0; }

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 800818e:	4a3d      	ldr	r2, [pc, #244]	; (8008284 <process_action+0x324>)
 8008190:	7813      	ldrb	r3, [r2, #0]
 8008192:	ea23 0404 	bic.w	r4, r3, r4
 8008196:	7014      	strb	r4, [r2, #0]
 8008198:	e78d      	b.n	80080b6 <process_action+0x156>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 800819a:	f3c0 2340 	ubfx	r3, r0, #9, #1
 800819e:	e7c0      	b.n	8008122 <process_action+0x1c2>
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 80081a0:	4a38      	ldr	r2, [pc, #224]	; (8008284 <process_action+0x324>)
 80081a2:	9001      	str	r0, [sp, #4]
 80081a4:	7813      	ldrb	r3, [r2, #0]
 80081a6:	431c      	orrs	r4, r3
 80081a8:	7014      	strb	r4, [r2, #0]
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
                                                                action.key.mods<<4;
                if (event.pressed) {
                    if (mods) {
                        add_weak_mods(mods);
                        send_keyboard_report();
 80081aa:	f7ff fa29 	bl	8007600 <send_keyboard_report>
 80081ae:	9801      	ldr	r0, [sp, #4]
 80081b0:	e72e      	b.n	8008010 <process_action+0xb0>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
 80081b2:	2f00      	cmp	r7, #0
 80081b4:	d068      	beq.n	8008288 <process_action+0x328>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
 80081b6:	2f01      	cmp	r7, #1
 80081b8:	f43f af07 	beq.w	8007fca <process_action+0x6a>
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
 80081bc:	4a2e      	ldr	r2, [pc, #184]	; (8008278 <process_action+0x318>)
 80081be:	7016      	strb	r6, [r2, #0]
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f43f af02 	beq.w	8007fca <process_action+0x6a>
        del_mods(mods);
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7ff f9fa 	bl	80075c0 <del_mods>
 80081cc:	e773      	b.n	80080b6 <process_action+0x156>
                        if (event.pressed) {
                            if (tap_count <= TAPPING_TOGGLE) {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
 80081ce:	2f04      	cmp	r7, #4
 80081d0:	f63f aefb 	bhi.w	8007fca <process_action+0x6a>
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f43f aef8 	beq.w	8007fca <process_action+0x6a>
 80081da:	e7f4      	b.n	80081c6 <process_action+0x266>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
 80081dc:	2f00      	cmp	r7, #0
 80081de:	d0f9      	beq.n	80081d4 <process_action+0x274>
            break;
#endif
        default:
            break;
    }
}
 80081e0:	b007      	add	sp, #28
 80081e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
 80081e6:	f7ff bd2b 	b.w	8007c40 <unregister_code>
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
 80081ea:	b1a6      	cbz	r6, 8008216 <process_action+0x2b6>
                        if (tap_count > 0) {
 80081ec:	2f00      	cmp	r7, #0
 80081ee:	f43f af72 	beq.w	80080d6 <process_action+0x176>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
 80081f2:	4620      	mov	r0, r4
 80081f4:	e70d      	b.n	8008012 <process_action+0xb2>
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
 80081f6:	2f05      	cmp	r7, #5
 80081f8:	f63f aee7 	bhi.w	8007fca <process_action+0x6a>
 80081fc:	e780      	b.n	8008100 <process_action+0x1a0>
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
 80081fe:	f7ff fa87 	bl	8007710 <layer_off>
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
 8008202:	f014 000f 	ands.w	r0, r4, #15
 8008206:	f43f aee0 	beq.w	8007fca <process_action+0x6a>
        del_mods(mods);
 800820a:	f7ff f9d9 	bl	80075c0 <del_mods>
 800820e:	e752      	b.n	80080b6 <process_action+0x156>
 8008210:	4b1b      	ldr	r3, [pc, #108]	; (8008280 <process_action+0x320>)
 8008212:	601e      	str	r6, [r3, #0]
 8008214:	e73e      	b.n	8008094 <process_action+0x134>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
 8008216:	2f00      	cmp	r7, #0
 8008218:	f43f af66 	beq.w	80080e8 <process_action+0x188>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
 800821c:	4620      	mov	r0, r4
 800821e:	e7df      	b.n	80081e0 <process_action+0x280>
 8008220:	680a      	ldr	r2, [r1, #0]
 8008222:	4322      	orrs	r2, r4
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
 8008224:	4313      	orrs	r3, r2

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 8008226:	600b      	str	r3, [r1, #0]
 8008228:	e734      	b.n	8008094 <process_action+0x134>
 800822a:	6813      	ldr	r3, [r2, #0]
 800822c:	4323      	orrs	r3, r4
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
 800822e:	431e      	orrs	r6, r3

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
 8008230:	6016      	str	r6, [r2, #0]
 8008232:	e72f      	b.n	8008094 <process_action+0x134>

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 8008234:	4d12      	ldr	r5, [pc, #72]	; (8008280 <process_action+0x320>)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
 8008236:	682a      	ldr	r2, [r5, #0]
 8008238:	4013      	ands	r3, r2

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 800823a:	602b      	str	r3, [r5, #0]
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
 800823c:	f7ff fe80 	bl	8007f40 <clear_keyboard_but_mods>
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
 8008240:	682b      	ldr	r3, [r5, #0]
 8008242:	4323      	orrs	r3, r4

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 8008244:	602b      	str	r3, [r5, #0]
 8008246:	e725      	b.n	8008094 <process_action+0x134>
 8008248:	490d      	ldr	r1, [pc, #52]	; (8008280 <process_action+0x320>)
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
 800824a:	4323      	orrs	r3, r4
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
 800824c:	680a      	ldr	r2, [r1, #0]
 800824e:	4053      	eors	r3, r2

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
 8008250:	600b      	str	r3, [r1, #0]
 8008252:	e71f      	b.n	8008094 <process_action+0x134>

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
 8008254:	4d09      	ldr	r5, [pc, #36]	; (800827c <process_action+0x31c>)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
 8008256:	682b      	ldr	r3, [r5, #0]
 8008258:	401e      	ands	r6, r3

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
 800825a:	602e      	str	r6, [r5, #0]
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
 800825c:	f7ff fe70 	bl	8007f40 <clear_keyboard_but_mods>
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
 8008260:	682b      	ldr	r3, [r5, #0]
 8008262:	ea44 0603 	orr.w	r6, r4, r3

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
 8008266:	602e      	str	r6, [r5, #0]
 8008268:	e714      	b.n	8008094 <process_action+0x134>
 800826a:	4a04      	ldr	r2, [pc, #16]	; (800827c <process_action+0x31c>)
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 800826c:	4326      	orrs	r6, r4
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
 800826e:	6813      	ldr	r3, [r2, #0]
 8008270:	405e      	eors	r6, r3

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
 8008272:	6016      	str	r6, [r2, #0]
 8008274:	e70e      	b.n	8008094 <process_action+0x134>
 8008276:	bf00      	nop
 8008278:	20001504 	.word	0x20001504
 800827c:	2000157c 	.word	0x2000157c
 8008280:	20001500 	.word	0x20001500
 8008284:	20001518 	.word	0x20001518
 8008288:	4a02      	ldr	r2, [pc, #8]	; (8008294 <process_action+0x334>)
 800828a:	7015      	strb	r5, [r2, #0]
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
 800828c:	2b00      	cmp	r3, #0
 800828e:	f43f ae9c 	beq.w	8007fca <process_action+0x6a>
 8008292:	e798      	b.n	80081c6 <process_action+0x266>
 8008294:	20001504 	.word	0x20001504
 8008298:	f3af 8000 	nop.w
 800829c:	f3af 8000 	nop.w

080082a0 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
 80082a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082a4:	b08c      	sub	sp, #48	; 0x30
 80082a6:	e88d 0003 	stmia.w	sp, {r0, r1}
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
 80082aa:	2200      	movs	r2, #0
 80082ac:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80082b0:	9207      	str	r2, [sp, #28]
 80082b2:	9006      	str	r0, [sp, #24]
 80082b4:	f8ad 101c 	strh.w	r1, [sp, #28]
 80082b8:	ab06      	add	r3, sp, #24
 80082ba:	ac08      	add	r4, sp, #32
 80082bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80082c0:	e884 0003 	stmia.w	r4, {r0, r1}
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    if (process_tapping(&record)) {
 80082c4:	4620      	mov	r0, r4
 80082c6:	f7ff fabb 	bl	8007840 <process_tapping.lto_priv.39>
 80082ca:	4607      	mov	r7, r0
 80082cc:	b328      	cbz	r0, 800831a <action_exec+0x7a>
 80082ce:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80082d2:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80082d6:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 80082da:	b9cb      	cbnz	r3, 8008310 <action_exec+0x70>
 80082dc:	4e30      	ldr	r6, [pc, #192]	; (80083a0 <action_exec+0x100>)
 80082de:	4d31      	ldr	r5, [pc, #196]	; (80083a4 <action_exec+0x104>)
 80082e0:	f896 8000 	ldrb.w	r8, [r6]
 80082e4:	782c      	ldrb	r4, [r5, #0]

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
 80082e6:	4544      	cmp	r4, r8
 80082e8:	d00f      	beq.n	800830a <action_exec+0x6a>
 80082ea:	4f2f      	ldr	r7, [pc, #188]	; (80083a8 <action_exec+0x108>)
 80082ec:	e007      	b.n	80082fe <action_exec+0x5e>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
 80082ee:	782c      	ldrb	r4, [r5, #0]

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
 80082f0:	7833      	ldrb	r3, [r6, #0]
 80082f2:	3401      	adds	r4, #1
 80082f4:	f004 0407 	and.w	r4, r4, #7
 80082f8:	42a3      	cmp	r3, r4
 80082fa:	702c      	strb	r4, [r5, #0]
 80082fc:	d005      	beq.n	800830a <action_exec+0x6a>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
 80082fe:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
 8008302:	f7ff fa9d 	bl	8007840 <process_tapping.lto_priv.39>
 8008306:	2800      	cmp	r0, #0
 8008308:	d1f1      	bne.n	80082ee <action_exec+0x4e>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
 800830a:	b00c      	add	sp, #48	; 0x30
 800830c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008310:	f88d 1008 	strb.w	r1, [sp, #8]
 8008314:	f88d 2009 	strb.w	r2, [sp, #9]
 8008318:	e7e0      	b.n	80082dc <action_exec+0x3c>
 800831a:	f89d 6020 	ldrb.w	r6, [sp, #32]
 800831e:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
 8008322:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8008326:	ab0a      	add	r3, sp, #40	; 0x28
 8008328:	e894 0003 	ldmia.w	r4, {r0, r1}
 800832c:	e883 0003 	stmia.w	r3, {r0, r1}
 8008330:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 8008334:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8008338:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800833c:	2a00      	cmp	r2, #0
 800833e:	d0cd      	beq.n	80082dc <action_exec+0x3c>
 8008340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008344:	f88d 6010 	strb.w	r6, [sp, #16]
 8008348:	f88d 5011 	strb.w	r5, [sp, #17]
 800834c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8008350:	4291      	cmp	r1, r2
 8008352:	d0c3      	beq.n	80082dc <action_exec+0x3c>
{
    if (IS_NOEVENT(record.event)) {
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
 8008354:	4e12      	ldr	r6, [pc, #72]	; (80083a0 <action_exec+0x100>)
 8008356:	4d13      	ldr	r5, [pc, #76]	; (80083a4 <action_exec+0x104>)
 8008358:	7832      	ldrb	r2, [r6, #0]
 800835a:	782c      	ldrb	r4, [r5, #0]
 800835c:	f102 0801 	add.w	r8, r2, #1
 8008360:	f008 0807 	and.w	r8, r8, #7
 8008364:	45a0      	cmp	r8, r4
 8008366:	d00d      	beq.n	8008384 <action_exec+0xe4>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
 8008368:	e893 0003 	ldmia.w	r3, {r0, r1}
 800836c:	4f0e      	ldr	r7, [pc, #56]	; (80083a8 <action_exec+0x108>)
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
 800836e:	fa5f f888 	uxtb.w	r8, r8
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
 8008372:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
 8008376:	f886 8000 	strb.w	r8, [r6]
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
 800837a:	e887 0003 	stmia.w	r7, {r0, r1}
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
 800837e:	f7ff f9e7 	bl	8007750 <debug_waiting_buffer.lto_priv.40>
 8008382:	e7b0      	b.n	80082e6 <action_exec+0x46>
/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
 8008384:	4b09      	ldr	r3, [pc, #36]	; (80083ac <action_exec+0x10c>)
/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
void del_mods(uint8_t mods) { real_mods &= ~mods; }
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
 8008386:	4a0a      	ldr	r2, [pc, #40]	; (80083b0 <action_exec+0x110>)
/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
 8008388:	701f      	strb	r7, [r3, #0]
/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
void del_mods(uint8_t mods) { real_mods &= ~mods; }
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
 800838a:	7017      	strb	r7, [r2, #0]
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    clear_keys();
 800838c:	f7ff f928 	bl	80075e0 <clear_keys>
    send_keyboard_report();
 8008390:	f7ff f936 	bl	8007600 <send_keyboard_report>
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
 8008394:	4b07      	ldr	r3, [pc, #28]	; (80083b4 <action_exec+0x114>)
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
 8008396:	7037      	strb	r7, [r6, #0]
    waiting_buffer_tail = 0;
 8008398:	702f      	strb	r7, [r5, #0]
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
 800839a:	601f      	str	r7, [r3, #0]
 800839c:	605f      	str	r7, [r3, #4]
 800839e:	e7b4      	b.n	800830a <action_exec+0x6a>
 80083a0:	20001590 	.word	0x20001590
 80083a4:	20001474 	.word	0x20001474
 80083a8:	20001528 	.word	0x20001528
 80083ac:	20001518 	.word	0x20001518
 80083b0:	20001519 	.word	0x20001519
 80083b4:	20001520 	.word	0x20001520
 80083b8:	f3af 8000 	nop.w
 80083bc:	f3af 8000 	nop.w

080083c0 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
 80083c0:	4b02      	ldr	r3, [pc, #8]	; (80083cc <host_keyboard_leds+0xc>)
 80083c2:	6818      	ldr	r0, [r3, #0]
 80083c4:	b108      	cbz	r0, 80083ca <host_keyboard_leds+0xa>
    return (*driver->keyboard_leds)();
 80083c6:	6803      	ldr	r3, [r0, #0]
 80083c8:	4718      	bx	r3
}
 80083ca:	4770      	bx	lr
 80083cc:	20001510 	.word	0x20001510

080083d0 <matrix_scan>:
    wait_ms(500);
    LED_OFF();
}

uint8_t matrix_scan(void)
{
 80083d0:	b538      	push	{r3, r4, r5, lr}
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        wait_us(30);  // without this wait read unstable value.
 80083d2:	2001      	movs	r0, #1
 80083d4:	f7fe f92c 	bl	8006630 <chThdSleep>
}

/* Returns status of switches(1:on, 0:off) */
static matrix_row_t read_cols(void)
{
    return ((palReadPad(MAPLE_BUTTON_PORT, MAPLE_BUTTON_PIN)==PAL_LOW) ? 0 : (1<<0));
 80083d8:	4b1a      	ldr	r3, [pc, #104]	; (8008444 <matrix_scan+0x74>)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        wait_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
 80083da:	4a1b      	ldr	r2, [pc, #108]	; (8008448 <matrix_scan+0x78>)
}

/* Returns status of switches(1:on, 0:off) */
static matrix_row_t read_cols(void)
{
    return ((palReadPad(MAPLE_BUTTON_PORT, MAPLE_BUTTON_PIN)==PAL_LOW) ? 0 : (1<<0));
 80083dc:	689b      	ldr	r3, [r3, #8]
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        wait_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
 80083de:	7811      	ldrb	r1, [r2, #0]
}

/* Returns status of switches(1:on, 0:off) */
static matrix_row_t read_cols(void)
{
    return ((palReadPad(MAPLE_BUTTON_PORT, MAPLE_BUTTON_PIN)==PAL_LOW) ? 0 : (1<<0));
 80083e0:	f3c3 2300 	ubfx	r3, r3, #8, #1
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        wait_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
 80083e4:	4299      	cmp	r1, r3
 80083e6:	d01f      	beq.n	8008428 <matrix_scan+0x58>
            matrix_debouncing[i] = cols;
            if (debouncing) {
 80083e8:	4c18      	ldr	r4, [pc, #96]	; (800844c <matrix_scan+0x7c>)
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        wait_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
 80083ea:	7013      	strb	r3, [r2, #0]
            if (debouncing) {
 80083ec:	7823      	ldrb	r3, [r4, #0]
 80083ee:	b933      	cbnz	r3, 80083fe <matrix_scan+0x2e>
        }
        unselect_rows();
    }

    if (debouncing) {
        if (--debouncing) {
 80083f0:	2304      	movs	r3, #4
 80083f2:	7023      	strb	r3, [r4, #0]
            wait_ms(1);
 80083f4:	2002      	movs	r0, #2
 80083f6:	f7fe f91b 	bl	8006630 <chThdSleep>
            }
        }
    }

    return 1;
}
 80083fa:	2001      	movs	r0, #1
 80083fc:	bd38      	pop	{r3, r4, r5, pc}
        wait_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
 80083fe:	4d14      	ldr	r5, [pc, #80]	; (8008450 <matrix_scan+0x80>)
 8008400:	782b      	ldrb	r3, [r5, #0]
 8008402:	07d9      	lsls	r1, r3, #31
 8008404:	d5f4      	bpl.n	80083f0 <matrix_scan+0x20>
 8008406:	4813      	ldr	r0, [pc, #76]	; (8008454 <matrix_scan+0x84>)
 8008408:	f7fe ffda 	bl	80073c0 <tfp_printf>
 800840c:	782b      	ldrb	r3, [r5, #0]
 800840e:	07da      	lsls	r2, r3, #31
 8008410:	d5ee      	bpl.n	80083f0 <matrix_scan+0x20>
 8008412:	4811      	ldr	r0, [pc, #68]	; (8008458 <matrix_scan+0x88>)
 8008414:	7821      	ldrb	r1, [r4, #0]
 8008416:	f7fe ffd3 	bl	80073c0 <tfp_printf>
 800841a:	782b      	ldrb	r3, [r5, #0]
 800841c:	07db      	lsls	r3, r3, #31
 800841e:	d5e7      	bpl.n	80083f0 <matrix_scan+0x20>
 8008420:	480e      	ldr	r0, [pc, #56]	; (800845c <matrix_scan+0x8c>)
 8008422:	f7fe ffcd 	bl	80073c0 <tfp_printf>
 8008426:	e7e3      	b.n	80083f0 <matrix_scan+0x20>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
 8008428:	4a08      	ldr	r2, [pc, #32]	; (800844c <matrix_scan+0x7c>)
 800842a:	7813      	ldrb	r3, [r2, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0e4      	beq.n	80083fa <matrix_scan+0x2a>
 8008430:	3b01      	subs	r3, #1
 8008432:	b2db      	uxtb	r3, r3
        if (--debouncing) {
 8008434:	7013      	strb	r3, [r2, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1dc      	bne.n	80083f4 <matrix_scan+0x24>
            wait_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
 800843a:	4b09      	ldr	r3, [pc, #36]	; (8008460 <matrix_scan+0x90>)
            }
        }
    }

    return 1;
}
 800843c:	2001      	movs	r0, #1
    if (debouncing) {
        if (--debouncing) {
            wait_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
 800843e:	7019      	strb	r1, [r3, #0]
            }
        }
    }

    return 1;
}
 8008440:	bd38      	pop	{r3, r4, r5, pc}
 8008442:	bf00      	nop
 8008444:	40010c00 	.word	0x40010c00
 8008448:	20001594 	.word	0x20001594
 800844c:	20001231 	.word	0x20001231
 8008450:	200014fc 	.word	0x200014fc
 8008454:	08008920 	.word	0x08008920
 8008458:	0800886c 	.word	0x0800886c
 800845c:	0800891c 	.word	0x0800891c
 8008460:	2000159c 	.word	0x2000159c
 8008464:	f3af 8000 	nop.w
 8008468:	f3af 8000 	nop.w
 800846c:	f3af 8000 	nop.w

08008470 <memset>:
 8008470:	b470      	push	{r4, r5, r6}
 8008472:	0784      	lsls	r4, r0, #30
 8008474:	d046      	beq.n	8008504 <memset+0x94>
 8008476:	1e54      	subs	r4, r2, #1
 8008478:	2a00      	cmp	r2, #0
 800847a:	d041      	beq.n	8008500 <memset+0x90>
 800847c:	b2cd      	uxtb	r5, r1
 800847e:	4603      	mov	r3, r0
 8008480:	e002      	b.n	8008488 <memset+0x18>
 8008482:	1e62      	subs	r2, r4, #1
 8008484:	b3e4      	cbz	r4, 8008500 <memset+0x90>
 8008486:	4614      	mov	r4, r2
 8008488:	f803 5b01 	strb.w	r5, [r3], #1
 800848c:	079a      	lsls	r2, r3, #30
 800848e:	d1f8      	bne.n	8008482 <memset+0x12>
 8008490:	2c03      	cmp	r4, #3
 8008492:	d92e      	bls.n	80084f2 <memset+0x82>
 8008494:	b2cd      	uxtb	r5, r1
 8008496:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800849a:	2c0f      	cmp	r4, #15
 800849c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80084a0:	d919      	bls.n	80084d6 <memset+0x66>
 80084a2:	4626      	mov	r6, r4
 80084a4:	f103 0210 	add.w	r2, r3, #16
 80084a8:	3e10      	subs	r6, #16
 80084aa:	2e0f      	cmp	r6, #15
 80084ac:	f842 5c10 	str.w	r5, [r2, #-16]
 80084b0:	f842 5c0c 	str.w	r5, [r2, #-12]
 80084b4:	f842 5c08 	str.w	r5, [r2, #-8]
 80084b8:	f842 5c04 	str.w	r5, [r2, #-4]
 80084bc:	f102 0210 	add.w	r2, r2, #16
 80084c0:	d8f2      	bhi.n	80084a8 <memset+0x38>
 80084c2:	f1a4 0210 	sub.w	r2, r4, #16
 80084c6:	f022 020f 	bic.w	r2, r2, #15
 80084ca:	f004 040f 	and.w	r4, r4, #15
 80084ce:	3210      	adds	r2, #16
 80084d0:	2c03      	cmp	r4, #3
 80084d2:	4413      	add	r3, r2
 80084d4:	d90d      	bls.n	80084f2 <memset+0x82>
 80084d6:	461e      	mov	r6, r3
 80084d8:	4622      	mov	r2, r4
 80084da:	3a04      	subs	r2, #4
 80084dc:	2a03      	cmp	r2, #3
 80084de:	f846 5b04 	str.w	r5, [r6], #4
 80084e2:	d8fa      	bhi.n	80084da <memset+0x6a>
 80084e4:	1f22      	subs	r2, r4, #4
 80084e6:	f022 0203 	bic.w	r2, r2, #3
 80084ea:	3204      	adds	r2, #4
 80084ec:	4413      	add	r3, r2
 80084ee:	f004 0403 	and.w	r4, r4, #3
 80084f2:	b12c      	cbz	r4, 8008500 <memset+0x90>
 80084f4:	b2c9      	uxtb	r1, r1
 80084f6:	441c      	add	r4, r3
 80084f8:	f803 1b01 	strb.w	r1, [r3], #1
 80084fc:	42a3      	cmp	r3, r4
 80084fe:	d1fb      	bne.n	80084f8 <memset+0x88>
 8008500:	bc70      	pop	{r4, r5, r6}
 8008502:	4770      	bx	lr
 8008504:	4614      	mov	r4, r2
 8008506:	4603      	mov	r3, r0
 8008508:	e7c2      	b.n	8008490 <memset+0x20>
 800850a:	bf00      	nop
 800850c:	0000      	movs	r0, r0
	...

08008510 <keyboard_hid_report_desc_data>:
 8008510:	0105 0609 01a1 0175 0895 0705 e019 e729     ......u.......).
 8008520:	0015 0125 0281 0195 0875 0381 0595 0175     ..%.....u.....u.
 8008530:	0805 0119 0529 0291 0195 0375 0391 0695     ....).....u.....
 8008540:	0875 0015 ff25 0705 0019 ff29 0081 00c0     u...%.....).....

08008550 <usb_device_descriptor_data>:
 8008550:	0112 0200 0000 4000 feed 6057 0001 0201     .......@..W`....
 8008560:	0103 0000 0000 0000 0000 0000 0000 0000     ................

08008570 <usb_string_langid>:
 8008570:	0304 0409 0000 0000 0000 0000 0000 0000     ................

08008580 <zero_status>:
	...

08008590 <usb_string_description>:
 8008590:	0328 0043 0068 0069 0062 0069 004f 0053     (.C.h.i.b.i.O.S.
 80085a0:	0020 0054 004d 004b 0020 0050 0068 0061      .T.M.K. .P.h.a.
 80085b0:	006e 0074 006f 006d 0000 0000 0000 0000     n.t.o.m.........

080085c0 <hid_configuration_descriptor>:
 80085c0:	0054 0000 8710 0800 0000 0000 0000 0000     T...............

080085d0 <console_hid_descriptor>:
 80085d0:	0009 0000 873b 0800 0000 0000 0000 0000     ....;...........

080085e0 <kbd_ep_config>:
 80085e0:	0003 0000 0000 0000 6711 0800 0000 0000     .........g......
 80085f0:	0008 0000 1248 2000 0000 0000 0002 0000     ....H.. ........
	...

08008610 <usb_strings>:
 8008610:	0004 0000 8570 0800 000c 0000 8640 0800     ....p.......@...
 8008620:	0028 0000 8590 0800 0016 0000 1200 2000     (.............. 

08008630 <active_status>:
	...

08008640 <usb_string_vendor>:
 8008640:	030c 0054 004d 004b 0020 00c6 0000 0000     ..T.M.K. .......

08008650 <CSWTCH.30>:
 8008650:	0400 0000 0600 0000 0000 0000 0000 0000     ................

08008660 <console_ep_config>:
 8008660:	0003 0000 0000 0000 69c1 0800 0000 0000     .........i......
 8008670:	0010 0000 1258 2000 0000 0000 0002 0000     ....X.. ........
	...

08008690 <keyboard_hid_descriptor>:
 8008690:	0009 0000 8722 0800 0000 0000 0000 0000     ...."...........

080086a0 <keyboard_hid_report_descriptor>:
 80086a0:	003f 0000 8510 0800 0000 0000 0000 0000     ?...............

080086b0 <console_hid_report_desc_data>:
 80086b0:	3106 09ff a174 7553 1508 2600 00ff 1095     .1..t.Su...&....
 80086c0:	7509 0281 00c0 0000 0000 0000 0000 0000     .u..............

080086d0 <nkro_hid_report_desc_data>:
 80086d0:	0105 0609 01a1 0175 0895 0705 e019 e729     ......u.......).
 80086e0:	0015 0125 0281 0595 0175 0805 0119 0529     ..%.....u.....).
 80086f0:	0291 0195 0375 0391 7895 0175 0015 0125     ....u....xu...%.
 8008700:	0705 0019 7729 0281 00c0 0000 0000 0000     ....)w..........

08008710 <hid_configuration_descriptor_data>:
 8008710:	0209 0054 0103 a000 0932 0004 0100 0103     ..T.....2.......
 8008720:	0001 2109 0111 0100 3f22 0700 8105 0803     ...!...."?......
 8008730:	0a00 0409 0002 0301 0000 0900 1121 0001     ............!...
 8008740:	2201 0015 0507 0383 0010 0901 0404 0100     ."..............
 8008750:	0003 0000 2109 0111 0100 3922 0700 8505     .....!...."9....
 8008760:	1003 0100 0000 0000 0000 0000 0000 0000     ................

08008770 <nkro_hid_descriptor>:
 8008770:	0009 0000 873b 0800 0000 0000 0000 0000     ....;...........

08008780 <console_hid_report_descriptor>:
 8008780:	0015 0000 86b0 0800 0000 0000 0000 0000     ................

08008790 <halted_status>:
 8008790:	0001 0000 0000 0000 0000 0000 0000 0000     ................

080087a0 <usb_device_descriptor>:
 80087a0:	0012 0000 8550 0800 0000 0000 0000 0000     ....P...........

080087b0 <nkro_hid_report_descriptor>:
 80087b0:	0039 0000 86d0 0800 0000 0000 0000 0000     9...............

080087c0 <nkro_ep_config>:
 80087c0:	0003 0000 0000 0000 6701 0800 0000 0000     .........g......
 80087d0:	0010 0000 1238 2000 0000 0000 0002 0000     ....8.. ........
	...

080087f0 <ch_debug>:
 80087f0:	616d 6e69 1600 1840 0204 0844 100c 1814     main..@...D.....
 8008800:	1c00 1e1d 0000 0000 0000 0000 0000 0000     ................

08008810 <usbcfg>:
 8008810:	5771 0800 5261 0800 64a1 0800 5251 0800     qW..aR...d..QR..
 8008820:	6469 656c 0000 0000 5355 2042 6f63 666e     idle....USB conf
 8008830:	6769 7275 6465 0a2e 0000 0000 654b 6279     igured......Keyb
 8008840:	616f 6472 7320 6174 7472 0a2e 0000 0000     oard start......
 8008850:	735b 005d 720a 632f 3020 3231 3433 3635     [s]..r/c 0123456
 8008860:	3837 4139 4342 4544 0a46 0000 3025 5832     789ABCDEF...%02X
 8008870:	0000 0000 3025 3631 0062 0000 656b 6279     ....%016b...keyb
 8008880:	616f 6472 735f 7465 6c5f 6465 203a 0000     oard_set_led: ..
 8008890:	656b 6279 616f 6472 725f 7065 726f 3a74     keyboard_report:
 80088a0:	0020 0000 3025 5832 0020 0000 0000 0000      ...%02X .......

080088b0 <ep0config>:
 80088b0:	0000 0000 5bc1 0800 5ad1 0800 5a21 0800     .....[...Z..!Z..
 80088c0:	0040 0040 1568 2000 1568 2000 0001 0000     @.@.h.. h.. ....
 80088d0:	1508 2000 0000 0000 0000 0000 0000 0000     ... ............
 80088e0:	6564 5f6c 656b 5f79 6962 3a74 6320 6e61     del_key_bit: can
 80088f0:	7427 6420 6c65 203a 3025 5832 000a 0000     't del: %02X....
 8008900:	6461 5f64 656b 5f79 6962 3a74 6320 6e61     add_key_bit: can
 8008910:	7427 6120 6464 203a 3025 5832 000a 0000     't add: %02X....
 8008920:	6f62 6e75 6563 3a21 0020 0000               bounce!: ...
